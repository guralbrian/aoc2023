1701798772975:data <- c(
1701798772988:'seeds: 79 14 55 13'
1701798773002:''
1701798800108:data <- c(
1701798800123:'seeds: 79 14 55 13',
1701798800133:'',
1701798800143:'seed-to-soil map:',
1701798800158:'50 98 2',
1701798800171:'52 50 48',
1701798800184:'',
1701798800199:'soil-to-fertilizer map:',
1701798800214:'0 15 37',
1701798800227:'37 52 2',
1701798800239:'39 0 15',
1701798800253:'',
1701798800264:'fertilizer-to-water map:',
1701798800274:'49 53 8',
1701798800284:'0 11 42',
1701798800293:'42 0 7',
1701798800304:'57 7 4',
1701798800313:'',
1701798800322:'water-to-light map:',
1701798800331:'88 18 7',
1701798800351:'18 25 70',
1701798800362:'',
1701798800371:'light-to-temperature map:',
1701798800381:'45 77 23',
1701798800391:'81 45 19',
1701798800401:'68 64 13',
1701798800411:'',
1701798800420:'temperature-to-humidity map:',
1701798800431:'0 69 1',
1701798800441:"1 0 69",
1701798800451:'',
1701798800461:'humidity-to-location map:',
1701798800471:"60 56 37",
1701798800481:"56 93 4" )
1701798838816:data
1701799026343:# Extract seeds
1701799026358:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701799027962:# Split data into different maps
1701799027975:split_data <- split(data[-1], cumsum(grepl("map:", data[-1])))
1701799041754:# Function to convert map data to a dataframe
1701799041771:convert_to_df <- function(map_data) {
1701799041789:clean_data <- map_data[!map_data == ""]
1701799041805:do.call(rbind, lapply(clean_data, function(x) as.numeric(strsplit(x, " ")[[1]])))
1701799041819:}
1701799042745:# Convert each map's data to a dataframe and store in a list
1701799042763:map_list <- lapply(split_data, convert_to_df)
1701799044399:View(map_list)
1701799054806:# Extract seeds
1701799054819:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701799055211:# Split data into different maps
1701799055224:split_data <- split(data[-1], cumsum(grepl("map:", data[-1])))
1701799055456:# Function to convert map data to a dataframe
1701799055468:convert_to_df <- function(map_data) {
1701799055482:clean_data <- map_data[!map_data == ""]
1701799055493:do.call(rbind, lapply(clean_data, function(x) as.numeric(strsplit(x, " ")[[1]])))
1701799055505:}
1701799055640:# Convert each map's data to a dataframe and store in a list
1701799055658:map_list <- lapply(split_data, convert_to_df)
1701799056379:# Set column names for each dataframe
1701799056393:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701799056965:# Output
1701799056980:list(seeds = seeds, maps = map_list)
1701799067289:View(map_list)
1701799070432:View(split_data)
1701799086550:# Split data into different maps
1701799086561:split_data <- split(data[-1], cumsum(grepl("map:", data[-1])))[-1]
1701799089226:View(split_data)
1701799097780:# Function to convert map data to a dataframe
1701799097796:convert_to_df <- function(map_data) {
1701799097809:clean_data <- map_data[!map_data == ""]
1701799097820:do.call(rbind, lapply(clean_data, function(x) as.numeric(strsplit(x, " ")[[1]])))
1701799097830:}
1701799098138:# Convert each map's data to a dataframe and store in a list
1701799098153:map_list <- lapply(split_data, convert_to_df)
1701799098502:# Set column names for each dataframe
1701799098521:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701799099173:# Output
1701799099186:list(seeds = seeds, maps = map_list)
1701799102187:# Extract seeds
1701799102200:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701799102219:# Split data into different maps
1701799102230:split_data <- split(data[-1], cumsum(grepl("map:", data[-1])))[-1]
1701799102251:# Function to convert map data to a dataframe
1701799102263:convert_to_df <- function(map_data) {
1701799102275:clean_data <- map_data[!map_data == ""]
1701799102288:do.call(rbind, lapply(clean_data, function(x) as.numeric(strsplit(x, " ")[[1]])))
1701799102301:}
1701799102323:# Convert each map's data to a dataframe and store in a list
1701799102336:map_list <- lapply(split_data, convert_to_df)
1701799102360:# Set column names for each dataframe
1701799102372:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701799102392:# Output
1701799102404:list(seeds = seeds, maps = map_list)
1701799104345:View(map_list)
1701799122688:# Extract seeds
1701799122700:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701799123115:# Split data into different maps
1701799123126:split_data <- split(data[-1], cumsum(grepl("map:", data[-1])))
1701799123362:# Function to convert map data to a dataframe
1701799123379:convert_to_df <- function(map_data) {
1701799123394:clean_data <- map_data[!map_data == ""]
1701799123407:do.call(rbind, lapply(clean_data, function(x) as.numeric(strsplit(x, " ")[[1]])))
1701799123420:}
1701799123588:# Convert each map's data to a dataframe and store in a list
1701799123604:map_list <- lapply(split_data, convert_to_df)
1701799123766:# Set column names for each dataframe
1701799123778:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701799124194:# Output
1701799124205:list(seeds = seeds, maps = map_list)
1701799143139:map_list
1701799150638:View(split_data)
1701799154312:split_data[["1"]]
1701799157716:View(map_list)
1701799160883:map_list[["1"]]
1701799170211:# Convert each map's data to a dataframe and store in a list
1701799170222:map_list <- lapply(split_data, convert_to_df)
1701799172165:View(map_list)
1701799175766:map_list[["1"]]
1701799237261:# Remove empty strings
1701799237272:data_clean <- data[data != ""]
1701799237755:# Extract map names and their corresponding indices
1701799237767:map_names <- data_clean[grepl("map:", data_clean)]
1701799237927:map_indices <- match(map_names, data_clean)
1701799238110:# Split data into different maps
1701799238122:map_list <- lapply(1:length(map_names), function(i) {
1701799238134:start_index <- map_indices[i] + 1
1701799238143:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701799238154:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701799238164:})
1701799238292:names(map_list) <- gsub(" map:", "", map_names)
1701799238961:# Set column names for each dataframe
1701799238975:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701799239502:# Output
1701799239513:list(seeds = seeds, maps = map_list)
1701799307279:map_list
1701799748286:# Extract seeds
1701799748297:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701799748314:# Remove empty strings
1701799748327:data_clean <- data[data != ""]
1701799748346:# Extract map names and their corresponding indices
1701799748359:map_names <- data_clean[grepl("map:", data_clean)]
1701799748370:map_indices <- match(map_names, data_clean)
1701799748386:# Split data into different maps
1701799748396:map_list <- lapply(1:length(map_names), function(i) {
1701799748408:start_index <- map_indices[i] + 1
1701799748420:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701799748430:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701799748440:})
1701799748464:names(map_list) <- gsub(" map:", "", map_names)
1701799748487:# Set column names for each dataframe
1701799748499:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701799748520:for(rule_groups in 1:length(map_list)){
1701799748532:for(rule in 1:nrow(map_list$rule_groups)){
1701799748545:source_range <- map_list$rule_groups[rule, start]:(map_list$rule_groups[rule, start] +  map_list$rule_groups[rule, range]-1)
1701799748558:delta <-  map_list$rule_groups[rule, dest] - map_list$rule_groups[rule, start]
1701799748571:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701799748584:# Merge back together seeds_new
1701799748595:seeds <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701799748610:}
1701799748621:}
1701799778045:for(rule_groups in 1:length(map_list)){
1701799778058:print(rule_groups)
1701799778070:for(rule in 1:nrow(map_list$rule_groups)){
1701799778081:print(rule)
1701799778092:source_range <- map_list$rule_groups[rule, start]:(map_list$rule_groups[rule, start] +  map_list$rule_groups[rule, range]-1)
1701799778103:delta <-  map_list$rule_groups[rule, dest] - map_list$rule_groups[rule, start]
1701799778112:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701799778123:# Merge back together seeds_new
1701799778132:seeds <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701799778141:}
1701799778151:}
1701799798095:for(rule_groups in 1:length(map_list)){
1701799798108:print(rule_groups)
1701799798120:for(rule in 1:nrow(map_list[[rule_groups]])){
1701799798132:print(rule)
1701799798142:source_range <- map_list$rule_groups[rule, start]:(map_list$rule_groups[rule, start] +  map_list$rule_groups[rule, range]-1)
1701799798154:delta <-  map_list$rule_groups[rule, dest] - map_list$rule_groups[rule, start]
1701799798165:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701799798176:# Merge back together seeds_new
1701799798187:seeds <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701799798199:}
1701799798211:}
1701799841565:# Extract seeds
1701799841576:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701799841595:# Remove empty strings
1701799841606:data_clean <- data[data != ""]
1701799841624:# Extract map names and their corresponding indices
1701799841635:map_names <- data_clean[grepl("map:", data_clean)]
1701799841647:map_indices <- match(map_names, data_clean)
1701799841664:# Split data into different maps
1701799841675:map_list <- lapply(1:length(map_names), function(i) {
1701799841686:start_index <- map_indices[i] + 1
1701799841698:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701799841710:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701799841721:})
1701799841745:names(map_list) <- gsub(" map:", "", map_names)
1701799841761:# Set column names for each dataframe
1701799841772:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701799841789:for(rule_groups in 1:length(map_list)){
1701799841799:print(rule_groups)
1701799841810:for(rule in 1:nrow(map_list[[rule_groups]])){
1701799841821:print(rule)
1701799841830:source_range <- map_list[[rule_groups]][rule, start]:(map_list[[rule_groups]][rule, start] +  map_list[[rule_groups]][rule, range]-1)
1701799841841:delta <-  map_list[[rule_groups]][rule, dest] - map_list[[rule_groups]][rule, start]
1701799841851:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701799841861:# Merge back together seeds_new
1701799841872:seeds <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701799841882:}
1701799841892:}
1701799870433:map_list[[1]]
1701799874508:map_list[[1]][1,]
1701799888705:map_list[[1]][1,dest]
1701799897211:map_list[[1]][1,'dest']
1701799923710:# Extract seeds
1701799923725:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701799923745:# Remove empty strings
1701799923757:data_clean <- data[data != ""]
1701799923781:# Extract map names and their corresponding indices
1701799923795:map_names <- data_clean[grepl("map:", data_clean)]
1701799923808:map_indices <- match(map_names, data_clean)
1701799923828:# Split data into different maps
1701799923840:map_list <- lapply(1:length(map_names), function(i) {
1701799923852:start_index <- map_indices[i] + 1
1701799923864:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701799923877:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701799923889:})
1701799923921:names(map_list) <- gsub(" map:", "", map_names)
1701799923942:# Set column names for each dataframe
1701799923955:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701799923978:for(rule_groups in 1:length(map_list)){
1701799923992:print(rule_groups)
1701799924006:for(rule in 1:nrow(map_list[[rule_groups]])){
1701799924021:print(rule)
1701799924033:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701799924045:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701799924063:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701799924083:# Merge back together seeds_new
1701799924101:seeds <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701799924116:}
1701799924130:}
1701799935732:min(seeds)
1701800019544:# Extract seeds
1701800019553:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701800019569:# Remove empty strings
1701800019578:data_clean <- data[data != ""]
1701800019594:# Extract map names and their corresponding indices
1701800019604:map_names <- data_clean[grepl("map:", data_clean)]
1701800019616:map_indices <- match(map_names, data_clean)
1701800019634:# Split data into different maps
1701800019644:map_list <- lapply(1:length(map_names), function(i) {
1701800019653:start_index <- map_indices[i] + 1
1701800019661:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701800019670:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701800019679:})
1701800019699:names(map_list) <- gsub(" map:", "", map_names)
1701800019715:# Set column names for each dataframe
1701800019722:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701800019737:for(rule_groups in 1:length(map_list)){
1701800019745:print(rule_groups)
1701800019754:for(rule in 1:nrow(map_list[[rule_groups]])){
1701800019763:print(map_list[[rule_groups]][rule,])
1701800019775:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701800019787:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701800019797:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701800019810:# Merge back together seeds_new
1701800019820:seeds <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701800019829:print(seeds)
1701800019838:}
1701800019847:}
1701800040129:# Extract seeds
1701800040141:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701800040157:# Remove empty strings
1701800040167:data_clean <- data[data != ""]
1701800040183:# Extract map names and their corresponding indices
1701800040193:map_names <- data_clean[grepl("map:", data_clean)]
1701800040204:map_indices <- match(map_names, data_clean)
1701800040221:# Split data into different maps
1701800040230:map_list <- lapply(1:length(map_names), function(i) {
1701800040241:start_index <- map_indices[i] + 1
1701800040251:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701800040262:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701800040274:})
1701800040302:names(map_list) <- gsub(" map:", "", map_names)
1701800040321:# Set column names for each dataframe
1701800040331:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701800040347:for(rule_groups in 1:length(map_list)){
1701800040357:for(rule in 1:nrow(map_list[[rule_groups]])){
1701800040368:print(map_list[[rule_groups]][rule,])
1701800040379:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701800040391:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701800040402:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701800040413:# Merge back together seeds_new
1701800040424:seeds <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701800040437:print(seeds)
1701800040448:}
1701800040459:}
1701800144797:# Extract seeds
1701800144811:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701800148826:seeds
1701800607863:# Extract seeds
1701800607873:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701800607892:# Remove empty strings
1701800607903:data_clean <- data[data != ""]
1701800607921:# Extract map names and their corresponding indices
1701800607930:map_names <- data_clean[grepl("map:", data_clean)]
1701800607939:map_indices <- match(map_names, data_clean)
1701800607957:# Split data into different maps
1701800607966:map_list <- lapply(1:length(map_names), function(i) {
1701800607977:start_index <- map_indices[i] + 1
1701800607989:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701800608001:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701800608012:})
1701800608043:names(map_list) <- gsub(" map:", "", map_names)
1701800608061:# Set column names for each dataframe
1701800608072:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701800608090:for(rule_groups in 1:length(map_list)){
1701800608101:seeds_new <- seeds
1701800608114:for(rule in 1:nrow(map_list[[rule_groups]])){
1701800608125:print(map_list[[rule_groups]][rule,])
1701800608137:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701800608150:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701800608162:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701800608172:# Merge back together seeds_new
1701800608183:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701800608195:print(seeds)
1701800608205:}
1701800608216:seeds <- seeds_new
1701800608227:}
1701800615537:min(seeds)
1701800695952:# Extract seeds
1701800695964:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701800719051:rule_groups <- 1
1701800726011:rule <- 1
1701800727089:print(map_list[[rule_groups]][rule,])
1701800728124:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701800730420:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701800731455:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701800733566:seeds_new
1701800738336:# Merge back together seeds_new
1701800738348:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701800740698:seeds_new
1701800743584:rule <- 2
1701800744302:print(map_list[[rule_groups]][rule,])
1701800744858:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701800745356:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701800745940:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701800746443:# Merge back together seeds_new
1701800746456:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701800751795:seeds_new
1701800796728:rule_groups <- 2
1701800797242:rule <- 1
1701800797854:print(map_list[[rule_groups]][rule,])
1701800799585:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701800800237:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701800803327:c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701800823526:seeds[seeds %in% source_range]
1701800840783:c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701800860086:c(seeds[seeds %in% source_range] + delta, seeds[!(seeds_new %in% source_range)])
1701800863011:seeds_new
1701800875004:seeds[!(seeds_new %in% source_range)]
1701800887833:c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701800923426:seeds_new <- c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701800927206:c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701800943700:rule <- 2
1701800944462:print(map_list[[rule_groups]][rule,])
1701800945452:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701800948129:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701800951372:c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701800962733:rule <- 3
1701800964731:print(map_list[[rule_groups]][rule,])
1701800968961:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701800969281:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701800971577:c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701800975598:seeds_new <- c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701800979586:c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801003345:# Extract seeds
1701801003356:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701801003373:# Remove empty strings
1701801003383:data_clean <- data[data != ""]
1701801003403:# Extract map names and their corresponding indices
1701801003414:map_names <- data_clean[grepl("map:", data_clean)]
1701801003426:map_indices <- match(map_names, data_clean)
1701801003445:# Split data into different maps
1701801003456:map_list <- lapply(1:length(map_names), function(i) {
1701801003466:start_index <- map_indices[i] + 1
1701801003479:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701801003493:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701801003506:})
1701801003541:names(map_list) <- gsub(" map:", "", map_names)
1701801003559:# Set column names for each dataframe
1701801003570:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701801003587:for(rule_groups in 1:length(map_list)){
1701801003596:seeds <- seeds_new
1701801003606:for(rule in 1:nrow(map_list[[rule_groups]])){
1701801003615:print(map_list[[rule_groups]][rule,])
1701801003624:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701801003633:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701801003643:seeds_new <- c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701801003658:# Merge back together seeds_new
1701801003667:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801003677:}
1701801003686:}
1701801003721:min(seeds_new)
1701801023338:seeds_new
1701801031579:print(map_list[[rule_groups]][rule,])
1701801077442:# Extract seeds
1701801077454:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701801104893:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701801104905:# Remove empty strings
1701801104913:data_clean <- data[data != ""]
1701801104926:# Extract map names and their corresponding indices
1701801104933:map_names <- data_clean[grepl("map:", data_clean)]
1701801104942:map_indices <- match(map_names, data_clean)
1701801104955:# Split data into different maps
1701801104962:map_list <- lapply(1:length(map_names), function(i) {
1701801104970:start_index <- map_indices[i] + 1
1701801104979:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701801104987:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701801104998:})
1701801105022:names(map_list) <- gsub(" map:", "", map_names)
1701801105038:# Set column names for each dataframe
1701801105050:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701801105069:for(rule_groups in 1:length(map_list)){
1701801105080:for(rule in 1:nrow(map_list[[rule_groups]])){
1701801105090:print(map_list[[rule_groups]][rule,])
1701801105100:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701801105112:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701801105122:seeds_new <- c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701801105139:# Merge back together seeds_new
1701801105149:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801105161:}
1701801105172:seeds <- seeds_new
1701801105186:}
1701801105233:min(seeds)
1701801113101:seeds
1701801130900:# Extract seeds
1701801130910:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701801130928:# Remove empty strings
1701801130939:data_clean <- data[data != ""]
1701801130957:# Extract map names and their corresponding indices
1701801130967:map_names <- data_clean[grepl("map:", data_clean)]
1701801130979:map_indices <- match(map_names, data_clean)
1701801130997:# Split data into different maps
1701801131005:map_list <- lapply(1:length(map_names), function(i) {
1701801131014:start_index <- map_indices[i] + 1
1701801131022:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701801131031:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701801131040:})
1701801131072:names(map_list) <- gsub(" map:", "", map_names)
1701801131090:# Set column names for each dataframe
1701801131100:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701801131119:for(rule_groups in 1:length(map_list)){
1701801131131:for(rule in 1:nrow(map_list[[rule_groups]])){
1701801131141:print(map_list[[rule_groups]][rule,])
1701801131152:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701801131163:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701801131176:seeds_new <- c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701801131199:# Merge back together seeds_new
1701801131211:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801131223:}
1701801131234:seeds <- seeds_new
1701801131244:print(seeds)
1701801131254:}
1701801131288:min(seeds)
1701801180759:# Extract seeds
1701801180767:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701801183502:# Remove empty strings
1701801183513:data_clean <- data[data != ""]
1701801183743:# Extract map names and their corresponding indices
1701801183754:map_names <- data_clean[grepl("map:", data_clean)]
1701801183947:map_indices <- match(map_names, data_clean)
1701801184290:# Split data into different maps
1701801184306:map_list <- lapply(1:length(map_names), function(i) {
1701801184323:start_index <- map_indices[i] + 1
1701801184335:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701801184347:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701801184359:})
1701801185645:names(map_list) <- gsub(" map:", "", map_names)
1701801186289:# Set column names for each dataframe
1701801186303:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701801207602:rule <- 1
1701801208144:rule_groups <- 1
1701801209066:print(map_list[[rule_groups]][rule,])
1701801210322:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701801211401:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701801213291:seeds_new <- c(seeds_new[seeds_new %in% source_range] + delta, seeds_new[!(seeds_new %in% source_range)])
1701801214554:# Merge back together seeds_new
1701801214566:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801219905:seeds_new
1701801232212:# Extract seeds
1701801232225:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701801236220:rule <- 1
1701801236465:rule_groups <- 1
1701801237432:print(map_list[[rule_groups]][rule,])
1701801273814:rule <- 1
1701801274043:rule_groups <- 1
1701801274403:print(map_list[[rule_groups]][rule,])
1701801274675:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701801275234:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701801276471:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701801277600:# Merge back together seeds_new
1701801277611:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801284302:for(rule_groups in 1:length(map_list)){
1701801284312:for(rule in 1:nrow(map_list[[rule_groups]])){
1701801284324:print(map_list[[rule_groups]][rule,])
1701801284336:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701801284348:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701801284359:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701801284371:# Merge back together seeds_new
1701801284383:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801284394:}
1701801284407:seeds <- seeds_new
1701801284420:print(seeds)
1701801284431:}
1701801287855:min(seeds)
1701801502241:seeds <- c("81", '57', '53', "52")
1701801524153:rule_groups <- 3
1701801524468:rule <- 1
1701801525617:print(map_list[[rule_groups]][rule,])
1701801528907:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701801533536:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701801535221:source_range
1701801537633:delta
1701801541255:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701801544134:seeds_new
1701801550678:c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801554192:# Merge back together seeds_new
1701801554202:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801556775:seeds_new
1701801570594:seeds <- seeds_new
1701801571175:print(seeds)
1701801589624:# Extract seeds
1701801589636:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701801589654:# Remove empty strings
1701801589666:data_clean <- data[data != ""]
1701801589684:# Extract map names and their corresponding indices
1701801589696:map_names <- data_clean[grepl("map:", data_clean)]
1701801589707:map_indices <- match(map_names, data_clean)
1701801589726:# Split data into different maps
1701801589736:map_list <- lapply(1:length(map_names), function(i) {
1701801589747:start_index <- map_indices[i] + 1
1701801589758:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701801589769:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701801589779:})
1701801589806:names(map_list) <- gsub(" map:", "", map_names)
1701801589823:# Set column names for each dataframe
1701801589834:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701801589853:for(rule_groups in 1:length(map_list)){
1701801589863:for(rule in 1:nrow(map_list[[rule_groups]])){
1701801589873:#seeds <- c("81", '57', '53', "52")
1701801589883:#rule_groups <- 3
1701801589896:#rule <- 1
1701801589906:print(map_list[[rule_groups]][rule,])
1701801589917:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701801589928:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701801589941:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701801589951:# Merge back together seeds_new
1701801589963:seeds_new <- c(seeds[seeds %in% seeds_new], seeds_new[!(seeds_new %in% seeds)])
1701801589974:}
1701801589984:seeds <- seeds_new
1701801589995:print(seeds)
1701801590006:}
1701801590044:min(seeds)
1701802422506:# Extract seeds
1701802422519:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701802422542:# Remove empty strings
1701802422552:data_clean <- data[data != ""]
1701802422570:# Extract map names and their corresponding indices
1701802422581:map_names <- data_clean[grepl("map:", data_clean)]
1701802422593:map_indices <- match(map_names, data_clean)
1701802422612:# Split data into different maps
1701802422623:map_list <- lapply(1:length(map_names), function(i) {
1701802422634:start_index <- map_indices[i] + 1
1701802422647:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701802422657:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701802422677:})
1701802422700:names(map_list) <- gsub(" map:", "", map_names)
1701802422715:# Set column names for each dataframe
1701802422727:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701802422738:seeds_group <- seeds
1701802422749:for(rule_groups in 1:length(map_list)){
1701802422761:for(rule in 1:nrow(map_list[[rule_groups]])){
1701802422770:seeds
1701802422780:seeds <- c("81", '57', '53', "52")
1701802422790:rule_groups <- 3
1701802422802:rule <- 1
1701802422814:print(map_list[[rule_groups]][rule,])
1701802422825:# get the start range
1701802422836:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701802422853:# find how much values in the start range will change
1701802422861:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701802422879:# change values in start range
1701802422889:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701802422907:# update current group level seeds with changes
1701802422917:seeds_unchanged <- seeds_group[seeds_group %in% seeds_new]
1701802422929:seeds_changed <- seeds_new[!(seeds_new %in% seeds_group)
1701802422940:seeds_group <- c(seeds_unchanged, seeds_changed)
1701802436940:# Extract seeds
1701802436951:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701802436967:# Remove empty strings
1701802436975:data_clean <- data[data != ""]
1701802436988:# Extract map names and their corresponding indices
1701802436997:map_names <- data_clean[grepl("map:", data_clean)]
1701802437006:map_indices <- match(map_names, data_clean)
1701802437021:# Split data into different maps
1701802437029:map_list <- lapply(1:length(map_names), function(i) {
1701802437039:start_index <- map_indices[i] + 1
1701802437047:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701802437056:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701802437065:})
1701802437085:names(map_list) <- gsub(" map:", "", map_names)
1701802437099:# Set column names for each dataframe
1701802437108:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701802437117:seeds_group <- seeds
1701802437125:for(rule_groups in 1:length(map_list)){
1701802437135:for(rule in 1:nrow(map_list[[rule_groups]])){
1701802437143:seeds
1701802437153:seeds <- c("81", '57', '53', "52")
1701802437162:rule_groups <- 3
1701802437170:rule <- 1
1701802437179:print(map_list[[rule_groups]][rule,])
1701802437187:# get the start range
1701802437195:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701802437211:# find how much values in the start range will change
1701802437222:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701802437240:# change values in start range
1701802437251:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701802437266:# update current group level seeds with changes
1701802437276:seeds_unchanged <- seeds_group[seeds_group %in% seeds_new]
1701802437286:seeds_changed <- seeds_new[!(seeds_new %in% seeds_group)]
1701802437296:seeds_group <- c(seeds_unchanged, seeds_changed)
1701802437308:}
1701802437320:seeds <- seeds_group
1701802437331:print(seeds)
1701802437343:}
1701802476048:# Extract seeds
1701802476060:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701802476078:# Remove empty strings
1701802476089:data_clean <- data[data != ""]
1701802476106:# Extract map names and their corresponding indices
1701802476115:map_names <- data_clean[grepl("map:", data_clean)]
1701802476126:map_indices <- match(map_names, data_clean)
1701802476142:# Split data into different maps
1701802476153:map_list <- lapply(1:length(map_names), function(i) {
1701802476163:start_index <- map_indices[i] + 1
1701802476174:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701802476186:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701802476198:})
1701802476220:names(map_list) <- gsub(" map:", "", map_names)
1701802476239:# Set column names for each dataframe
1701802476251:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701802476262:seeds_group <- seeds
1701802476274:for(rule_groups in 1:length(map_list)){
1701802476287:for(rule in 1:nrow(map_list[[rule_groups]])){
1701802476309:#seeds <- c("81", '57', '53', "52")
1701802476320:#rule_groups <- 3
1701802476330:#rule <- 1
1701802476342:print(map_list[[rule_groups]][rule,])
1701802476353:# get the start range
1701802476365:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701802476388:# find how much values in the start range will change
1701802476401:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701802476423:# change values in start range
1701802476434:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701802476453:# update current group level seeds with changes
1701802476463:seeds_unchanged <- seeds_group[seeds_group %in% seeds_new]
1701802476475:seeds_changed <- seeds_new[!(seeds_new %in% seeds_group)]
1701802476487:seeds_group <- c(seeds_unchanged, seeds_changed)
1701802476498:}
1701802476509:seeds <- seeds_group
1701802476521:print(seeds)
1701802476532:}
1701802476574:min(seeds)
1701802608416:# Extract seeds
1701802608427:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701802608445:# Remove empty strings
1701802608465:data_clean <- data[data != ""]
1701802608480:# Extract map names and their corresponding indices
1701802608488:map_names <- data_clean[grepl("map:", data_clean)]
1701802608497:map_indices <- match(map_names, data_clean)
1701802608512:# Split data into different maps
1701802608521:map_list <- lapply(1:length(map_names), function(i) {
1701802608529:start_index <- map_indices[i] + 1
1701802608540:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701802608549:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701802608557:})
1701802608578:names(map_list) <- gsub(" map:", "", map_names)
1701802608591:# Set column names for each dataframe
1701802608600:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701802608609:seeds_group <- seeds
1701802608618:for(rule_groups in 1:length(map_list)){
1701802608627:for(rule in 1:nrow(map_list[[rule_groups]])){
1701802608643:#seeds <- c("81", '57', '53', "52")
1701802608652:#rule_groups <- 3
1701802608661:#rule <- 1
1701802608669:print(map_list[[rule_groups]][rule,])
1701802608678:# get the start range
1701802608689:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701802608708:# find how much values in the start range will change
1701802608719:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701802608737:# change values in start range of the intial values for this group (seeds)
1701802608747:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701802608765:# update current group level seeds with changes
1701802608776:# Add only the changed values to an updating list
1701802608787:# Keep values that changed at each level, join with unchanged values
1701802608798:seeds_unchanged <- seeds_group[seeds_group %in% seeds]
1701802608809:seeds_changed <- seeds_new[!(seeds_new %in% seeds_group)]
1701802608821:seeds_group <- c(seeds_unchanged, seeds_changed)
1701802608832:}
1701802608842:seeds <- seeds_group
1701802608852:print(seeds)
1701802608863:}
1701803450690:# Extract seeds
1701803450699:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701803450716:# Remove empty strings
1701803450723:data_clean <- data[data != ""]
1701803450739:# Extract map names and their corresponding indices
1701803450750:map_names <- data_clean[grepl("map:", data_clean)]
1701803450761:map_indices <- match(map_names, data_clean)
1701803450780:# Split data into different maps
1701803450791:map_list <- lapply(1:length(map_names), function(i) {
1701803450802:start_index <- map_indices[i] + 1
1701803450812:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701803450823:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701803450834:})
1701803450861:names(map_list) <- gsub(" map:", "", map_names)
1701803450879:# Set column names for each dataframe
1701803450889:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701803450900:seeds_group <- seeds
1701803450910:for(rule_groups in 1:length(map_list)){
1701803450920:for(rule in 1:nrow(map_list[[rule_groups]])){
1701803450934:#seeds <- c("81", '57', '53', "52")
1701803450944:#rule_groups <- 3
1701803450953:#rule <- 1
1701803450963:print(map_list[[rule_groups]][rule,])
1701803450973:# get the start range
1701803450982:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701803450997:# find how much values in the start range will change
1701803451008:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701803451026:# change values in start range of the intial values for this group (seeds)
1701803451037:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701803451056:# update current group level seeds with changes
1701803451067:# Add only the changed values to an updating list
1701803451077:# Keep values that changed at each level, join with unchanged values
1701803451086:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701803451095:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701803451104:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701803451114:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701803451124:}
1701803451134:seeds <- seeds_group
1701803451144:print(seeds)
1701803451153:}
1701803455928:min(seeds)
1701803489246:data <- readLines("data/input_5.txt")
1701803489993:# Extract seeds
1701803490007:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701803490210:# Remove empty strings
1701803490222:data_clean <- data[data != ""]
1701803490443:# Extract map names and their corresponding indices
1701803490455:map_names <- data_clean[grepl("map:", data_clean)]
1701803490941:map_indices <- match(map_names, data_clean)
1701803491142:# Split data into different maps
1701803491155:map_list <- lapply(1:length(map_names), function(i) {
1701803491165:start_index <- map_indices[i] + 1
1701803491176:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701803491187:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701803491199:})
1701803491353:names(map_list) <- gsub(" map:", "", map_names)
1701803491858:# Set column names for each dataframe
1701803491869:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701803492095:seeds_group <- seeds
1701803492492:for(rule_groups in 1:length(map_list)){
1701803492502:for(rule in 1:nrow(map_list[[rule_groups]])){
1701803492520:#seeds <- c("81", '57', '53', "52")
1701803492529:#rule_groups <- 3
1701803492538:#rule <- 1
1701803492547:print(map_list[[rule_groups]][rule,])
1701803492557:# get the start range
1701803492565:source_range <- map_list[[rule_groups]][rule, 'start']:(map_list[[rule_groups]][rule, 'start'] +  map_list[[rule_groups]][rule, 'range']-1)
1701803492579:# find how much values in the start range will change
1701803492587:delta <-  map_list[[rule_groups]][rule, 'dest'] - map_list[[rule_groups]][rule, 'start']
1701803492602:# change values in start range of the intial values for this group (seeds)
1701803492613:seeds_new <- c(seeds[seeds %in% source_range] + delta, seeds[!(seeds %in% source_range)])
1701803492629:# update current group level seeds with changes
1701803492639:# Add only the changed values to an updating list
1701803492650:# Keep values that changed at each level, join with unchanged values
1701803492662:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701803492673:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701803492685:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701803492695:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701803492705:}
1701803492716:seeds <- seeds_group
1701803492729:print(seeds)
1701803492740:}
1701804060723:data <- c(
1701804060735:'seeds: 79 14 55 13',
1701804060746:'',
1701804060756:'seed-to-soil map:',
1701804060766:'50 98 2',
1701804060775:'52 50 48',
1701804060785:'',
1701804060795:'soil-to-fertilizer map:',
1701804060805:'0 15 37',
1701804060815:'37 52 2',
1701804060825:'39 0 15',
1701804060833:'',
1701804060843:'fertilizer-to-water map:',
1701804060851:'49 53 8',
1701804060859:'0 11 42',
1701804060868:'42 0 7',
1701804060879:'57 7 4',
1701804060888:'',
1701804060898:'water-to-light map:',
1701804060907:'88 18 7',
1701804060918:'18 25 70',
1701804060930:'',
1701804060942:'light-to-temperature map:',
1701804060953:'45 77 23',
1701804060964:'81 45 19',
1701804060975:'68 64 13',
1701804060986:'',
1701804060997:'temperature-to-humidity map:',
1701804061008:'0 69 1',
1701804061020:"1 0 69",
1701804061030:'',
1701804061041:'humidity-to-location map:',
1701804061051:"60 56 37",
1701804061062:"56 93 4" )
1701804067640:# Extract seeds
1701804067653:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701804067673:# Remove empty strings
1701804067685:data_clean <- data[data != ""]
1701804067703:# Extract map names and their corresponding indices
1701804067714:map_names <- data_clean[grepl("map:", data_clean)]
1701804067727:map_indices <- match(map_names, data_clean)
1701804067755:# Split data into different maps
1701804067769:map_list <- lapply(1:length(map_names), function(i) {
1701804067786:start_index <- map_indices[i] + 1
1701804067798:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701804067811:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701804067822:})
1701804067842:names(map_list) <- gsub(" map:", "", map_names)
1701804067857:# Set column names for each dataframe
1701804067867:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701804067877:seeds_group <- seeds
1701804067889:for(rule_groups in 1:length(map_list)){
1701804067900:for(rule in 1:nrow(map_list[[rule_groups]])){
1701804067914:#seeds <- c("81", '57', '53', "52")
1701804067922:#rule_groups <- 3
1701804067931:#rule <- 1
1701804067940:print(map_list[[rule_groups]][rule,])
1701804067949:# Extract the start, end of the range, and the delta
1701804067958:start_range <- map_list[[rule_groups]][rule, 'start']
1701804067966:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701804067974:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701804067989:# Apply transformation
1701804067996:seeds_new <- seeds[which(seeds <= end_range & seeds >= start_range)]
1701804068004:# update current group level seeds with changes
1701804068015:# Add only the changed values to an updating list
1701804068026:# Keep values that changed at each level, join with unchanged values
1701804068037:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701804068046:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701804068060:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701804068073:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701804068085:}
1701804068096:seeds <- seeds_group
1701804068107:print(seeds)
1701804068117:}
1701804071119:source("~/.active-rstudio-document", echo=TRUE)
1701804078978:data <- c(
1701804078992:'seeds: 79 14 55 13',
1701804079002:'',
1701804079011:'seed-to-soil map:',
1701804079021:'50 98 2',
1701804079032:'52 50 48',
1701804079044:'',
1701804079055:'soil-to-fertilizer map:',
1701804079063:'0 15 37',
1701804079072:'37 52 2',
1701804079080:'39 0 15',
1701804079088:'',
1701804079096:'fertilizer-to-water map:',
1701804079104:'49 53 8',
1701804079115:'0 11 42',
1701804079124:'42 0 7',
1701804079135:'57 7 4',
1701804079145:'',
1701804079155:'water-to-light map:',
1701804079168:'88 18 7',
1701804079178:'18 25 70',
1701804079189:'',
1701804079199:'light-to-temperature map:',
1701804079207:'45 77 23',
1701804079216:'81 45 19',
1701804079226:'68 64 13',
1701804079236:'',
1701804079249:'temperature-to-humidity map:',
1701804079261:'0 69 1',
1701804079274:"1 0 69",
1701804079285:'',
1701804079296:'humidity-to-location map:',
1701804079309:"60 56 37",
1701804079328:"56 93 4" )
1701804088745:# Extract seeds
1701804088811:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701804088915:# Remove empty strings
1701804088979:data_clean <- data[data != ""]
1701804089077:# Extract map names and their corresponding indices
1701804089172:map_names <- data_clean[grepl("map:", data_clean)]
1701804089263:map_indices <- match(map_names, data_clean)
1701804089377:# Split data into different maps
1701804089465:map_list <- lapply(1:length(map_names), function(i) {
1701804089551:start_index <- map_indices[i] + 1
1701804089621:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701804089691:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701804089767:})
1701804089880:names(map_list) <- gsub(" map:", "", map_names)
1701804089977:# Set column names for each dataframe
1701804090035:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701804090096:seeds_group <- seeds
1701804105253:#seeds <- c("81", '57', '53', "52")
1701804105263:#rule_groups <- 3
1701804105275:#rule <- 1
1701804105286:print(map_list[[rule_groups]][rule,])
1701804114322:seeds <- c("81", '57', '53', "52")
1701804114843:rule_groups <- 3
1701804115871:rule <- 1
1701804116705:print(map_list[[rule_groups]][rule,])
1701804118971:# Extract the start, end of the range, and the delta
1701804118983:start_range <- map_list[[rule_groups]][rule, 'start']
1701804119705:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701804120196:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701804122038:start_range
1701804123858:end_range
1701804127034:delta
1701804131156:seeds[which(seeds <= end_range & seeds >= start_range)]
1701804133426:seeds_new
1701804135088:# Apply transformation
1701804135101:seeds_new <- seeds[which(seeds <= end_range & seeds >= start_range)]
1701804136596:seeds_new
1701804149287:# Apply transformation
1701804149300:seeds_new <- seeds[which(seeds <= end_range & seeds >= start_range)] %>% as.numeric()
1701804151578:# Apply transformation
1701804151590:seeds_new <- seeds[which(seeds <= end_range & seeds >= start_range)] %>% as.numeric()
1701804163097:# Apply transformation
1701804163108:seeds_new <- seeds[which(seeds <= end_range & seeds >= start_range)] |> as.numeric()
1701804167309:# update current group level seeds with changes
1701804167323:# Add only the changed values to an updating list
1701804167334:# Keep values that changed at each level, join with unchanged values
1701804167345:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701804169132:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701804169607:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701804170012:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701804172507:seeds_group
1701804189043:# Extract seeds
1701804189051:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701804189065:# Remove empty strings
1701804189073:data_clean <- data[data != ""]
1701804189093:# Extract map names and their corresponding indices
1701804189104:map_names <- data_clean[grepl("map:", data_clean)]
1701804189114:map_indices <- match(map_names, data_clean)
1701804189126:# Split data into different maps
1701804189134:map_list <- lapply(1:length(map_names), function(i) {
1701804189143:start_index <- map_indices[i] + 1
1701804189152:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701804189160:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701804189171:})
1701804189191:names(map_list) <- gsub(" map:", "", map_names)
1701804189203:# Set column names for each dataframe
1701804189211:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701804189220:seeds_group <- seeds
1701804189229:for(rule_groups in 1:length(map_list)){
1701804189239:for(rule in 1:nrow(map_list[[rule_groups]])){
1701804189250:#seeds <- c("81", '57', '53', "52")
1701804189262:#rule_groups <- 3
1701804189274:#rule <- 1
1701804189284:print(map_list[[rule_groups]][rule,])
1701804189296:# Extract the start, end of the range, and the delta
1701804189308:start_range <- map_list[[rule_groups]][rule, 'start']
1701804189321:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701804189330:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701804189347:# Apply transformation
1701804189358:seeds_new <- seeds[which(seeds <= end_range & seeds >= start_range)] |> as.numeric()
1701804189368:# update current group level seeds with changes
1701804189376:# Add only the changed values to an updating list
1701804189385:# Keep values that changed at each level, join with unchanged values
1701804189394:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701804189402:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701804189411:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701804189420:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701804189428:}
1701804189437:seeds <- seeds_group
1701804189447:print(seeds)
1701804189456:}
1701804189487:min(seeds)
1701804195410:seeds_group
1701805634996:# Extract seeds
1701805635006:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701805635022:# Remove empty strings
1701805635032:data_clean <- data[data != ""]
1701805635080:# Extract map names and their corresponding indices
1701805635097:map_names <- data_clean[grepl("map:", data_clean)]
1701805635113:map_indices <- match(map_names, data_clean)
1701805635130:# Split data into different maps
1701805635139:map_list <- lapply(1:length(map_names), function(i) {
1701805635149:start_index <- map_indices[i] + 1
1701805635159:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701805635168:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701805635175:})
1701805635197:names(map_list) <- gsub(" map:", "", map_names)
1701805635216:# Set column names for each dataframe
1701805635228:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701805635241:seeds_group <- seeds
1701805635252:for(rule_groups in 1:length(map_list)){
1701805635262:for(rule in 1:nrow(map_list[[rule_groups]])){
1701805635273:seeds <- c("81", '57', '53', "52")
1701805635283:rule_groups <- 3
1701805635295:rule <- 1
1701805635308:print(map_list[[rule_groups]][rule,])
1701805635319:# Extract the start, end of the range, and the delta
1701805635330:start_range <- map_list[[rule_groups]][rule, 'start']
1701805635340:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701805635350:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701805635367:# Apply transformation
1701805635377:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)],
1701805635387:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701805635397:# update current group level seeds with changes
1701805635408:# Add only the changed values to an updating list
1701805635418:# Keep values that changed at each level, join with unchanged values
1701805635428:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701805635439:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701805635449:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701805635459:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701805635470:}
1701805635480:seeds <- seeds_group
1701805635490:print(seeds)
1701805635500:}
1701805635538:min(seeds)
1701805650049:# Extract seeds
1701805650058:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701805650075:# Remove empty strings
1701805650082:data_clean <- data[data != ""]
1701805650099:# Extract map names and their corresponding indices
1701805650109:map_names <- data_clean[grepl("map:", data_clean)]
1701805650121:map_indices <- match(map_names, data_clean)
1701805650138:# Split data into different maps
1701805650148:map_list <- lapply(1:length(map_names), function(i) {
1701805650159:start_index <- map_indices[i] + 1
1701805650172:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701805650185:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701805650196:})
1701805650224:names(map_list) <- gsub(" map:", "", map_names)
1701805650240:# Set column names for each dataframe
1701805650250:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701805650262:seeds_group <- seeds
1701805650273:for(rule_groups in 1:length(map_list)){
1701805650284:for(rule in 1:nrow(map_list[[rule_groups]])){
1701805650295:#seeds <- c("81", '57', '53', "52")
1701805650306:#rule_groups <- 3
1701805650317:#rule <- 1
1701805650330:print(map_list[[rule_groups]][rule,])
1701805650341:# Extract the start, end of the range, and the delta
1701805650351:start_range <- map_list[[rule_groups]][rule, 'start']
1701805650362:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701805650370:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701805650385:# Apply transformation
1701805650393:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)],
1701805650401:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701805650410:# update current group level seeds with changes
1701805650418:# Add only the changed values to an updating list
1701805650427:# Keep values that changed at each level, join with unchanged values
1701805650437:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701805650445:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701805650454:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701805650464:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701805650472:}
1701805650481:seeds <- seeds_group
1701805650490:print(seeds)
1701805650498:}
1701805650533:min(seeds)
1701805656233:seeds
1701805672019:seeds_new
1701805692866:# Extract seeds
1701805692877:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701805692896:# Remove empty strings
1701805692907:data_clean <- data[data != ""]
1701805692923:# Extract map names and their corresponding indices
1701805692932:map_names <- data_clean[grepl("map:", data_clean)]
1701805692942:map_indices <- match(map_names, data_clean)
1701805692959:# Split data into different maps
1701805692970:map_list <- lapply(1:length(map_names), function(i) {
1701805692979:start_index <- map_indices[i] + 1
1701805692988:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701805692997:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701805693006:})
1701805693030:names(map_list) <- gsub(" map:", "", map_names)
1701805693046:# Set column names for each dataframe
1701805693055:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701805693065:seeds_group <- seeds
1701805693075:for(rule_groups in 1:length(map_list)){
1701805693087:for(rule in 1:nrow(map_list[[rule_groups]])){
1701805693098:#seeds <- c("81", '57', '53', "52")
1701805693111:#rule_groups <- 3
1701805693122:#rule <- 1
1701805693133:print(map_list[[rule_groups]][rule,])
1701805693145:# Extract the start, end of the range, and the delta
1701805693157:start_range <- map_list[[rule_groups]][rule, 'start']
1701805693168:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701805693179:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701805693200:# Apply transformation
1701805693232:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701805693250:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701805693266:# update current group level seeds with changes
1701805693277:# Add only the changed values to an updating list
1701805693289:# Keep values that changed at each level, join with unchanged values
1701805693302:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701805693315:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701805693327:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701805693338:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701805693350:}
1701805693362:seeds <- seeds_group
1701805693372:print(seeds)
1701805693383:}
1701805693421:min(seeds)
1701805699951:data <- readLines("data/input_5.txt")
1701805699980:# Extract seeds
1701805699990:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701805700007:# Remove empty strings
1701805700018:data_clean <- data[data != ""]
1701805700033:# Extract map names and their corresponding indices
1701805700043:map_names <- data_clean[grepl("map:", data_clean)]
1701805700051:map_indices <- match(map_names, data_clean)
1701805700066:# Split data into different maps
1701805700075:map_list <- lapply(1:length(map_names), function(i) {
1701805700084:start_index <- map_indices[i] + 1
1701805700093:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701805700103:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701805700111:})
1701805700139:names(map_list) <- gsub(" map:", "", map_names)
1701805700152:# Set column names for each dataframe
1701805700159:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701805700170:seeds_group <- seeds
1701805700179:for(rule_groups in 1:length(map_list)){
1701805700188:for(rule in 1:nrow(map_list[[rule_groups]])){
1701805700196:#seeds <- c("81", '57', '53', "52")
1701805700205:#rule_groups <- 3
1701805700212:#rule <- 1
1701805700220:print(map_list[[rule_groups]][rule,])
1701805700231:# Extract the start, end of the range, and the delta
1701805700241:start_range <- map_list[[rule_groups]][rule, 'start']
1701805700252:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701805700263:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701805700279:# Apply transformation
1701805700290:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701805700300:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701805700310:# update current group level seeds with changes
1701805700321:# Add only the changed values to an updating list
1701805700331:# Keep values that changed at each level, join with unchanged values
1701805700342:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701805700353:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701805700364:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701805700375:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701805700386:}
1701805700397:seeds <- seeds_group
1701805700407:print(seeds)
1701805700419:}
1701805700553:min(seeds)
1701806268681:max(seeds)
1701806521647:data <- c(
1701806521658:'seeds: 79 14 55 13',
1701806521670:'',
1701806521684:'seed-to-soil map:',
1701806521703:'50 98 2',
1701806521716:'52 50 48',
1701806521727:'',
1701806521737:'soil-to-fertilizer map:',
1701806521749:'0 15 37',
1701806521759:'37 52 2',
1701806521770:'39 0 15',
1701806521780:'',
1701806521790:'fertilizer-to-water map:',
1701806521799:'49 53 8',
1701806521807:'0 11 42',
1701806521814:'42 0 7',
1701806521823:'57 7 4',
1701806521832:'',
1701806521842:'water-to-light map:',
1701806521853:'88 18 7',
1701806521864:'18 25 70',
1701806521874:'',
1701806521884:'light-to-temperature map:',
1701806521895:'45 77 23',
1701806521907:'81 45 19',
1701806521917:'68 64 13',
1701806521927:'',
1701806521938:'temperature-to-humidity map:',
1701806521949:'0 69 1',
1701806521959:"1 0 69",
1701806521970:'',
1701806521978:'humidity-to-location map:',
1701806521989:"60 56 37",
1701806521999:"56 93 4" )
1701806523263:# Extract seeds
1701806523276:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701806536604:# Part 2
1701806536614:# Reverse the process?
1701806536626:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701806538451:seeds
1701806597291:c(0, 79, 79+14, 55, 55+13)
1701806650004:c(0, 79, 79+14.1, 55, 55+13.1)
1701806660220:c(0, 79, 79+14.1, 55, 55+13.1) %>%
1701806660228:sort()
1701806664295:c(0, 79, 79+14.1, 55, 55+13.1) |>
1701806664305:sort()
1701807075753:start_range
1701807119267:seeds.new <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701807184122:max(seeds)
1701807194406:ata <- readLines("data/input_5.txt")
1701807194429:# Extract seeds
1701807194439:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701807194457:# Remove empty strings
1701807194472:data_clean <- data[data != ""]
1701807194491:# Extract map names and their corresponding indices
1701807194502:map_names <- data_clean[grepl("map:", data_clean)]
1701807194513:map_indices <- match(map_names, data_clean)
1701807194530:# Split data into different maps
1701807194540:map_list <- lapply(1:length(map_names), function(i) {
1701807194551:start_index <- map_indices[i] + 1
1701807194562:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701807194573:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701807194585:})
1701807194607:names(map_list) <- gsub(" map:", "", map_names)
1701807194625:# Set column names for each dataframe
1701807194636:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701807194647:seeds_group <- seeds
1701807200972:max(map_list)
1701807452588:seeds.new <- c()
1701807453063:for(i in 1:length(seeds)/2){
1701807461775:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701807462341:seeds.new <- c()
1701807462792:for(i in 1:length(seeds)/2){
1701807462856:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701807462911:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701807462969:}
1701807496308:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701807496641:seeds.new <- c()
1701807497026:for(i in 1:(length(seeds)/2){
1701807503279:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701807503533:seeds.new <- c()
1701807503801:for(i in 1:(length(seeds)/2)){
1701807503812:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701807503824:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701807503834:}
1701807505866:View(seeds.new)
1701807676576:lapply(seeds.new, function(seed.list){
1701807676588:seeds.list <- seq(seed.list[[1]], seed.list[[2]], 1)
1701807676598:return(seeds.list)
1701807676609:}
1701807676618:for(rule_groups in 1:length(map_list)){
1701807686747:lapply(seeds.new, function(seed.list){
1701807694078:lapply(seeds.new, function(seed.list){
1701807694088:seeds.list <- seq(seed.list[[1]], seed.list[[2]], 1)
1701807694098:return(seeds.list)
1701807694108:}
1701807705130:lapply(seeds.new, function(seed.list){
1701807705143:seeds.list <- seq(seed.list[[1]], seed.list[[2]], 1)
1701807705154:return(seeds.list)
1701807705162:})
1701807746592:lapply(seeds.new, function(seed.list){
1701807746606:seeds <- seq(seed.list[[1]], seed.list[[2]], 1)
1701807746617:for(rule_groups in 1:length(map_list)){
1701807746627:for(rule in 1:nrow(map_list[[rule_groups]])){
1701807746638:#seeds <- c("81", '57', '53', "52")
1701807746649:#rule_groups <- 3
1701807746661:#rule <- 1
1701807746672:print(map_list[[rule_groups]][rule,])
1701807746683:# Extract the start, end of the range, and the delta
1701807746694:start_range <- map_list[[rule_groups]][rule, 'start']
1701807746704:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701807746715:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701807746733:# Apply transformation
1701807746743:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701807746754:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701807746766:# update current group level seeds with changes
1701807746777:# Add only the changed values to an updating list
1701807746789:# Keep values that changed at each level, join with unchanged values
1701807746801:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701807746812:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701807746823:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701807746834:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701807746846:}
1701807746857:seeds <- seeds_group
1701807746869:print(seeds)
1701807746880:}
1701807746891:return(seeds)
1701807746902:})
1701807802937:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701807805699:seeds.new <- c()
1701807806916:for(i in 1:(length(seeds)/2)){
1701807806928:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701807806940:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701807806951:}
1701807810946:lapply(seeds.new, function(seed.list){
1701807810958:seeds <- seq(seed.list[[1]], seed.list[[2]], 1)
1701807810973:for(rule_groups in 1:length(map_list)){
1701807810985:for(rule in 1:nrow(map_list[[rule_groups]])){
1701807810997:#seeds <- c("81", '57', '53', "52")
1701807811009:#rule_groups <- 3
1701807811020:#rule <- 1
1701807811027:print(map_list[[rule_groups]][rule,])
1701807811034:# Extract the start, end of the range, and the delta
1701807811043:start_range <- map_list[[rule_groups]][rule, 'start']
1701807811051:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701807811059:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701807811073:# Apply transformation
1701807811081:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701807811089:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701807811098:# update current group level seeds with changes
1701807811106:# Add only the changed values to an updating list
1701807811114:# Keep values that changed at each level, join with unchanged values
1701807811122:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701807811131:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701807811139:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701807811150:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701807811161:}
1701807811174:seeds <- seeds_group
1701807811184:print(seeds)
1701807811195:}
1701807811206:return(seeds)
1701807811215:})
1701807867283:lapply(seeds.new, function(seed.list){
1701807867298:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701807867311:for(rule_groups in 1:length(map_list)){
1701807867321:for(rule in 1:nrow(map_list[[rule_groups]])){
1701807867331:#seeds <- c("81", '57', '53', "52")
1701807867341:#rule_groups <- 3
1701807867352:#rule <- 1
1701807867363:print(map_list[[rule_groups]][rule,])
1701807867373:# Extract the start, end of the range, and the delta
1701807867384:start_range <- map_list[[rule_groups]][rule, 'start']
1701807867395:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701807867405:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701807867422:# Apply transformation
1701807867432:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701807867443:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701807867456:# update current group level seeds with changes
1701807867467:# Add only the changed values to an updating list
1701807867479:# Keep values that changed at each level, join with unchanged values
1701807867489:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701807867500:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701807867511:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701807867522:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701807867532:}
1701807867542:seeds <- seeds_group
1701807867553:print(seeds)
1701807867562:}
1701807867573:return(seeds)
1701807867584:})
1701807895054:lapply(seeds.new, function(seed.list){
1701807895069:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701807895081:for(rule_groups in 1:length(map_list)){
1701807895094:for(rule in 1:nrow(map_list[[rule_groups]])){
1701807895107:#seeds <- c("81", '57', '53', "52")
1701807895118:#rule_groups <- 3
1701807895128:#rule <- 1
1701807895139:print(map_list[[rule_groups]][rule,])
1701807895151:# Extract the start, end of the range, and the delta
1701807895162:start_range <- map_list[[rule_groups]][rule, 'start']
1701807895174:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701807895185:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701807895205:# Apply transformation
1701807895217:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701807895228:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701807895239:# update current group level seeds with changes
1701807895252:# Add only the changed values to an updating list
1701807895264:# Keep values that changed at each level, join with unchanged values
1701807895275:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701807895287:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701807895298:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701807895309:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701807895320:}
1701807895331:seeds <- seeds_group
1701807895344:print(seeds)
1701807895356:}
1701807895367:return(min(seeds))
1701807895378:})
1701807935937:test <- lapply(seeds.new, function(seed.list){
1701807935950:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701807935960:for(rule_groups in 1:length(map_list)){
1701807935971:for(rule in 1:nrow(map_list[[rule_groups]])){
1701807935982:#seeds <- c("81", '57', '53', "52")
1701807935993:#rule_groups <- 3
1701807936005:#rule <- 1
1701807936018:print(map_list[[rule_groups]][rule,])
1701807936029:# Extract the start, end of the range, and the delta
1701807936041:start_range <- map_list[[rule_groups]][rule, 'start']
1701807936053:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701807936065:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701807936089:# Apply transformation
1701807936108:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701807936119:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701807936129:# update current group level seeds with changes
1701807936140:# Add only the changed values to an updating list
1701807936152:# Keep values that changed at each level, join with unchanged values
1701807936161:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701807936171:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701807936185:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701807936196:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701807936208:}
1701807936220:seeds <- seeds_group
1701807936231:print(seeds)
1701807936241:}
1701807936253:return(min(seeds))
1701807936263:})
1701807938007:test |> unlist()
1701807953462:data <- readLines("data/input_5.txt")
1701807955466:data
1701807996037:# Extract seeds
1701807996047:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701807996066:# Remove empty strings
1701807996077:data_clean <- data[data != ""]
1701807996095:# Extract map names and their corresponding indices
1701807996107:map_names <- data_clean[grepl("map:", data_clean)]
1701807996120:map_indices <- match(map_names, data_clean)
1701807996138:# Split data into different maps
1701807996149:map_list <- lapply(1:length(map_names), function(i) {
1701807996160:start_index <- map_indices[i] + 1
1701807996171:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701807996183:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701807996197:})
1701807996222:names(map_list) <- gsub(" map:", "", map_names)
1701807996240:# Set column names for each dataframe
1701807996251:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701808003522:seeds.new <- c()
1701808003992:for(i in 1:(length(seeds)/2)){
1701808004005:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701808004017:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701808004028:}
1701808032996:View(seeds.new)
1701808053966:test <- lapply(seeds.new, function(seed.list){
1701808053978:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701808053992:for(rule_groups in 1:length(map_list)){
1701808054004:for(rule in 1:nrow(map_list[[rule_groups]])){
1701808054015:#seeds <- c("81", '57', '53', "52")
1701808054026:#rule_groups <- 3
1701808054036:#rule <- 1
1701808054047:print(map_list[[rule_groups]][rule,])
1701808054058:# Extract the start, end of the range, and the delta
1701808054071:start_range <- map_list[[rule_groups]][rule, 'start']
1701808054082:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701808054093:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701808054111:# Apply transformation
1701808054121:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701808054132:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701808054142:# update current group level seeds with changes
1701808054151:# Add only the changed values to an updating list
1701808054162:# Keep values that changed at each level, join with unchanged values
1701808054172:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701808054182:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701808054193:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701808054204:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701808054214:}
1701808054224:seeds <- seeds_group
1701808054235:print(seeds)
1701808054246:}
1701808054257:return(min(seeds))
1701808054268:})
1701808299059:data <- c(
1701808299072:'seeds: 79 14 55 13',
1701808299084:'',
1701808299095:'seed-to-soil map:',
1701808299107:'50 98 2',
1701808299117:'52 50 48',
1701808299127:'',
1701808299137:'soil-to-fertilizer map:',
1701808299148:'0 15 37',
1701808299160:'37 52 2',
1701808299172:'39 0 15',
1701808299184:'',
1701808299195:'fertilizer-to-water map:',
1701808299207:'49 53 8',
1701808299218:'0 11 42',
1701808299229:'42 0 7',
1701808299241:'57 7 4',
1701808299251:'',
1701808299263:'water-to-light map:',
1701808299273:'88 18 7',
1701808299284:'18 25 70',
1701808299296:'',
1701808299307:'light-to-temperature map:',
1701808299317:'45 77 23',
1701808299327:'81 45 19',
1701808299338:'68 64 13',
1701808299348:'',
1701808299359:'temperature-to-humidity map:',
1701808299370:'0 69 1',
1701808299381:"1 0 69",
1701808299392:'',
1701808299402:'humidity-to-location map:',
1701808299413:"60 56 37",
1701808299424:"56 93 4" )
1701808303721:# Extract seeds
1701808303735:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701808303752:# Remove empty strings
1701808303762:data_clean <- data[data != ""]
1701808303778:# Extract map names and their corresponding indices
1701808303789:map_names <- data_clean[grepl("map:", data_clean)]
1701808303800:map_indices <- match(map_names, data_clean)
1701808303840:# Split data into different maps
1701808303856:map_list <- lapply(1:length(map_names), function(i) {
1701808303867:start_index <- map_indices[i] + 1
1701808303877:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701808303890:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701808303900:})
1701808303929:names(map_list) <- gsub(" map:", "", map_names)
1701808303948:# Set column names for each dataframe
1701808303959:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701808309903:seeds.new <- c()
1701808309914:for(i in 1:(length(seeds)/2)){
1701808309926:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701808309935:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701808309946:}
1701808318948:test <- lapply(seeds.new, function(seed.list) {
1701808318959:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701808318972:seeds_group <- lapply(map_list, function(map) {
1701808318983:lapply(1:nrow(map), function(rule) {
1701808318993:start_range <- map[rule, 'start']
1701808319004:end_range <- start_range + map[rule, 'range'] - 1
1701808319016:delta <- map[rule, 'dest'] - start_range
1701808319034:# Apply transformation
1701808319046:seeds_new <- ifelse(seeds >= start_range & seeds <= end_range, seeds + delta, seeds)
1701808319064:# Keep values that changed at each level, join with unchanged values
1701808319077:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)]
1701808319089:seeds_new_keep <- seeds_new[!(seeds_new %in% seeds)]
1701808319100:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701808319119:c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701808319130:}) |> Reduce(function(x, y) y, .)
1701808319142:}) |> Reduce(function(x, y) y, .)
1701808319162:return(min(unlist(seeds_group)))
1701808319173:})
1701808329296:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701808329724:seeds.new <- lapply(seq(1, length(seeds), by = 2), function(i) {
1701808329736:c(seeds[i], seeds[i] + seeds[i + 1] - 1)
1701808329752:})
1701808330268:test <- lapply(seeds.new, function(seed.list) {
1701808330281:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701808330296:seeds_group <- lapply(map_list, function(map) {
1701808330344:lapply(1:nrow(map), function(rule) {
1701808330359:start_range <- map[rule, 'start']
1701808330374:end_range <- start_range + map[rule, 'range'] - 1
1701808330385:delta <- map[rule, 'dest'] - start_range
1701808330403:# Apply transformation
1701808330411:seeds_new <- ifelse(seeds >= start_range & seeds <= end_range, seeds + delta, seeds)
1701808330424:# Keep values that changed at each level, join with unchanged values
1701808330432:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)]
1701808330441:seeds_new_keep <- seeds_new[!(seeds_new %in% seeds)]
1701808330449:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701808330467:c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701808330480:}) |> Reduce(function(x, y) y, .)
1701808330492:}) |> Reduce(function(x, y) y, .)
1701808330508:return(min(unlist(seeds_group)))
1701808330520:})
1701808409310:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701808409823:seeds.new <- lapply(seq(1, length(seeds), by = 2), function(i) {
1701808409836:c(seeds[i], seeds[i] + seeds[i + 1] - 1)
1701808409844:})
1701808410498:test <- lapply(seeds.new, function(seed.list) {
1701808410510:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701808410530:for (map_idx in 1:length(map_list)) {
1701808410541:map <- map_list[[map_idx]]
1701808410551:for (rule_idx in 1:nrow(map)) {
1701808410563:start_range <- map[rule_idx, 'start']
1701808410576:end_range <- start_range + map[rule_idx, 'range'] - 1
1701808410587:delta <- map[rule_idx, 'dest'] - start_range
1701808410606:# Apply transformation
1701808410616:seeds_new <- ifelse(seeds >= start_range & seeds <= end_range, seeds + delta, seeds)
1701808410634:# Keep values that changed at each level, join with unchanged values
1701808410644:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)]
1701808410655:seeds_new_keep <- seeds_new[!(seeds_new %in% seeds)]
1701808410665:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701808410685:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701808410695:}
1701808410706:}
1701808410723:return(min(seeds_group))
1701808410734:})
1701808414307:unlist(test)
1701808439105:test <- lapply(seeds.new, function(seed.list){
1701808439119:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701808439131:for(rule_groups in 1:length(map_list)){
1701808439142:for(rule in 1:nrow(map_list[[rule_groups]])){
1701808439154:print(map_list[[rule_groups]][rule,])
1701808439163:# Extract the start, end of the range, and the delta
1701808439172:start_range <- map_list[[rule_groups]][rule, 'start']
1701808439181:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701808439190:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701808439204:# Apply transformation
1701808439213:seeds_new <- c(seeds[which(seeds <= end_range & seeds >= start_range)] + delta,
1701808439223:seeds[which(seeds > end_range | seeds < start_range)]) |> as.numeric()
1701808439232:# update current group level seeds with changes
1701808439241:# Add only the changed values to an updating list
1701808439251:# Keep values that changed at each level, join with unchanged values
1701808439261:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)] # seeds that the rule hasn't changed
1701808439271:seeds_new_keep <-   seeds_new[!(seeds_new %in% seeds)] # seeds that have changed, relative to
1701808439283:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701808439294:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701808439305:}
1701808439312:seeds <- seeds_group
1701808439321:print(seeds)
1701808439331:}
1701808439338:return(min(seeds))
1701808439347:})
1701808443087:test |> unlist()
1701808490109:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701808490471:seeds.new <- lapply(seq(1, length(seeds), by = 2), function(i) {
1701808490483:c(seeds[i], seeds[i] + seeds[i + 1] - 1)
1701808490496:})
1701808491056:test <- lapply(seeds.new, function(seed.list) {
1701808491070:seeds <- seeds_group <- seq(seed.list[[1]], seed.list[[2]], 1)
1701808491088:for (map_idx in 1:length(map_list)) {
1701808491098:map <- map_list[[map_idx]]
1701808491110:for (rule_idx in 1:nrow(map)) {
1701808491121:start_range <- map[rule_idx, 'start']
1701808491131:end_range <- start_range + map[rule_idx, 'range'] - 1
1701808491143:delta <- map[rule_idx, 'dest'] - start_range
1701808491162:# Apply transformation
1701808491173:seeds_new <- ifelse(seeds >= start_range & seeds <= end_range, seeds + delta, seeds)
1701808491190:# Keep values that changed at each level, join with unchanged values
1701808491201:seeds_group_keep <- seeds_group[!(seeds_group %in% seeds)]
1701808491212:seeds_new_keep <- seeds_new[!(seeds_new %in% seeds)]
1701808491222:seeds_group_old <- seeds_group[seeds_group %in% seeds_new]
1701808491241:seeds_group <- c(seeds_group_keep, seeds_new_keep, seeds_group_old)
1701808491252:}
1701808491262:}
1701808491279:return(min(seeds_group))
1701808491287:})
1701808491976:unlist(test)
1701808673060:data
1701808679983:map_list
1701808789448:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701808827047:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701808830734:rev(1:length(map_list))
1701809013500:for(i in 1:100){
1701809013512:for(rule_groups in rev(1:length(map_list))){
1701809013525:for(rule in 1:nrow(map_list[[rule_groups]])){
1701809013577:#seeds <- c("81", '57', '53', "52")
1701809013589:#rule_groups <- 3
1701809013603:#rule <- 1
1701809013617:print(map_list[[rule_groups]][rule,])
1701809013634:# Extract the start, end of the range, and the delta
1701809013646:start_range <- map_list[[rule_groups]][rule, 'start']
1701809013656:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701809013667:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701809013682:if(i %in% end_range){
1701809013692:i <- i - delta
1701809013703:} print(i)
1701809038681:for(i in 1:100){
1701809038693:for(rule_groups in rev(1:length(map_list))){
1701809038704:for(rule in 1:nrow(map_list[[rule_groups]])){
1701809038715:#seeds <- c("81", '57', '53', "52")
1701809038726:#rule_groups <- 3
1701809038739:#rule <- 1
1701809038750:print(map_list[[rule_groups]][rule,])
1701809038760:# Extract the start, end of the range, and the delta
1701809038771:start_range <- map_list[[rule_groups]][rule, 'start']
1701809038782:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701809038795:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701809038807:print(i)
1701809038817:if(i %in% end_range){
1701809038828:i <- (i - delta)
1701809038840:}
1701809038850:if(i %in% seeds){
1701809038860:print(i)
1701809038871:return(i)
1701809038882:}
1701809038893:}
1701809038904:}
1701809038914:}
1701809096258:seeds.new <- c()
1701809096269:for(i in 1:(length(seeds)/2)){
1701809096278:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701809096289:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701809096302:}
1701809096319:seeds.new <- unlist(seeds.new)
1701809179256:seeds.new <- c()
1701809179714:for(i in 1:(length(seeds)/2)){
1701809179727:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701809179740:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701809179751:seeds.new[[i]] <- seq(seeds.new[[i]][[1]], seeds.new[[i]][[2]], 1)
1701809179762:}
1701809180834:seeds.new <- unlist(seeds.new)
1701809199672:seeds_group <- seeds.new
1701809200228:for(i in 1:100){
1701809200240:for(rule_groups in rev(1:length(map_list))){
1701809200254:for(rule in 1:nrow(map_list[[rule_groups]])){
1701809200266:#seeds <- c("81", '57', '53', "52")
1701809200275:#rule_groups <- 3
1701809200286:#rule <- 1
1701809200295:print(map_list[[rule_groups]][rule,])
1701809200307:# Extract the start, end of the range, and the delta
1701809200319:start_range <- map_list[[rule_groups]][rule, 'start']
1701809200330:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701809200342:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701809200354:print(i)
1701809200366:if(i %in% end_range){
1701809200378:i <- (i - delta)
1701809200391:}
1701809200403:if(i %in% seeds){
1701809200414:print(i)
1701809200427:return(i)
1701809200440:}
1701809200451:}
1701809200465:}
1701809200477:}
1701809209994:data <- readLines("data/input_5.txt")
1701809218049:# Remove empty strings
1701809218060:data_clean <- data[data != ""]
1701809218077:# Extract map names and their corresponding indices
1701809218088:map_names <- data_clean[grepl("map:", data_clean)]
1701809218099:map_indices <- match(map_names, data_clean)
1701809218118:# Split data into different maps
1701809218128:map_list <- lapply(1:length(map_names), function(i) {
1701809218140:start_index <- map_indices[i] + 1
1701809218151:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701809218161:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701809218172:})
1701809218198:names(map_list) <- gsub(" map:", "", map_names)
1701809247030:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701809247301:seeds.new <- c()
1701809247615:for(i in 1:(length(seeds)/2)){
1701809247626:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701809247635:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701809247642:seeds.new[[i]] <- seq(seeds.new[[i]][[1]], seeds.new[[i]][[2]], 1)
1701809247652:}
1701809280683:gc()
1701809292641:for(i in 1:100){
1701809292653:for(rule_groups in rev(1:length(map_list))){
1701809292669:for(rule in 1:nrow(map_list[[rule_groups]])){
1701809292679:#seeds <- c("81", '57', '53', "52")
1701809292690:#rule_groups <- 3
1701809292702:#rule <- 1
1701809292714:print(map_list[[rule_groups]][rule,])
1701809292725:# Extract the start, end of the range, and the delta
1701809292736:start_range <- map_list[[rule_groups]][rule, 'start']
1701809292746:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701809292757:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701809292767:print(i)
1701809292778:if(i %in% end_range){
1701809292789:i <- (i - delta)
1701809292800:}
1701809292810:if(i %in% seeds){
1701809292822:print(i)
1701809292833:return(i)
1701809292843:}
1701809292853:}
1701809292864:}
1701809292874:}
1701809343374:answer <- for(i in 1:10^5){
1701809343384:for(rule_groups in rev(1:length(map_list))){
1701809343395:for(rule in 1:nrow(map_list[[rule_groups]])){
1701809343404:#seeds <- c("81", '57', '53', "52")
1701809343412:#rule_groups <- 3
1701809343421:#rule <- 1
1701809343431:# Extract the start, end of the range, and the delta
1701809343440:start_range <- map_list[[rule_groups]][rule, 'start']
1701809343450:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701809343462:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701809343474:if(i %in% end_range){
1701809343486:i <- (i - delta)
1701809343498:}
1701809343509:if(i %in% seeds){
1701809343519:print(i)
1701809343530:return(i)
1701809343541:}
1701809343552:}
1701809343562:}
1701809343573:}
1701809453378:answer <- for(i in 1:10^5){
1701809453388:for(rule_groups in rev(1:length(map_list))){
1701809453401:for(rule in 1:nrow(map_list[[rule_groups]])){
1701809453412:start_range <- map_list[[rule_groups]][rule, 'start']
1701809453422:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701809453434:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701809453444:if(i %in% end_range){
1701809453453:i <- (i - delta)
1701809453465:}
1701809453482:}
1701809453493:}
1701809453503:if(i %in% seeds){
1701809453512:print(i)
1701809453526:return(i)
1701809453537:}else(
1701809453548:print(paste("It's not ", i))
1701809453560:)
1701809453574:}
1701809492641:data <- c(
1701809492654:'seeds: 79 14 55 13',
1701809492668:'',
1701809492680:'seed-to-soil map:',
1701809492691:'50 98 2',
1701809492700:'52 50 48',
1701809492708:'',
1701809492715:'soil-to-fertilizer map:',
1701809492723:'0 15 37',
1701809492731:'37 52 2',
1701809492739:'39 0 15',
1701809492748:'',
1701809492757:'fertilizer-to-water map:',
1701809492766:'49 53 8',
1701809492778:'0 11 42',
1701809492790:'42 0 7',
1701809492798:'57 7 4',
1701809492806:'',
1701809492814:'water-to-light map:',
1701809492826:'88 18 7',
1701809492833:'18 25 70',
1701809492842:'',
1701809492850:'light-to-temperature map:',
1701809492859:'45 77 23',
1701809492868:'81 45 19',
1701809492876:'68 64 13',
1701809492888:'',
1701809492899:'temperature-to-humidity map:',
1701809492910:'0 69 1',
1701809492920:"1 0 69",
1701809492932:'',
1701809492944:'humidity-to-location map:',
1701809492954:"60 56 37",
1701809492965:"56 93 4" )
1701809500411:# Remove empty strings
1701809500422:data_clean <- data[data != ""]
1701809500441:# Extract map names and their corresponding indices
1701809500452:map_names <- data_clean[grepl("map:", data_clean)]
1701809500467:map_indices <- match(map_names, data_clean)
1701809500487:# Split data into different maps
1701809500501:map_list <- lapply(1:length(map_names), function(i) {
1701809500512:start_index <- map_indices[i] + 1
1701809500519:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701809500528:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701809500536:})
1701809500553:names(map_list) <- gsub(" map:", "", map_names)
1701809500567:# Set column names for each dataframe
1701809500578:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701809506728:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701809506739:seeds.new <- c()
1701809506749:for(i in 1:(length(seeds)/2)){
1701809506759:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701809506769:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701809506779:seeds.new[[i]] <- seq(seeds.new[[i]][[1]], seeds.new[[i]][[2]], 1)
1701809506789:}
1701809506805:seeds.new <- unlist(seeds.new)
1701809506816:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701809506828:seeds_group <- seeds.new
1701809506839:answer <- for(i in 1:10^5){
1701809506852:for(rule_groups in rev(1:length(map_list))){
1701809506863:for(rule in 1:nrow(map_list[[rule_groups]])){
1701809506875:start_range <- map_list[[rule_groups]][rule, 'start']
1701809506886:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701809506896:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701809506907:if(i %in% end_range){
1701809506919:i <- (i - delta)
1701809506929:}
1701809506947:}
1701809506957:}
1701809506970:if(i %in% seeds){
1701809506982:print(i)
1701809506993:return(i)
1701809507004:}else(
1701809507016:print(paste("It's not ", i))
1701809507027:)
1701809507037:}
1701809518431:data <- readLines("data/input_5.txt")
1701809523621:# Extract seeds
1701809523631:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701809523647:# Remove empty strings
1701809523658:data_clean <- data[data != ""]
1701809523676:# Extract map names and their corresponding indices
1701809523687:map_names <- data_clean[grepl("map:", data_clean)]
1701809523698:map_indices <- match(map_names, data_clean)
1701809523717:# Split data into different maps
1701809523727:map_list <- lapply(1:length(map_names), function(i) {
1701809523738:start_index <- map_indices[i] + 1
1701809523751:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701809523763:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701809523774:})
1701809523804:names(map_list) <- gsub(" map:", "", map_names)
1701809523821:# Set column names for each dataframe
1701809523832:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701809538899:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701809538908:seeds.new <- c()
1701809538919:for(i in 1:(length(seeds)/2)){
1701809538929:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701809538942:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701809538952:seeds.new[[i]] <- seq(seeds.new[[i]][[1]], seeds.new[[i]][[2]], 1)
1701809538963:}
1701809555156:seeds.new <- unlist(seeds.new)
1701809628513:data <- readLines("data/input_5.txt")
1701809634482:# Remove empty strings
1701809634491:data_clean <- data[data != ""]
1701809634508:# Extract map names and their corresponding indices
1701809634517:map_names <- data_clean[grepl("map:", data_clean)]
1701809634525:map_indices <- match(map_names, data_clean)
1701809634539:# Split data into different maps
1701809634550:map_list <- lapply(1:length(map_names), function(i) {
1701809634561:start_index <- map_indices[i] + 1
1701809634571:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701809634584:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701809634596:})
1701809634624:names(map_list) <- gsub(" map:", "", map_names)
1701809634642:# Set column names for each dataframe
1701809634653:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701809646045:#### Reverse the order of the process.
1701809646057:# Start from 0, look for match at end
1701809646068:# Set column names for each dataframe
1701809646085:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701809646096:seeds.new <- c()
1701809646108:for(i in 1:(length(seeds)/2)){
1701809646120:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701809646134:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701809646145:seeds.new[[i]] <- seq(seeds.new[[i]][[1]], seeds.new[[i]][[2]], 1)
1701809646156:}
1701809659994:seeds.new <- unlist(seeds.new)
1701809709348:data <- readLines("data/input_5.txt")
1701809716793:# Remove empty strings
1701809716804:data_clean <- data[data != ""]
1701809716819:# Extract map names and their corresponding indices
1701809716829:map_names <- data_clean[grepl("map:", data_clean)]
1701809716840:map_indices <- match(map_names, data_clean)
1701809716855:# Split data into different maps
1701809716866:map_list <- lapply(1:length(map_names), function(i) {
1701809716879:start_index <- map_indices[i] + 1
1701809716891:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701809716901:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701809716912:})
1701809716943:names(map_list) <- gsub(" map:", "", map_names)
1701809716960:# Set column names for each dataframe
1701809716970:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701809803550:seeds.new <- lapply(1:(length(seeds)/2), function(i)){
1701809813448:seeds.new <- lapply(1:(length(seeds)/2), function(i){
1701809813462:seq(seeds[(i*2)-1],(seeds[(i*2)-1] + seeds[(i*2)] - 1), 1)
1701809813473:})
1701809815792:# Part 2
1701809815805:# Reverse the process?
1701809815816:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701809821367:seeds.new <- lapply(1:(length(seeds)/2), function(i){
1701809821380:seq(seeds[(i*2)-1],(seeds[(i*2)-1] + seeds[(i*2)] - 1), 1)
1701809821391:})
1701809838330:gc()
1701809867627:seeds.new <- unlist(seeds.new)
1701810020535:data <- readLines("data/input_5.txt")
1701810024772:# Remove empty strings
1701810024783:data_clean <- data[data != ""]
1701810024801:# Extract map names and their corresponding indices
1701810024811:map_names <- data_clean[grepl("map:", data_clean)]
1701810024822:map_indices <- match(map_names, data_clean)
1701810024842:# Split data into different maps
1701810024852:map_list <- lapply(1:length(map_names), function(i) {
1701810024864:start_index <- map_indices[i] + 1
1701810024875:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701810024886:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701810024897:})
1701810024926:names(map_list) <- gsub(" map:", "", map_names)
1701810024945:# Set column names for each dataframe
1701810024956:map_list <- lapply(map_list, setNames, c("dest", "start", "range"))
1701810029138:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701813202469:data <- c(
1701813202485:'seeds: 79 14 55 13',
1701813202498:'',
1701813202512:'seed-to-soil map:',
1701813202523:'50 98 2',
1701813202533:'52 50 48',
1701813202544:'',
1701813202555:'soil-to-fertilizer map:',
1701813202566:'0 15 37',
1701813202579:'37 52 2',
1701813202590:'39 0 15',
1701813202601:'',
1701813202616:'fertilizer-to-water map:',
1701813202627:'49 53 8',
1701813202639:'0 11 42',
1701813202651:'42 0 7',
1701813202659:'57 7 4',
1701813202668:'',
1701813202675:'water-to-light map:',
1701813202684:'88 18 7',
1701813202691:'18 25 70',
1701813202702:'',
1701813202711:'light-to-temperature map:',
1701813202722:'45 77 23',
1701813202733:'81 45 19',
1701813202743:'68 64 13',
1701813202752:'',
1701813202762:'temperature-to-humidity map:',
1701813202772:'0 69 1',
1701813202783:"1 0 69",
1701813202793:'',
1701813202805:'humidity-to-location map:',
1701813202816:"60 56 37",
1701813202826:"56 93 4" )
1701813211625:# Extract seeds
1701813211640:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701813213539:# Remove empty strings
1701813213555:data_clean <- data[data != ""]
1701813213954:# Extract map names and their corresponding indices
1701813213969:map_names <- data_clean[grepl("map:", data_clean)]
1701813214143:map_indices <- match(map_names, data_clean)
1701813214364:# Split data into different maps
1701813214383:map_list <- lapply(1:length(map_names), function(i) {
1701813214398:start_index <- map_indices[i] + 1
1701813214409:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701813214418:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701813214428:})
1701813214884:names(map_list) <- gsub(" map:", "", map_names)
1701813258841:for(i in 1:(length(seeds)/2)){
1701813258858:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701813258870:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701813258880:}
1701813265938:seeds.new
1701813267358:seeds.new <- c()
1701813267603:for(i in 1:(length(seeds)/2)){
1701813267615:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701813267626:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701813267637:}
1701813269513:seeds.new
1701813411342:answer <- for(i in 1:10^6){
1701813411358:for(rule_groups in rev(1:length(map_list))){
1701813411368:for(rule in 1:nrow(map_list[[rule_groups]])){
1701813411379:start_range <- map_list[[rule_groups]][rule, 'start']
1701813411390:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701813411403:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701813411418:if(i %in% end_range){
1701813411427:i <- (i - delta)
1701813411438:}
1701813411447:}
1701813411457:}
1701813411467:if(i >= seeds[[1]][[1]] & i <= seeds[[1]][[2]]){
1701813411476:print(i)
1701813411486:return(i)
1701813411497:}else(
1701813411507:print(paste("It's not ", i))
1701813411517:)
1701813411528:}
1701813420403:answer <- for(i in 1:100){
1701813420418:for(rule_groups in rev(1:length(map_list))){
1701813420430:for(rule in 1:nrow(map_list[[rule_groups]])){
1701813420442:start_range <- map_list[[rule_groups]][rule, 'start']
1701813420453:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701813420465:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701813420477:if(i %in% end_range){
1701813420487:i <- (i - delta)
1701813420496:}
1701813420508:}
1701813420518:}
1701813420530:if(i >= seeds[[1]][[1]] & i <= seeds[[1]][[2]]){
1701813420541:print(i)
1701813420553:return(i)
1701813420565:}else(
1701813420576:print(paste("It's not ", i))
1701813420586:)
1701813420596:}
1701813430541:if(i >= seeds[[1]][1] & i <= seeds[[1]][2]){
1701813430554:print(i)
1701813430568:return(i)
1701813430581:}else(
1701813430593:print(paste("It's not ", i))
1701813430604:)
1701813434305:answer <- for(i in 1:100){
1701813434317:for(rule_groups in rev(1:length(map_list))){
1701813434328:for(rule in 1:nrow(map_list[[rule_groups]])){
1701813434339:start_range <- map_list[[rule_groups]][rule, 'start']
1701813434349:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701813434357:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701813434367:if(i %in% end_range){
1701813434376:i <- (i - delta)
1701813434386:}
1701813434394:}
1701813434403:}
1701813434411:if(i >= seeds[[1]][1] & i <= seeds[[1]][2]){
1701813434420:print(i)
1701813434428:return(i)
1701813434439:}else(
1701813434449:print(paste("It's not ", i))
1701813434461:)
1701813434472:}
1701813501427:answer <- for(i in 1:100){
1701813531321:answer <- for(i in 1:100){
1701813531337:for(rule_groups in rev(1:length(map_list))){
1701813531349:for(rule in 1:nrow(map_list[[rule_groups]])){
1701813531361:start_range <- map_list[[rule_groups]][rule, 'start']
1701813531375:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701813531385:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701813531396:if(i %in% end_range){
1701813531408:i <- (i - delta)
1701813531419:}
1701813531430:}
1701813531441:}
1701813531453:for(j in 1:length(seeds.new)){
1701813531464:if(i >= seeds[[j]][1] & i <= seeds[[j]][2]){
1701813531476:print(i)
1701813531486:return(i)
1701813531498:}else(
1701813531511:print(paste("It's not ", i))
1701813531522:)}
1701813531533:}
1701813555475:seeds[[]][1]
1701813564678:seeds[[1:2]][1]
1701813748423:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701813748738:seeds.new <- c()
1701813749086:for(i in 1:(length(seeds)/2)){
1701813749097:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701813749112:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701813749125:}
1701813750581:answer <- for(i in 1:100){
1701813750598:for(rule_groups in rev(1:length(map_list))){
1701813750613:for(rule in 1:nrow(map_list[[rule_groups]])){
1701813750625:start_range <- map_list[[rule_groups]][rule, 'start']
1701813750638:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701813750649:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701813750661:if(i %in% end_range){
1701813750671:i <- (i - delta)
1701813750681:}
1701813750692:}
1701813750704:}
1701813750713:for(j in 1:length(seeds.new)){
1701813750722:if(i >= seeds[[j]][1] & i <= seeds[[j]][2]){
1701813750732:print(i)
1701813750746:return(i)
1701813750756:}else(
1701813750767:print(paste("It's not ", i))
1701813750777:)}
1701813750785:}
1701813787105:seeds.new
1701813920206:any(sapply(ranges, function(range) value >= range[1] && value <= range[2]))
1701813939336:any(sapply(seeds.new, function(range) value >= range[1] && value <= range[2]))
1701813958149:i <- 10
1701813958466:any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))
1701813963571:i <- 80
1701813965226:any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))
1701814015422:}
1701814018493:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814018506:print(i)
1701814018517:return(i)
1701814018527:}else(
1701814018538:print(paste("It's not ", i))
1701814018549:)
1701814021524:seeds.new <- c()
1701814021699:for(i in 1:(length(seeds)/2)){
1701814021712:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701814021720:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701814021730:}
1701814021888:answer <- for(i in 1:100){
1701814021904:for(rule_groups in rev(1:length(map_list))){
1701814021914:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814021926:start_range <- map_list[[rule_groups]][rule, 'start']
1701814021936:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814021946:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814021960:if(i %in% end_range){
1701814021969:i <- (i - delta)
1701814021979:}
1701814021992:}
1701814022002:}
1701814022012:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814022021:print(i)
1701814022030:return(i)
1701814022039:}else(
1701814022048:print(paste("It's not ", i))
1701814022058:)
1701814022069:}
1701814139434:rule_groups
1701814142594:View(map_list)
1701814214085:for(rule_groups in rev(1:length(map_list))){
1701814214092:print(i)
1701814214105:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814214117:start_range <- map_list[[rule_groups]][rule, 'start']
1701814214126:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814214135:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814214146:if(i %in% end_range){
1701814214159:i <- (i - delta)
1701814214171:}
1701814214183:}
1701814214192:}
1701814225047:answer <- for(i in 1:100){
1701814225431:print(i)
1701814258439:for(rule_groups in rev(1:length(map_list))){
1701814258454:print(i)
1701814258467:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814258478:start_range <- map_list[[rule_groups]][rule, 'start']
1701814258492:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814258504:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814258516:if(i %in% end_range){
1701814258528:i <- (i - delta)
1701814258540:}
1701814258552:}
1701814258563:}
1701814263751:answer <- for(i in 1:100){
1701814263766:for(rule_groups in rev(1:length(map_list))){
1701814263778:print(i)
1701814263791:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814263802:start_range <- map_list[[rule_groups]][rule, 'start']
1701814263813:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814263824:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814263838:if(i %in% end_range){
1701814263849:i <- (i - delta)
1701814263860:}
1701814263872:}
1701814263885:}
1701814263896:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814263908:print(i)
1701814263920:return(i)
1701814263932:}else(
1701814263945:print(paste("It's not ", i))
1701814263961:)
1701814263974:}
1701814336203:answer <- for(i in 1:100){
1701814336216:print(i)
1701814336230:for(rule_groups in rev(1:length(map_list))){
1701814336241:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814336251:start_range <- map_list[[rule_groups]][rule, 'start']
1701814336263:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814336274:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814336287:if(i %in% end_range){
1701814336298:print(paste(i, "becomes", i+delta))
1701814336309:i <- (i - delta)
1701814336321:}
1701814336332:}
1701814336345:}
1701814336357:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814336368:print(i)
1701814336379:return(i)
1701814336391:}else(
1701814336402:print(paste("It's not ", i))
1701814336413:)
1701814336424:}
1701814475148:# Set column names for each dataframe
1701814475164:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701814476070:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701814476677:seeds.new <- c()
1701814478070:for(i in 1:(length(seeds)/2)){
1701814478085:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701814478100:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701814478114:}
1701814478834:# Make the if statment look for a greater/less than combo
1701814478847:answer <- for(i in 1:100){
1701814478864:print(i)
1701814478876:for(rule_groups in rev(1:length(map_list))){
1701814478888:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814478899:start_range <- map_list[[rule_groups]][rule, 'start']
1701814478911:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814478923:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814478935:if(i %in% end_range){
1701814478946:print(paste(i, "becomes", i+delta))
1701814478958:i <- (i - delta)
1701814478970:}
1701814478982:}
1701814478994:}
1701814479005:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814479015:print(i)
1701814479028:return(i)
1701814479039:}else(
1701814479053:print(paste("It's not ", i))
1701814479065:)
1701814479077:}
1701814548001:# Make the if statment look for a greater/less than combo
1701814548013:answer <- for(i in 1:100){
1701814548026:print(i)
1701814548036:for(rule_groups in rev(1:length(map_list))){
1701814548045:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814548055:start_range <- map_list[[rule_groups]][rule, 'start']
1701814548065:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814548079:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814548087:if(i %in% end_range){
1701814548096:print(paste(i, "becomes", i+delta))
1701814548106:i <- (i - delta)
1701814548115:}
1701814548124:}
1701814548134:}
1701814548143:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814548153:print(i)
1701814548163:return(i)
1701814548176:}else(
1701814548187:print(paste("It's not ", i))
1701814548199:)
1701814548208:}
1701814679001:# Make the if statment look for a greater/less than combo
1701814679014:answer <- for(i in 1:100){
1701814679024:print(i)
1701814679034:for(rule_groups in rev(1:length(map_list))){
1701814679044:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814679054:start_range <- map_list[[rule_groups]][rule, 'start']
1701814679064:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814679072:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814679079:if(i %in% end_range){
1701814679087:i <- (i - delta)
1701814679095:}
1701814679102:}
1701814679109:}
1701814679116:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814679125:print(i)
1701814679133:return(i)
1701814679141:}else(
1701814679150:print(paste("It's not ", i))
1701814679159:)
1701814679170:}
1701814740618:# Make the if statment look for a greater/less than combo
1701814740639:answer <- for(i in 1:100){
1701814740657:for(rule_groups in rev(1:length(map_list))){
1701814740669:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814740692:# Get
1701814740701:start_range <- map_list[[rule_groups]][rule, 'start']
1701814740711:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814740719:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814740734:if(i %in% start_range){
1701814740744:i <- (i - delta)
1701814740752:}
1701814740761:}
1701814740772:}
1701814740783:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814740794:print(i)
1701814740805:}else(print(paste("It's not ", i)))
1701814740818:}
1701814846279:# Make the if statment look for a greater/less than combo
1701814846291:answer <- for(i in 1:100){
1701814846309:location <- i
1701814846320:for(rule_groups in rev(1:length(map_list))){
1701814846330:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814846347:# Get
1701814846356:start_range <- map_list[[rule_groups]][rule, 'start']
1701814846365:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814846375:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814846392:if(i %in% start_range){
1701814846401:i <- (i - delta)
1701814846410:}
1701814846422:}
1701814846430:}
1701814846438:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814846446:print(paste("The lowest number is", i, "which comes from location", location ))
1701814846455:return(location)
1701814846465:}else(print(paste("It's not ", i)))
1701814846474:}
1701814876126:# Make the if statment look for a greater/less than combo
1701814876136:answer <- for(i in 1:100){
1701814876148:location <- i
1701814876157:for(rule_groups in rev(1:length(map_list))){
1701814876166:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814876181:# Get
1701814876190:start_range <- map_list[[rule_groups]][rule, 'start']
1701814876198:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814876207:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814876219:if(i %in% start_range){
1701814876227:i <- (i - delta)
1701814876236:}
1701814876246:}
1701814876256:}
1701814876265:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814876277:print(paste("The lowest number is", i, "which comes from location", location ))
1701814876291:return(location)
1701814876305:}else(print(paste("It's not ", location)))
1701814876319:}
1701814884222:View(seeds.new)
1701814968761:# Make the if statment look for a greater/less than combo
1701814968774:answer <- for(i in 1:100){
1701814968786:location <- i
1701814968796:for(rule_groups in rev(1:length(map_list))){
1701814968811:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814968829:# Get
1701814968839:start_range <- map_list[[rule_groups]][rule, 'start']
1701814968849:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814968860:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814968880:if(i %in% start_range){
1701814968890:i <- (i - delta)
1701814968899:}
1701814968908:}
1701814968918:}
1701814968929:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814968940:print(paste("The lowest number is", location, "which comes from location", i ))
1701814968950:return(location)
1701814968961:}else(print(paste("It's not ", location, "which makes ")))
1701814968970:}
1701814980439:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701814981182:seeds.new <- c()
1701814981668:for(i in 1:(length(seeds)/2)){
1701814981680:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701814981690:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701814981700:}
1701814982274:# Make the if statment look for a greater/less than combo
1701814982289:answer <- for(i in 1:100){
1701814982304:location <- i
1701814982318:for(rule_groups in rev(1:length(map_list))){
1701814982330:for(rule in 1:nrow(map_list[[rule_groups]])){
1701814982350:# Get
1701814982361:start_range <- map_list[[rule_groups]][rule, 'start']
1701814982372:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701814982383:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701814982400:if(i %in% start_range){
1701814982411:i <- (i - delta)
1701814982422:}
1701814982433:}
1701814982444:}
1701814982455:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701814982466:print(paste("The lowest number is", location, "which comes from location", i ))
1701814982477:return(location)
1701814982488:}else(print(paste("It's not ", location, "which makes ")))
1701814982498:}
1701815022415:# Make the if statment look for a greater/less than combo
1701815022428:answer <- for(i in 1:100){
1701815022440:location <- i
1701815022452:for(rule_groups in rev(1:length(map_list))){
1701815022464:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815022482:# Get
1701815022492:start_range <- map_list[[rule_groups]][rule, 'start']
1701815022503:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815022514:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815022533:if(i %in% start_range){
1701815022543:i <- (i - delta)
1701815022554:}
1701815022565:}
1701815022576:}
1701815022587:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815022598:print(paste("The lowest number is", location, "which comes from location", i ))
1701815022609:return(location)
1701815022623:}else(print(paste("It's not ", location, "which makes ")))
1701815022633:}
1701815038869:# Make the if statment look for a greater/less than combo
1701815038883:answer <- for(i in 1:100){
1701815038895:location <- i
1701815038907:for(rule_groups in rev(1:length(map_list))){
1701815038918:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815038938:# Get
1701815038946:start_range <- map_list[[rule_groups]][rule, 'start']
1701815038958:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815038970:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815038985:if(i %in% start_range){
1701815038995:i <- (i - delta)
1701815039004:}
1701815039013:}
1701815039021:}
1701815039030:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815039039:print(paste("The lowest number is", location, "which comes from location", i ))
1701815039048:return(location)
1701815039056:}else(print(paste("It's not ", location, "which makes ")))
1701815039064:}
1701815084733:# Make the if statment look for a greater/less than combo
1701815084747:answer <- for(i in 1:100){
1701815084760:location <- i
1701815084771:for(rule_groups in rev(1:length(map_list))){
1701815084782:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815084798:# Get
1701815084808:start_range <- map_list[[rule_groups]][rule, 'start']
1701815084821:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815084831:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815084849:if(i %in% start_range:end_range){
1701815084859:i <- (i - delta)
1701815084870:}
1701815084881:}
1701815084891:}
1701815084901:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815084911:print(paste("The lowest number is", location, "which comes from location", i ))
1701815084921:return(location)
1701815084931:}else(print(paste("It's not ", location, "which makes ")))
1701815084940:}
1701815141746:# Make the if statment look for a greater/less than combo
1701815141759:answer <- for(i in 1:100){
1701815141771:location <- i
1701815141783:for(rule_groups in rev(1:length(map_list))){
1701815141793:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815141813:# Get
1701815141823:start_range <- map_list[[rule_groups]][rule, 'start']
1701815141834:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815141847:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815141866:if(i %in% start_range:end_range){
1701815141876:i <- (i + delta)
1701815141887:}
1701815141898:}
1701815141911:}
1701815141920:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815141929:print(paste("The lowest number is", location, "which comes from location", i ))
1701815141938:return(location)
1701815141947:}else(print(paste("It's not ", location, "which makes ")))
1701815141960:}
1701815166409:View(map_list)
1701815198919:View(map_list)
1701815214343:map_list[["seed-to-soil"]]
1701815368496:# Make the if statment look for a greater/less than combo
1701815368510:answer <- for(i in 1:100){
1701815368526:location <- i
1701815368540:for(rule_groups in rev(1:length(map_list))){
1701815368553:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815368572:# Get
1701815368584:start_range <- map_list[[rule_groups]][rule, 'start']
1701815368598:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815368609:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815368621:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701815368633:if(i %in% start_range:end_range){
1701815368645:i <- (i + delta)
1701815368657:}
1701815368668:}
1701815368681:}
1701815368693:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815368704:print(paste("The lowest number is", location, "which comes from location", i ))
1701815368716:return(location)
1701815368728:}else(print(paste("It's not ", location, "which makes ")))
1701815368740:}
1701815492301:# Make the if statment look for a greater/less than combo
1701815492312:answer <- for(i in 1:100){
1701815492327:location <- i
1701815492337:for(rule_groups in rev(1:length(map_list))){
1701815492347:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815492361:# Get
1701815492370:start_range <- map_list[[rule_groups]][rule, 'start']
1701815492379:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815492390:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815492401:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701815492412:if(i %in% start_range:end_range){
1701815492424:i <- (i + delta)
1701815492435:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701815492446:}
1701815492458:}
1701815492469:}
1701815492480:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815492491:print(paste("The lowest number is", location, "which comes from location", i ))
1701815492502:return(location)
1701815492513:}else(print(paste("It's not ", location)))
1701815492524:}
1701815628590:View(seeds.new)
1701815631070:View(map_list)
1701815650588:# Make the if statment look for a greater/less than combo
1701815650599:answer <- for(i in 1:100){
1701815650610:location <- i
1701815650620:for(rule_groups in rev(1:length(map_list))){
1701815650630:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815650646:# Get
1701815650659:start_range <- map_list[[rule_groups]][rule, 'start']
1701815650670:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701815650683:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815650694:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701815650705:if(i %in% start_range:end_range){
1701815650716:i <- (i + delta)
1701815650728:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701815650739:}
1701815650751:}
1701815650764:}
1701815650774:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815650784:print(paste("The lowest number is", location, "which comes from location", i ))
1701815650796:return(location)
1701815650808:}else(print(paste("It's not ", location)))
1701815650817:}
1701815674805:# Make the if statment look for a greater/less than combo
1701815674820:answer <- for(i in 1:100){
1701815674832:location <- i
1701815674842:for(rule_groups in rev(1:length(map_list))){
1701815674854:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815674872:# Get
1701815674883:start_range <- map_list[[rule_groups]][rule, 'start']
1701815674896:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815674909:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815674923:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701815674936:if(i %in% start_range:end_range){
1701815674952:i <- (i + delta)
1701815674969:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701815674983:}
1701815674999:}
1701815675014:}
1701815675029:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815675045:print(paste("The lowest number is", location, "which comes from location", i ))
1701815675062:return(location)
1701815675079:}else(print(paste("It's not ", location)))
1701815675096:}
1701815729103:View(map_list)
1701815787626:View(map_list)
1701815878105:# Make the if statment look for a greater/less than combo
1701815878116:answer <- for(i in 46){
1701815878125:location <- i
1701815878135:for(rule_groups in rev(1:length(map_list))){
1701815878143:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815878159:# Get
1701815878168:start_range <- map_list[[rule_groups]][rule, 'start']
1701815878179:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815878190:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701815878201:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701815878212:if(i %in% start_range:end_range){
1701815878223:i <- (i + delta)
1701815878235:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701815878247:}
1701815878258:}
1701815878270:}
1701815878281:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815878293:print(paste("The lowest number is", location, "which comes from location", i ))
1701815878305:return(location)
1701815878318:}else(print(paste("It's not ", location)))
1701815878330:}
1701815943029:# Make the if statment look for a greater/less than combo
1701815943052:answer <- for(i in 46){
1701815943103:location <- i
1701815943140:for(rule_groups in rev(1:length(map_list))){
1701815943158:for(rule in 1:nrow(map_list[[rule_groups]])){
1701815943190:# Get
1701815943225:start_range <- map_list[[rule_groups]][rule, 'start']
1701815943240:end_range <- start_range + map_list[[rule_groups]][rule, 'range']
1701815943254:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range - 1
1701815943269:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701815943282:if(i %in% start_range:end_range){
1701815943297:i <- (i + delta)
1701815943310:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701815943323:}
1701815943334:}
1701815943345:}
1701815943358:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701815943371:print(paste("The lowest number is", location, "which comes from location", i ))
1701815943384:return(location)
1701815943396:}else(print(paste("It's not ", location)))
1701815943409:}
1701816046269:# Make the if statment look for a greater/less than combo
1701816046280:answer <- for(i in 46){
1701816046291:location <- i
1701816046303:for(rule_groups in rev(1:length(map_list))){
1701816046313:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816046334:# Get
1701816046344:start_range <- map_list[[rule_groups]][rule, 'start']
1701816046353:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701816046363:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range - 1
1701816046371:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816046381:if(i %in% start_range:end_range){
1701816046390:i <- (i + delta)
1701816046400:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816046412:}
1701816046425:}
1701816046437:}
1701816046449:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816046459:print(paste("The lowest number is", location, "which comes from location", i ))
1701816046471:return(location)
1701816046481:}else(print(paste("It's not ", location)))
1701816046493:}
1701816051651:# Make the if statment look for a greater/less than combo
1701816051666:answer <- for(i in 46){
1701816051678:location <- i
1701816051689:for(rule_groups in rev(1:length(map_list))){
1701816051701:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816051722:# Get
1701816051733:start_range <- map_list[[rule_groups]][rule, 'start']
1701816051746:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701816051758:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701816051770:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816051782:if(i %in% start_range:end_range){
1701816051793:i <- (i + delta)
1701816051807:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816051828:}
1701816051844:}
1701816051858:}
1701816051871:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816051881:print(paste("The lowest number is", location, "which comes from location", i ))
1701816051891:return(location)
1701816051902:}else(print(paste("It's not ", location)))
1701816051913:}
1701816116603:answer <- for(i in 1:10^6){
1701816116613:for(rule_groups in rev(1:length(map_list))){
1701816116625:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816116635:start_range <- map_list[[rule_groups]][rule, 'start']
1701816116647:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701816116659:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701816116670:if(i %in% end_range){
1701816116681:i <- (i - delta)
1701816116694:}
1701816116714:}
1701816116726:}
1701816116737:if(i %in% seeds){
1701816116749:print(i)
1701816116761:return(i)
1701816116773:}else(
1701816116784:print(paste("It's not ", i))
1701816116795:)
1701816116806:}
1701816204352:answer <- for(i in 1:10^6){
1701816204368:value <- i
1701816204380:for(rule_groups in rev(1:length(map_list))){
1701816204392:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816204405:start_range <- map_list[[rule_groups]][rule, 'start']
1701816204417:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701816204429:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701816204440:if(i %in% end_range){
1701816204452:i <- (i - delta)
1701816204464:}
1701816204482:}
1701816204493:}
1701816204505:if(i %in% seeds){
1701816204519:print(paste("The lowest value is", location, "which came from", i))
1701816204530:return(i)
1701816204541:}else(
1701816204552:print(paste("It's not ", i))
1701816204563:)
1701816204573:}
1701816253046:View(seeds.new)
1701816270748:seeds
1701816278549:for(rule_groups in rev(1:length(map_list))){
1701816278562:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816278573:start_range <- map_list[[rule_groups]][rule, 'start']
1701816278584:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701816278595:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701816278608:if(i %in% end_range){
1701816278621:i <- (i - delta)
1701816278632:}
1701816278652:}
1701816278663:}
1701816287475:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701816290236:seeds
1701816302809:# Split data into different maps
1701816302822:map_list <- lapply(1:length(map_names), function(i) {
1701816302834:start_index <- map_indices[i] + 1
1701816302845:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701816302856:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701816302865:})
1701816303638:names(map_list) <- gsub(" map:", "", map_names)
1701816306619:map_list
1701816332420:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701816332711:seeds.new <- c()
1701816333221:for(i in 1:(length(seeds)/2)){
1701816333233:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701816333246:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701816333257:seeds.new[[i]] <- seq(seeds.new[[i]][[1]], seeds.new[[i]][[2]], 1)
1701816333269:}
1701816335550:# Make the if statment look for a greater/less than combo
1701816335564:seeds.new <- unlist(seeds.new)
1701816338559:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701816341489:seeds_group <- seeds.new
1701816341932:answer <- for(i in 1:10^6){
1701816341951:value <- i
1701816341969:for(rule_groups in rev(1:length(map_list))){
1701816341982:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816341995:start_range <- map_list[[rule_groups]][rule, 'start']
1701816342007:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701816342019:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701816342037:if(i %in% end_range){
1701816342050:i <- (i - delta)
1701816342064:}
1701816342089:}
1701816342103:}
1701816342116:if(i %in% seeds){
1701816342127:print(paste("The lowest value is", location, "which came from", i))
1701816342137:return(i)
1701816342148:}else(
1701816342158:print(paste("It's not ", i))
1701816342168:)
1701816342179:}
1701816420861:# Make the if statment look for a greater/less than combo
1701816420878:answer <- for(i in 46){
1701816420890:location <- i
1701816420900:for(rule_groups in rev(1:length(map_list))){
1701816420913:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816420931:# Get
1701816420939:start_range <- map_list[[rule_groups]][rule, 'start']
1701816420951:end_range <- start_range + map_list[[rule_groups]][rule, 'range'] - 1
1701816420965:delta <- map_list[[rule_groups]][rule, 'dest'] - start_range
1701816420976:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816420986:if(i %in% start_range:end_range){
1701816420999:i <- (i + delta)
1701816421009:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816421018:}
1701816421027:}
1701816421035:}
1701816421044:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816421053:print(paste("The lowest number is", location, "which comes from location", i ))
1701816421061:return(location)
1701816421069:}else(print(paste("It's not ", location)))
1701816421080:}
1701816539170:View(map_list)
1701816777057:# Make the if statment look for a greater/less than combo
1701816777068:answer <- for(i in 46){
1701816777082:location <- i
1701816777095:for(rule_groups in rev(1:length(map_list))){
1701816777107:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816777127:# Get rule parameters
1701816777139:# Start is where we'll start to look for our 'i' value
1701816777151:start <- map_list[[rule_groups]][rule, 'start']
1701816777162:# End is the tail end of where we'll look
1701816777173:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701816777185:# Delta is how much we'll add to 'i' if its between start and end
1701816777195:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701816777213:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816777224:if(i %in% start_range:end_range){
1701816777235:i <- (i + delta)
1701816777244:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816777255:}
1701816777265:}
1701816777275:}
1701816777286:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816777299:print(paste("The lowest number is", location, "which comes from location", i ))
1701816777311:return(location)
1701816777322:}else(print(paste("It's not ", location)))
1701816777333:}
1701816783557:# Make the if statment look for a greater/less than combo
1701816783569:answer <- for(i in 46){
1701816783580:location <- i
1701816783591:for(rule_groups in rev(1:length(map_list))){
1701816783602:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816783622:# Get rule parameters
1701816783634:# Start is where we'll start to look for our 'i' value
1701816783645:start <- map_list[[rule_groups]][rule, 'start']
1701816783657:# End is the tail end of where we'll look
1701816783668:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701816783679:# Delta is how much we'll add to 'i' if its between start and end
1701816783691:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701816783711:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816783722:if(i %in% start_range:end_range){
1701816783735:i <- (i + delta)
1701816783745:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816783756:}
1701816783767:}
1701816783779:}
1701816783790:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816783801:print(paste("The lowest number is", location, "which comes from location", i ))
1701816783813:return(location)
1701816783824:}else(print(paste("It's not ", location)))
1701816783835:}
1701816816537:# Make the if statment look for a greater/less than combo
1701816816549:answer <- for(i in 46){
1701816816561:location <- i
1701816816570:for(rule_groups in rev(1:length(map_list))){
1701816816581:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816816594:# Get rule parameters
1701816816606:# Start is where we'll start to look for our 'i' value
1701816816619:start <- map_list[[rule_groups]][rule, 'start']
1701816816631:# End is the tail end of where we'll look
1701816816642:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701816816654:# Delta is how much we'll add to 'i' if its between start and end
1701816816665:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701816816685:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816816705:if(i %in% start:end){
1701816816716:i <- (i + delta)
1701816816728:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816816739:}
1701816816750:}
1701816816761:}
1701816816772:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816816785:print(paste("The lowest number is", location, "which comes from location", i ))
1701816816796:return(location)
1701816816809:}else(print(paste("It's not ", location)))
1701816816821:}
1701816835804:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701816836031:seeds.new <- c()
1701816836472:for(i in 1:(length(seeds)/2)){
1701816836487:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701816836499:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701816836510:}
1701816839126:# Make the if statment look for a greater/less than combo
1701816839139:answer <- for(i in 46){
1701816839154:location <- i
1701816839167:for(rule_groups in rev(1:length(map_list))){
1701816839180:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816839192:# Get rule parameters
1701816839204:# Start is where we'll start to look for our 'i' value
1701816839214:start <- map_list[[rule_groups]][rule, 'start']
1701816839227:# End is the tail end of where we'll look
1701816839238:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701816839249:# Delta is how much we'll add to 'i' if its between start and end
1701816839261:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701816839279:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816839298:if(i %in% start:end){
1701816839309:i <- (i + delta)
1701816839320:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816839333:}
1701816839343:}
1701816839355:}
1701816839366:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816839377:print(paste("The lowest number is", location, "which comes from location", i ))
1701816839388:return(location)
1701816839399:}else(print(paste("It's not ", location)))
1701816839409:}
1701816929307:# Make the if statment look for a greater/less than combo
1701816929317:answer <- for(i in 46){
1701816929328:location <- i
1701816929340:for(rule_groups in rev(1:length(map_list))){
1701816929352:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816929364:# Get rule parameters
1701816929375:# Start is where we'll start to look for our 'i' value
1701816929384:start <- map_list[[rule_groups]][rule, 'start']
1701816929395:# End is the tail end of where we'll look
1701816929405:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701816929417:# Delta is how much we'll add to 'i' if its between start and end
1701816929427:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701816929447:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816929466:if(i %in% start:end){
1701816929477:i <- (i + delta)
1701816929487:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816929499:} break
1701816947170:if(i %in% start:end){
1701816947188:i <- (i + delta)
1701816947201:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816947213:break
1701816947228:}
1701816949806:# Make the if statment look for a greater/less than combo
1701816949823:answer <- for(i in 46){
1701816949834:location <- i
1701816949845:for(rule_groups in rev(1:length(map_list))){
1701816949856:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816949865:# Get rule parameters
1701816949875:# Start is where we'll start to look for our 'i' value
1701816949886:start <- map_list[[rule_groups]][rule, 'start']
1701816949897:# End is the tail end of where we'll look
1701816949908:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701816949920:# Delta is how much we'll add to 'i' if its between start and end
1701816949932:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701816949949:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816949967:if(i %in% start:end){
1701816949978:i <- (i + delta)
1701816949989:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816950001:break
1701816950012:}
1701816950024:}
1701816950036:}
1701816950048:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816950057:print(paste("The lowest number is", location, "which comes from location", i ))
1701816950066:return(location)
1701816950075:}else(print(paste("It's not ", location)))
1701816950083:}
1701816957956:# Make the if statment look for a greater/less than combo
1701816957972:answer <- for(i in 1:100){
1701816957986:location <- i
1701816957998:for(rule_groups in rev(1:length(map_list))){
1701816958011:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816958025:# Get rule parameters
1701816958036:# Start is where we'll start to look for our 'i' value
1701816958047:start <- map_list[[rule_groups]][rule, 'start']
1701816958057:# End is the tail end of where we'll look
1701816958070:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701816958081:# Delta is how much we'll add to 'i' if its between start and end
1701816958092:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701816958109:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816958127:if(i %in% start:end){
1701816958138:i <- (i + delta)
1701816958150:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816958161:break
1701816958172:}
1701816958186:}
1701816958199:}
1701816958211:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816958221:print(paste("The lowest number is", location, "which comes from location", i ))
1701816958231:return(location)
1701816958241:}else(print(paste("It's not ", location)))
1701816958249:}
1701816986868:# Make the if statment look for a greater/less than combo
1701816986881:answer <- for(i in 1:100){
1701816986892:location <- i
1701816986903:for(rule_groups in rev(1:length(map_list))){
1701816986912:for(rule in 1:nrow(map_list[[rule_groups]])){
1701816986923:# Get rule parameters
1701816986934:# Start is where we'll start to look for our 'i' value
1701816986945:start <- map_list[[rule_groups]][rule, 'start']
1701816986956:# End is the tail end of where we'll look
1701816986969:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701816986978:# Delta is how much we'll add to 'i' if its between start and end
1701816986989:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701816987005:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701816987023:if(i %in% start:end){
1701816987033:i <- (i + delta)
1701816987045:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701816987057:break # exit the rule level if a condition is met
1701816987068:}
1701816987078:}
1701816987090:}
1701816987101:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701816987111:print(paste("The lowest number is", location, "which comes from location", i ))
1701816987118:return(location)
1701816987128:}else(print(paste("It's not ", location)))
1701816987141:}
1701816992506:answer
1701817058928:# Make the if statment look for a greater/less than combo
1701817058941:answer <- for(i in 1:100){
1701817058954:location <- i
1701817058964:for(rule_groups in rev(1:length(map_list))){
1701817058974:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817058984:# Get rule parameters
1701817058994:# Start is where we'll start to look for our 'i' value
1701817059004:start <- map_list[[rule_groups]][rule, 'start']
1701817059015:# End is the tail end of where we'll look
1701817059026:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817059035:# Delta is how much we'll add to 'i' if its between start and end
1701817059046:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817059060:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701817059072:if(i >= start & i <= end){
1701817059080:i <- (i + delta)
1701817059089:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817059100:break # exit the rule level if a condition is met
1701817059112:}
1701817059123:}
1701817059134:}
1701817059146:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817059155:print(paste("The lowest number is", location, "which comes from location", i ))
1701817059162:return(location)
1701817059173:}else(print(paste("It's not ", location)))
1701817059185:}
1701817072938:data <- readLines("data/input_5.txt")
1701817081399:# Extract seeds
1701817081410:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701817081429:# Remove empty strings
1701817081440:data_clean <- data[data != ""]
1701817081459:# Extract map names and their corresponding indices
1701817081467:map_names <- data_clean[grepl("map:", data_clean)]
1701817081477:map_indices <- match(map_names, data_clean)
1701817081492:# Split data into different maps
1701817081500:map_list <- lapply(1:length(map_names), function(i) {
1701817081510:start_index <- map_indices[i] + 1
1701817081519:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701817081528:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701817081539:})
1701817081568:names(map_list) <- gsub(" map:", "", map_names)
1701817094374:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701817094638:seeds.new <- c()
1701817094860:for(i in 1:(length(seeds)/2)){
1701817094875:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701817094889:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701817094901:seeds.new[[i]] <- seq(seeds.new[[i]][[1]], seeds.new[[i]][[2]], 1)
1701817094912:}
1701817114210:# Make the if statment look for a greater/less than combo
1701817114225:seeds.new <- unlist(seeds.new)
1701817138765:data <- readLines("data/input_5.txt")
1701817138790:# Extract seeds
1701817138801:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701817138819:# Remove empty strings
1701817138830:data_clean <- data[data != ""]
1701817138850:# Extract map names and their corresponding indices
1701817138864:map_names <- data_clean[grepl("map:", data_clean)]
1701817138875:map_indices <- match(map_names, data_clean)
1701817138894:# Split data into different maps
1701817138905:map_list <- lapply(1:length(map_names), function(i) {
1701817138917:start_index <- map_indices[i] + 1
1701817138929:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701817138941:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701817138952:})
1701817139199:names(map_list) <- gsub(" map:", "", map_names)
1701817145486:# Set column names for each dataframe
1701817145502:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701817146949:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701817149210:seeds.new <- c()
1701817150470:for(i in 1:(length(seeds)/2)){
1701817150484:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701817150494:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701817150505:}
1701817157523:# Make the if statment look for a greater/less than combo
1701817157534:answer <- for(i in 1:100){
1701817157551:location <- i
1701817157567:for(rule_groups in rev(1:length(map_list))){
1701817157583:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817157604:# Get rule parameters
1701817157619:# Start is where we'll start to look for our 'i' value
1701817157632:start <- map_list[[rule_groups]][rule, 'start']
1701817157646:# End is the tail end of where we'll look
1701817157661:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817157678:# Delta is how much we'll add to 'i' if its between start and end
1701817157694:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817157718:print(paste("Checking if", i, "falls between", start_range, "and", end_range))
1701817157741:if(i >= start & i <= end){
1701817157755:i <- (i + delta)
1701817157768:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817157780:break # exit the rule level if a condition is met
1701817157791:}
1701817157801:}
1701817157812:}
1701817157821:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817157830:print(paste("The lowest number is", location, "which comes from location", i ))
1701817157840:return(location)
1701817157850:}else(print(paste("It's not ", location)))
1701817157860:}
1701817177046:# Make the if statment look for a greater/less than combo
1701817177061:answer <- for(i in 1:100){
1701817177072:location <- i
1701817177083:for(rule_groups in rev(1:length(map_list))){
1701817177094:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817177106:# Get rule parameters
1701817177117:# Start is where we'll start to look for our 'i' value
1701817177130:start <- map_list[[rule_groups]][rule, 'start']
1701817177141:# End is the tail end of where we'll look
1701817177152:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817177163:# Delta is how much we'll add to 'i' if its between start and end
1701817177172:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817177188:print(paste("Checking if", i, "falls between", start, "and", end))
1701817177206:if(i >= start & i <= end){
1701817177215:i <- (i + delta)
1701817177226:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817177235:break # exit the rule level if a condition is met
1701817177245:}
1701817177256:}
1701817177265:}
1701817177274:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817177283:print(paste("The lowest number is", location, "which comes from location", i ))
1701817177295:return(location)
1701817177306:}else(print(paste("It's not ", location)))
1701817177319:}
1701817234092:start <- Sys.time()
1701817234107:for(i in 1:100){
1701817234122:location <- i
1701817234137:for(rule_groups in rev(1:length(map_list))){
1701817234150:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817234163:# Get rule parameters
1701817234176:# Start is where we'll start to look for our 'i' value
1701817234188:start <- map_list[[rule_groups]][rule, 'start']
1701817234204:# End is the tail end of where we'll look
1701817234216:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817234230:# Delta is how much we'll add to 'i' if its between start and end
1701817234245:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817234266:print(paste("Checking if", i, "falls between", start, "and", end))
1701817234287:if(i >= start & i <= end){
1701817234296:i <- (i + delta)
1701817234306:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817234317:break # exit the rule level if a condition is met
1701817234330:}
1701817234340:}
1701817234351:}
1701817234363:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817234373:print(paste("The lowest number is", location, "which comes from location", i ))
1701817234385:return(location)
1701817234404:}else(print(paste("It's not ", location)))
1701817234413:}
1701817236391:Sys.time() - start
1701817250843:Sys.time
1701817253994:Sys.time()
1701817257794:Sys.time()
1701817278785:# Make the if statment look for a greater/less than combo
1701817278794:start <- Sys.time()
1701817278806:for(i in 1:100){
1701817278816:location <- i
1701817278828:for(rule_groups in rev(1:length(map_list))){
1701817278840:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817278852:# Get rule parameters
1701817278862:# Start is where we'll start to look for our 'i' value
1701817278874:start <- map_list[[rule_groups]][rule, 'start']
1701817278886:# End is the tail end of where we'll look
1701817278897:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817278908:# Delta is how much we'll add to 'i' if its between start and end
1701817278920:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817278939:print(paste("Checking if", i, "falls between", start, "and", end))
1701817278958:if(i >= start & i <= end){
1701817278969:i <- (i + delta)
1701817278980:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817278992:break # exit the rule level if a condition is met
1701817279005:}
1701817279017:}
1701817279027:}
1701817279038:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817279049:print(paste("The lowest number is", location, "which comes from location", i ))
1701817279061:return(location)
1701817279074:}else(print(paste("It's not ", location)))
1701817279085:}
1701817281015:end <- Sys.time()
1701817281032:start - end
1701817294436:# Make the if statment look for a greater/less than combo
1701817294451:start <- Sys.time()
1701817298327:end <- Sys.time()
1701817300297:start - end
1701817317556:start <- Sys.time()
1701817317578:for(i in 1:100){
1701817317589:location <- i
1701817317601:for(rule_groups in rev(1:length(map_list))){
1701817317612:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817317625:# Get rule parameters
1701817317635:# Start is where we'll start to look for our 'i' value
1701817317646:start <- map_list[[rule_groups]][rule, 'start']
1701817317657:# End is the tail end of where we'll look
1701817317668:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817317676:# Delta is how much we'll add to 'i' if its between start and end
1701817317687:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817317707:print(paste("Checking if", i, "falls between", start, "and", end))
1701817317729:if(i >= start & i <= end){
1701817317740:i <- (i + delta)
1701817317750:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817317760:break # exit the rule level if a condition is met
1701817317770:}
1701817317780:}
1701817317791:}
1701817317802:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817317813:print(paste("The lowest number is", location, "which comes from location", i ))
1701817317824:}else(print(paste("It's not ", location)))
1701817317840:}
1701817319697:end <- Sys.time()
1701817319716:start - end
1701817346020:timer.start <- Sys.time()
1701817346040:for(i in 1:100){
1701817346051:location <- i
1701817346063:for(rule_groups in rev(1:length(map_list))){
1701817346074:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817346086:# Get rule parameters
1701817346099:# Start is where we'll start to look for our 'i' value
1701817346111:start <- map_list[[rule_groups]][rule, 'start']
1701817346124:# End is the tail end of where we'll look
1701817346135:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817346150:# Delta is how much we'll add to 'i' if its between start and end
1701817346164:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817346189:print(paste("Checking if", i, "falls between", start, "and", end))
1701817346213:if(i >= start & i <= end){
1701817346228:i <- (i + delta)
1701817346241:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817346252:break # exit the rule level if a condition is met
1701817346263:}
1701817346274:}
1701817346284:}
1701817346297:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817346310:print(paste("The lowest number is", location, "which comes from location", i ))
1701817346321:}else(print(paste("It's not ", location)))
1701817346332:}
1701817348176:end <- Sys.time()
1701817348199:timer.start - end
1701817365965:timer.start <- Sys.time()
1701817365981:for(i in 1:1000){
1701817365990:location <- i
1701817366003:for(rule_groups in rev(1:length(map_list))){
1701817366017:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817366030:# Get rule parameters
1701817366042:# Start is where we'll start to look for our 'i' value
1701817366055:start <- map_list[[rule_groups]][rule, 'start']
1701817366068:# End is the tail end of where we'll look
1701817366080:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817366094:# Delta is how much we'll add to 'i' if its between start and end
1701817366107:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817366130:print(paste("Checking if", i, "falls between", start, "and", end))
1701817366149:if(i >= start & i <= end){
1701817366158:i <- (i + delta)
1701817366169:print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817366179:break # exit the rule level if a condition is met
1701817366190:}
1701817366204:}
1701817366216:}
1701817366226:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817366239:print(paste("The lowest number is", location, "which comes from location", i ))
1701817366250:}else(print(paste("It's not ", location)))
1701817366260:}
1701817384653:end <- Sys.time()
1701817384674:timer.start - end
1701817441461:timer.start <- Sys.time()
1701817441476:for(i in 1:1000){
1701817441485:location <- i
1701817441493:print(i)
1701817441504:for(rule_groups in rev(1:length(map_list))){
1701817441513:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817441522:# Get rule parameters
1701817441533:# Start is where we'll start to look for our 'i' value
1701817441544:start <- map_list[[rule_groups]][rule, 'start']
1701817441554:# End is the tail end of where we'll look
1701817441565:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817441575:# Delta is how much we'll add to 'i' if its between start and end
1701817441584:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817441602:#print(paste("Checking if", i, "falls between", start, "and", end))
1701817441618:if(i >= start & i <= end){
1701817441626:i <- (i + delta)
1701817441634:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817441645:break # exit the rule level if a condition is met
1701817441653:}
1701817441663:}
1701817441675:}
1701817441685:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817441695:print(paste("The lowest number is", location, "which comes from location", i ))
1701817441704:}#else(print(paste("It's not ", location)))
1701817441717:}
1701817445878:end <- Sys.time()
1701817449459:timer.start - end
1701817456625:timer.start <- Sys.time()
1701817456642:for(i in 1:1000){
1701817456652:location <- i
1701817456661:print(i)
1701817456670:for(rule_groups in rev(1:length(map_list))){
1701817456682:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817456693:# Get rule parameters
1701817456706:# Start is where we'll start to look for our 'i' value
1701817456720:start <- map_list[[rule_groups]][rule, 'start']
1701817456731:# End is the tail end of where we'll look
1701817456742:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817456755:# Delta is how much we'll add to 'i' if its between start and end
1701817456765:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817456784:#print(paste("Checking if", i, "falls between", start, "and", end))
1701817456801:if(i >= start & i <= end){
1701817456811:i <- (i + delta)
1701817456823:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817456833:break # exit the rule level if a condition is met
1701817456844:}
1701817456854:}
1701817456865:}
1701817456877:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817456888:print(paste("The lowest number is", location, "which comes from location", i ))
1701817456900:}#else(print(paste("It's not ", location)))
1701817456912:}
1701817461112:end <- Sys.time()
1701817461129:timer.start - end
1701817474920:timer.start <- Sys.time()
1701817475090:for(i in 1:10^4){
1701817475168:location <- i
1701817475259:print(i)
1701817475346:for(rule_groups in rev(1:length(map_list))){
1701817475429:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817475511:# Get rule parameters
1701817475583:# Start is where we'll start to look for our 'i' value
1701817475685:start <- map_list[[rule_groups]][rule, 'start']
1701817475787:# End is the tail end of where we'll look
1701817475900:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817476005:# Delta is how much we'll add to 'i' if its between start and end
1701817476085:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817476225:#print(paste("Checking if", i, "falls between", start, "and", end))
1701817476386:if(i >= start & i <= end){
1701817476470:i <- (i + delta)
1701817476588:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817476683:break # exit the rule level if a condition is met
1701817476757:}
1701817476852:}
1701817476968:}
1701817477054:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817477131:print(paste("The lowest number is", location, "which comes from location", i ))
1701817477260:}#else(print(paste("It's not ", location)))
1701817477362:}
1701817520832:end <- Sys.time()
1701817520845:timer.start - end
1701817550513:data <- c(
1701817550527:'seeds: 79 14 55 13',
1701817550539:'',
1701817550551:'seed-to-soil map:',
1701817550563:'50 98 2',
1701817550575:'52 50 48',
1701817550586:'',
1701817550599:'soil-to-fertilizer map:',
1701817550609:'0 15 37',
1701817550620:'37 52 2',
1701817550629:'39 0 15',
1701817550639:'',
1701817550647:'fertilizer-to-water map:',
1701817550657:'49 53 8',
1701817550667:'0 11 42',
1701817550677:'42 0 7',
1701817550685:'57 7 4',
1701817550694:'',
1701817550702:'water-to-light map:',
1701817550712:'88 18 7',
1701817550721:'18 25 70',
1701817550730:'',
1701817550739:'light-to-temperature map:',
1701817550748:'45 77 23',
1701817550759:'81 45 19',
1701817550770:'68 64 13',
1701817550781:'',
1701817550792:'temperature-to-humidity map:',
1701817550802:'0 69 1',
1701817550812:"1 0 69",
1701817550823:'',
1701817550833:'humidity-to-location map:',
1701817550845:"60 56 37",
1701817550855:"56 93 4" )
1701817554622:# Extract seeds
1701817554630:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701817554642:# Remove empty strings
1701817554651:data_clean <- data[data != ""]
1701817554669:# Extract map names and their corresponding indices
1701817554678:map_names <- data_clean[grepl("map:", data_clean)]
1701817554688:map_indices <- match(map_names, data_clean)
1701817554706:# Split data into different maps
1701817554714:map_list <- lapply(1:length(map_names), function(i) {
1701817554725:start_index <- map_indices[i] + 1
1701817554736:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701817554748:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701817554759:})
1701817554785:names(map_list) <- gsub(" map:", "", map_names)
1701817562416:# Set column names for each dataframe
1701817562426:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701817562445:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701817562455:seeds.new <- c()
1701817562473:for(i in 1:(length(seeds)/2)){
1701817562483:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701817562495:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701817562506:}
1701817562522:# Make the if statment look for a greater/less than combo
1701817562532:timer.start <- Sys.time()
1701817562550:for(i in 1:10^4){
1701817562560:location <- i
1701817562570:print(i)
1701817562579:for(rule_groups in rev(1:length(map_list))){
1701817562588:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817562599:# Get rule parameters
1701817562609:# Start is where we'll start to look for our 'i' value
1701817562617:start <- map_list[[rule_groups]][rule, 'start']
1701817562628:# End is the tail end of where we'll look
1701817562637:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817562646:# Delta is how much we'll add to 'i' if its between start and end
1701817562654:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817562670:#print(paste("Checking if", i, "falls between", start, "and", end))
1701817562686:if(i >= start & i <= end){
1701817562694:i <- (i + delta)
1701817562705:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817562718:break # exit the rule level if a condition is met
1701817562729:}
1701817562740:}
1701817562752:}
1701817562762:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817562772:print(paste("The lowest number is", location, "which comes from location", i ))
1701817562782:break
1701817562794:}#else(print(paste("It's not ", location)))
1701817562805:}
1701817562858:end <- Sys.time()
1701817562874:timer.start - end
1701817569378:data <- readLines("data/input_5.txt")
1701817572795:# Extract seeds
1701817572808:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701817572826:# Remove empty strings
1701817572834:data_clean <- data[data != ""]
1701817572850:# Extract map names and their corresponding indices
1701817572859:map_names <- data_clean[grepl("map:", data_clean)]
1701817572869:map_indices <- match(map_names, data_clean)
1701817572883:# Split data into different maps
1701817572893:map_list <- lapply(1:length(map_names), function(i) {
1701817572902:start_index <- map_indices[i] + 1
1701817572913:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701817572925:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701817572934:})
1701817572956:names(map_list) <- gsub(" map:", "", map_names)
1701817587884:# Part 2
1701817587894:#### Reverse the order of the process.
1701817587903:# Start from 0, look for match at end
1701817587913:# Set column names for each dataframe
1701817587930:# Set column names for each dataframe
1701817587939:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701817587956:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701817587967:seeds.new <- c()
1701817587987:for(i in 1:(length(seeds)/2)){
1701817587998:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701817588010:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701817588021:}
1701817588051:# Make the if statment look for a greater/less than combo
1701817588061:timer.start <- Sys.time()
1701817588081:for(i in 1:10^6){
1701817588091:location <- i
1701817588104:print(i)
1701817588116:for(rule_groups in rev(1:length(map_list))){
1701817588127:for(rule in 1:nrow(map_list[[rule_groups]])){
1701817588137:# Get rule parameters
1701817588147:# Start is where we'll start to look for our 'i' value
1701817588156:start <- map_list[[rule_groups]][rule, 'start']
1701817588165:# End is the tail end of where we'll look
1701817588174:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701817588183:# Delta is how much we'll add to 'i' if its between start and end
1701817588194:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701817588212:#print(paste("Checking if", i, "falls between", start, "and", end))
1701817588227:if(i >= start & i <= end){
1701817588237:i <- (i + delta)
1701817588247:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701817588259:break # exit the rule level if a condition is met
1701817588273:}
1701817588286:}
1701817588297:}
1701817588307:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701817588317:print(paste("The lowest number is", location, "which comes from location", i ))
1701817588328:break
1701817588337:}#else(print(paste("It's not ", location)))
1701817588347:}
1701817863963:detectCores()
1701817873216:install.packages("foreach")
1701817889559:install.packages("doParallel")
1701817900298:detectCores()
1701817908837:library(doParallel)
1701817914969:detectCores()
1701818036630:data <- c(
1701818036644:'seeds: 79 14 55 13',
1701818036656:'',
1701818036666:'seed-to-soil map:',
1701818036675:'50 98 2',
1701818036686:'52 50 48',
1701818036699:'',
1701818036710:'soil-to-fertilizer map:',
1701818036719:'0 15 37',
1701818036729:'37 52 2',
1701818036741:'39 0 15',
1701818036751:'',
1701818036763:'fertilizer-to-water map:',
1701818036774:'49 53 8',
1701818036786:'0 11 42',
1701818036798:'42 0 7',
1701818036809:'57 7 4',
1701818036820:'',
1701818036832:'water-to-light map:',
1701818036843:'88 18 7',
1701818036857:'18 25 70',
1701818036869:'',
1701818036880:'light-to-temperature map:',
1701818036892:'45 77 23',
1701818036905:'81 45 19',
1701818036918:'68 64 13',
1701818036929:'',
1701818036943:'temperature-to-humidity map:',
1701818036953:'0 69 1',
1701818036964:"1 0 69",
1701818036975:'',
1701818036987:'humidity-to-location map:',
1701818036998:"60 56 37",
1701818037009:"56 93 4" )
1701818041023:Extract seeds
1701818050030:# Extract seeds
1701818050041:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701818050061:# Remove empty strings
1701818050072:data_clean <- data[data != ""]
1701818050093:# Extract map names and their corresponding indices
1701818050102:map_names <- data_clean[grepl("map:", data_clean)]
1701818050113:map_indices <- match(map_names, data_clean)
1701818050130:# Split data into different maps
1701818050140:map_list <- lapply(1:length(map_names), function(i) {
1701818050151:start_index <- map_indices[i] + 1
1701818050162:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701818050175:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701818050185:})
1701818050303:names(map_list) <- gsub(" map:", "", map_names)
1701818057980:# Set column names for each dataframe
1701818057992:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701818058010:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701818058019:seeds.new <- c()
1701818058031:for(i in 1:(length(seeds)/2)){
1701818058039:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701818058049:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701818058059:}
1701818058078:# Making paralellized
1701818058089:cores=detectCores()
1701818058104:cl <- makeCluster(cores[1]-2)
1701818059298:registerDoParallel(cl)
1701818068647:test <- for(i in 1:100){
1701818068665:location <- i
1701818068685:print(i)
1701818068701:for(rule_groups in rev(1:length(map_list))){
1701818068712:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818068722:# Get rule parameters
1701818068733:# Start is where we'll start to look for our 'i' value
1701818068743:start <- map_list[[rule_groups]][rule, 'start']
1701818068753:# End is the tail end of where we'll look
1701818068764:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818068775:# Delta is how much we'll add to 'i' if its between start and end
1701818068785:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818068799:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818068813:if(i >= start & i <= end){
1701818068823:i <- (i + delta)
1701818068833:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818068843:break # exit the rule level if a condition is met
1701818068853:}
1701818068864:}
1701818068874:}
1701818068886:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818068894:print(paste("The lowest number is", location, "which comes from location", i ))
1701818068903:return(i)
1701818068913:break
1701818068923:}#else(print(paste("It's not ", location)))
1701818068935:}
1701818105696:test <- for(i in 1:100){
1701818105710:location <- i
1701818105721:print(i)
1701818105752:for(rule_groups in rev(1:length(map_list))){
1701818105773:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818105794:# Get rule parameters
1701818105806:# Start is where we'll start to look for our 'i' value
1701818105816:start <- map_list[[rule_groups]][rule, 'start']
1701818105826:# End is the tail end of where we'll look
1701818105836:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818105846:# Delta is how much we'll add to 'i' if its between start and end
1701818105857:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818105873:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818105893:if(i >= start & i <= end){
1701818105904:i <- (i + delta)
1701818105915:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818105926:break # exit the rule level if a condition is met
1701818105938:}
1701818105950:}
1701818105963:}
1701818105973:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818105985:print(paste("The lowest number is", location, "which comes from location", i ))
1701818105998:return(i)
1701818106009:break
1701818106019:}#else(print(paste("It's not ", location)))
1701818106030:return(i)
1701818106043:}
1701818114225:test <- for(i in 1:100){
1701818114243:location <- i
1701818114256:print(i)
1701818114268:for(rule_groups in rev(1:length(map_list))){
1701818114282:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818114295:# Get rule parameters
1701818114305:# Start is where we'll start to look for our 'i' value
1701818114316:start <- map_list[[rule_groups]][rule, 'start']
1701818114327:# End is the tail end of where we'll look
1701818114337:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818114347:# Delta is how much we'll add to 'i' if its between start and end
1701818114357:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818114376:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818114395:if(i >= start & i <= end){
1701818114406:i <- (i + delta)
1701818114419:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818114432:break # exit the rule level if a condition is met
1701818114444:}
1701818114456:}
1701818114469:}
1701818114484:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818114495:print(paste("The lowest number is", location, "which comes from location", i ))
1701818114507:return(i)
1701818114521:break
1701818114532:}#else(print(paste("It's not ", location)))
1701818114545:return(i)
1701818114556:}
1701818225509:for(i in 1:100){
1701818225527:location <- i
1701818225540:print(i)
1701818225551:for(rule_groups in rev(1:length(map_list))){
1701818225562:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818225572:# Get rule parameters
1701818225582:# Start is where we'll start to look for our 'i' value
1701818225592:start <- map_list[[rule_groups]][rule, 'start']
1701818225601:# End is the tail end of where we'll look
1701818225609:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818225617:# Delta is how much we'll add to 'i' if its between start and end
1701818225625:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818225638:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818225655:if(i >= start & i <= end){
1701818225664:i <- (i + delta)
1701818225673:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818225681:break # exit the rule level if a condition is met
1701818225689:}
1701818225698:}
1701818225706:}
1701818225716:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818225725:print(paste("The lowest number is", location, "which comes from location", i ))
1701818225733:answer2 <- i
1701818225743:break
1701818225751:}#else(print(paste("It's not ", location)))
1701818225766:}
1701818236605:for(i in 1:100){
1701818236617:location <- i
1701818236631:print(i)
1701818236640:for(rule_groups in rev(1:length(map_list))){
1701818236651:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818236661:# Get rule parameters
1701818236671:# Start is where we'll start to look for our 'i' value
1701818236683:start <- map_list[[rule_groups]][rule, 'start']
1701818236693:# End is the tail end of where we'll look
1701818236704:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818236715:# Delta is how much we'll add to 'i' if its between start and end
1701818236726:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818236744:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818236762:if(i >= start & i <= end){
1701818236773:i <- (i + delta)
1701818236784:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818236797:break # exit the rule level if a condition is met
1701818236808:}
1701818236818:}
1701818236829:}
1701818236842:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818236852:print(paste("The lowest number is", location, "which comes from location", i ))
1701818236863:answer2 <- location
1701818236875:break
1701818236885:}#else(print(paste("It's not ", location)))
1701818236904:}
1701818253719:answer2
1701818320445:foreach(i in 1:100) %dopar%{
1701818328738:foreach(i = 1:100) %dopar%{
1701818328753:location <- i
1701818328767:print(i)
1701818328779:for(rule_groups in rev(1:length(map_list))){
1701818328790:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818328802:# Get rule parameters
1701818328814:# Start is where we'll start to look for our 'i' value
1701818328824:start <- map_list[[rule_groups]][rule, 'start']
1701818328835:# End is the tail end of where we'll look
1701818328845:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818328854:# Delta is how much we'll add to 'i' if its between start and end
1701818328864:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818328878:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818328893:if(i >= start & i <= end){
1701818328904:i <- (i + delta)
1701818328915:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818328929:break # exit the rule level if a condition is met
1701818328942:}
1701818328953:}
1701818328963:}
1701818328975:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818328986:print(paste("The lowest number is", location, "which comes from location", i ))
1701818328997:answer2 <- location
1701818329007:break
1701818329018:}#else(print(paste("It's not ", location)))
1701818329036:}
1701818342815:rm(answer2)
1701818345052:foreach(i = 1:100) %dopar%{
1701818345064:location <- i
1701818345079:print(i)
1701818345089:for(rule_groups in rev(1:length(map_list))){
1701818345100:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818345110:# Get rule parameters
1701818345118:# Start is where we'll start to look for our 'i' value
1701818345127:start <- map_list[[rule_groups]][rule, 'start']
1701818345136:# End is the tail end of where we'll look
1701818345145:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818345156:# Delta is how much we'll add to 'i' if its between start and end
1701818345166:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818345182:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818345199:if(i >= start & i <= end){
1701818345210:i <- (i + delta)
1701818345224:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818345235:break # exit the rule level if a condition is met
1701818345246:}
1701818345258:}
1701818345268:}
1701818345280:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818345293:print(paste("The lowest number is", location, "which comes from location", i ))
1701818345304:answer2 <- location
1701818345314:break
1701818345328:}#else(print(paste("It's not ", location)))
1701818345346:}
1701818446510:# Make the if statment look for a greater/less than combo
1701818446520:timer.start <- Sys.time()
1701818446537:foreach(i = 1:100) %dopar% {
1701818446548:location <- i
1701818446558:print(i)
1701818446570:for(rule_groups in rev(1:length(map_list))){
1701818446582:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818446592:# Get rule parameters
1701818446604:# Start is where we'll start to look for our 'i' value
1701818446617:start <- map_list[[rule_groups]][rule, 'start']
1701818446629:# End is the tail end of where we'll look
1701818446640:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818446652:# Delta is how much we'll add to 'i' if its between start and end
1701818446664:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818446682:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818446700:if(i >= start & i <= end){
1701818446711:i <- (i + delta)
1701818446721:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818446730:break # exit the rule level if a condition is met
1701818446741:}
1701818446752:}
1701818446761:}
1701818446771:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818446781:print(paste("The lowest number is", location, "which comes from location", i ))
1701818446790:answer2 <- location
1701818446799:break
1701818446809:}#else(print(paste("It's not ", location)))
1701818446825:}
1701818521517:foreach(i = 1:100) %dopar% {
1701818521530:location <- i
1701818521549:print(i)
1701818521566:for(rule_groups in rev(1:length(map_list))){
1701818521582:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818521595:# Get rule parameters
1701818521608:# Start is where we'll start to look for our 'i' value
1701818521622:start <- map_list[[rule_groups]][rule, 'start']
1701818521635:# End is the tail end of where we'll look
1701818521649:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818521669:# Delta is how much we'll add to 'i' if its between start and end
1701818521684:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818521703:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818521719:if(i >= start & i <= end){
1701818521729:i <- (i + delta)
1701818521740:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818521750:break # exit the rule level if a condition is met
1701818521762:}
1701818521773:}
1701818521783:}
1701818521795:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818521808:print(paste("The lowest number is", location, "which comes from location", i ))
1701818521819:answer2 <- location
1701818521830:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818521841:}
1701818521861:}
1701818555843:# Make the if statment look for a greater/less than combo
1701818555855:timer.start <- Sys.time()
1701818555872:foreach(i = 1:100) %dopar% {
1701818555882:location <- i
1701818555892:print(i)
1701818555902:for(rule_groups in rev(1:length(map_list))){
1701818555912:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818555924:# Get rule parameters
1701818555934:# Start is where we'll start to look for our 'i' value
1701818555948:start <- map_list[[rule_groups]][rule, 'start']
1701818555958:# End is the tail end of where we'll look
1701818555971:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818555980:# Delta is how much we'll add to 'i' if its between start and end
1701818555988:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818556004:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818556019:if(i >= start & i <= end){
1701818556028:i <- (i + delta)
1701818556038:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818556048:break # exit the rule level if a condition is met
1701818556060:}
1701818556071:}
1701818556085:}
1701818556097:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818556108:print(paste("The lowest number is", location, "which comes from location", i ))
1701818556120:answer2 <- location
1701818556131:end <- Sys.time()
1701818556143:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818556155:}
1701818556172:}
1701818559012:timer.start - end
1701818563357:timer.start
1701818565276:end
1701818570343:# Make the if statment look for a greater/less than combo
1701818570358:timer.start <- Sys.time()
1701818570374:foreach(i = 1:100) %dopar% {
1701818570382:location <- i
1701818570391:print(i)
1701818570401:for(rule_groups in rev(1:length(map_list))){
1701818570411:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818570422:# Get rule parameters
1701818570433:# Start is where we'll start to look for our 'i' value
1701818570444:start <- map_list[[rule_groups]][rule, 'start']
1701818570456:# End is the tail end of where we'll look
1701818570467:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818570478:# Delta is how much we'll add to 'i' if its between start and end
1701818570489:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818570509:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818570526:if(i >= start & i <= end){
1701818570538:i <- (i + delta)
1701818570550:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818570561:break # exit the rule level if a condition is met
1701818570572:}
1701818570584:}
1701818570596:}
1701818570609:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818570621:print(paste("The lowest number is", location, "which comes from location", i ))
1701818570633:answer2 <- location
1701818570645:end <- Sys.time()
1701818570658:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818570668:}
1701818570687:}
1701818600232:data <- readLines("data/input_5.txt")
1701818604503:# Extract seeds
1701818604515:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701818604534:# Remove empty strings
1701818604548:data_clean <- data[data != ""]
1701818604567:# Extract map names and their corresponding indices
1701818604579:map_names <- data_clean[grepl("map:", data_clean)]
1701818604590:map_indices <- match(map_names, data_clean)
1701818604610:# Split data into different maps
1701818604622:map_list <- lapply(1:length(map_names), function(i) {
1701818604633:start_index <- map_indices[i] + 1
1701818604645:end_index <- ifelse(i < length(map_names), map_indices[i + 1] - 1, length(data_clean))
1701818604654:as.data.frame(do.call(rbind, lapply(data_clean[start_index:end_index], function(x) as.numeric(strsplit(x, " ")[[1]]))), stringsAsFactors = FALSE)
1701818604663:})
1701818604766:names(map_list) <- gsub(" map:", "", map_names)
1701818612992:# Part 2
1701818613004:#### Reverse the order of the process.
1701818613016:# Start from 0, look for match at end
1701818613029:# Set column names for each dataframe
1701818613047:# Set column names for each dataframe
1701818613056:map_list <- lapply(map_list, setNames, c("start", "dest", "range"))
1701818613071:seeds <- as.numeric(unlist(strsplit(data[1], " "))[-1])
1701818613081:seeds.new <- c()
1701818613098:for(i in 1:(length(seeds)/2)){
1701818613106:seeds.new[[i]] <- c(seeds[(i*2)-1],
1701818613115:(seeds[(i*2)-1] + seeds[(i*2)] - 1))
1701818613124:}
1701818613145:# Making paralellized
1701818613158:cores=detectCores()
1701818613173:cl <- makeCluster(cores[1]-2)
1701818614270:registerDoParallel(cl)
1701818614295:# Make the if statment look for a greater/less than combo
1701818614306:timer.start <- Sys.time()
1701818614323:foreach(i = 1:10^4) %dopar% {
1701818614332:location <- i
1701818614344:print(i)
1701818614356:for(rule_groups in rev(1:length(map_list))){
1701818614370:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818614387:# Get rule parameters
1701818614404:# Start is where we'll start to look for our 'i' value
1701818614422:start <- map_list[[rule_groups]][rule, 'start']
1701818614433:# End is the tail end of where we'll look
1701818614446:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818614457:# Delta is how much we'll add to 'i' if its between start and end
1701818614469:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818614492:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818614509:if(i >= start & i <= end){
1701818614518:i <- (i + delta)
1701818614527:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818614538:break # exit the rule level if a condition is met
1701818614549:}
1701818614561:}
1701818614573:}
1701818614584:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818614595:print(paste("The lowest number is", location, "which comes from location", i ))
1701818614606:answer2 <- location
1701818614616:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818614626:}
1701818614644:}
1701818632215:end <- Sys.time()
1701818632421:timer.start - end
1701818687655:timer.start <- Sys.time()
1701818687675:foreach(i = 1:10^4) %dopar% {
1701818687689:location <- i
1701818687701:print(i)
1701818687712:for(rule_groups in rev(1:length(map_list))){
1701818687724:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818687737:# Get rule parameters
1701818687748:# Start is where we'll start to look for our 'i' value
1701818687761:start <- map_list[[rule_groups]][rule, 'start']
1701818687772:# End is the tail end of where we'll look
1701818687783:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818687795:# Delta is how much we'll add to 'i' if its between start and end
1701818687806:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818687825:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818687844:if(i >= start & i <= end){
1701818687855:i <- (i + delta)
1701818687866:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818687876:break # exit the rule level if a condition is met
1701818687887:}
1701818687897:}
1701818687908:}
1701818687920:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818687931:print(paste("The lowest number is", location, "which comes from location", i ))
1701818687941:answer2 <- location
1701818687952:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818687962:}
1701818687978:}
1701818708995:end <- Sys.time()
1701818709174:partime<-timer.start - end
1701818709379:# Make the if statment look for a greater/less than combo
1701818709503:timer.start <- Sys.time()
1701818709755:for(i in 1:10^4)  {
1701818709883:location <- i
1701818709993:print(i)
1701818710072:for(rule_groups in rev(1:length(map_list))){
1701818710175:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818710276:# Get rule parameters
1701818710403:# Start is where we'll start to look for our 'i' value
1701818710584:start <- map_list[[rule_groups]][rule, 'start']
1701818710688:# End is the tail end of where we'll look
1701818710778:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818710860:# Delta is how much we'll add to 'i' if its between start and end
1701818710951:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818711137:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818711312:if(i >= start & i <= end){
1701818711431:i <- (i + delta)
1701818711564:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818711676:break # exit the rule level if a condition is met
1701818711771:}
1701818711881:}
1701818711965:}
1701818712073:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818712157:print(paste("The lowest number is", location, "which comes from location", i ))
1701818712264:answer2 <- location
1701818712390:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818712525:}
1701818712681:}
1701818770183:end <- Sys.time()
1701818770207:timer.start - end
1701818812558:partime
1701818821375:foreach(i = 1:10^4) %dopar% {
1701818821388:location <- i
1701818821401:print(i)
1701818821412:for(rule_groups in rev(1:length(map_list))){
1701818821423:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818821436:# Get rule parameters
1701818821446:# Start is where we'll start to look for our 'i' value
1701818821457:start <- map_list[[rule_groups]][rule, 'start']
1701818821470:# End is the tail end of where we'll look
1701818821480:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818821490:# Delta is how much we'll add to 'i' if its between start and end
1701818821499:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818821515:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818821528:if(i >= start & i <= end){
1701818821535:i <<- (i + delta)
1701818821543:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818821551:break # exit the rule level if a condition is met
1701818821561:}
1701818821572:}
1701818821583:}
1701818821594:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818821605:print(paste("The lowest number is", location, "which comes from location", i ))
1701818821614:answer2 <- location
1701818821625:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818821635:}
1701818821649:}
1701818834262:end <- Sys.time()
1701818834289:partime<-timer.start - end
1701818855276:partime
1701818860473:# Make the if statment look for a greater/less than combo
1701818860490:timer.start <- Sys.time()
1701818860508:foreach(i = 1:10^4) %dopar% {
1701818860518:location <- i
1701818860527:print(i)
1701818860536:for(rule_groups in rev(1:length(map_list))){
1701818860547:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818860557:# Get rule parameters
1701818860569:# Start is where we'll start to look for our 'i' value
1701818860581:start <- map_list[[rule_groups]][rule, 'start']
1701818860594:# End is the tail end of where we'll look
1701818860605:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818860617:# Delta is how much we'll add to 'i' if its between start and end
1701818860629:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818860648:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818860665:if(i >= start & i <= end){
1701818860676:i <<- (i + delta)
1701818860685:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818860694:break # exit the rule level if a condition is met
1701818860705:}
1701818860715:}
1701818860723:}
1701818860732:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818860743:print(paste("The lowest number is", location, "which comes from location", i ))
1701818860753:answer2 <- location
1701818860764:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818860775:}
1701818860791:}
1701818873323:end <- Sys.time()
1701818873377:partime<-timer.start - end
1701818878913:partime
1701818940797:partime*(10^7/10^4)
1701818963649:foreach(i = 1:10^4) %dopar% {
1701818963661:location <- i
1701818963675:print(i)
1701818963686:for(rule_groups in rev(1:length(map_list))){
1701818963697:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818963714:# Get rule parameters
1701818963727:# Start is where we'll start to look for our 'i' value
1701818963744:start <- map_list[[rule_groups]][rule, 'start']
1701818963758:# End is the tail end of where we'll look
1701818963775:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818963792:# Delta is how much we'll add to 'i' if its between start and end
1701818963809:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818963828:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818963850:if(i >= start & i <= end){
1701818963861:i <<- (i + delta)
1701818963876:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818963888:break # exit the rule level if a condition is met
1701818963899:}
1701818963916:}
1701818963929:}
1701818963946:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818963959:print(paste("The lowest number is", location, "which comes from location", i ))
1701818963975:answer2 <- location
1701818963986:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818963998:}
1701818964019:}
1701818976245:end <- Sys.time()
1701818976255:partime<-timer.start - end
1701818985174:partime
1701818990504:# Make the if statment look for a greater/less than combo
1701818990521:timer.start <- Sys.time()
1701818990542:foreach(i = 1:10^4) %dopar% {
1701818990556:location <- i
1701818990566:print(i)
1701818990577:for(rule_groups in rev(1:length(map_list))){
1701818990587:for(rule in 1:nrow(map_list[[rule_groups]])){
1701818990596:# Get rule parameters
1701818990606:# Start is where we'll start to look for our 'i' value
1701818990618:start <- map_list[[rule_groups]][rule, 'start']
1701818990628:# End is the tail end of where we'll look
1701818990640:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701818990654:# Delta is how much we'll add to 'i' if its between start and end
1701818990667:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701818990696:#print(paste("Checking if", i, "falls between", start, "and", end))
1701818990721:if(i >= start & i <= end){
1701818990733:i <<- (i + delta)
1701818990746:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701818990759:break # exit the rule level if a condition is met
1701818990773:}
1701818990791:}
1701818990805:}
1701818990819:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701818990834:print(paste("The lowest number is", location, "which comes from location", i ))
1701818990848:answer2 <- location
1701818990862:stop(paste("The lowest number is", location, "which comes from location", i ))
1701818990873:}
1701818990890:}
1701819007010:end <- Sys.time()
1701819007029:partime<-timer.start - end
1701819007040:partime
1701819044394:# Make the if statment look for a greater/less than combo
1701819044411:timer.start <- Sys.time()
1701819044430:foreach(i = 1:10^7) %dopar% {
1701819044441:location <- i
1701819044452:print(i)
1701819044461:for(rule_groups in rev(1:length(map_list))){
1701819044471:for(rule in 1:nrow(map_list[[rule_groups]])){
1701819044481:# Get rule parameters
1701819044492:# Start is where we'll start to look for our 'i' value
1701819044504:start <- map_list[[rule_groups]][rule, 'start']
1701819044513:# End is the tail end of where we'll look
1701819044523:end <- start + map_list[[rule_groups]][rule, 'range'] - 1
1701819044534:# Delta is how much we'll add to 'i' if its between start and end
1701819044543:delta <- map_list[[rule_groups]][rule, 'dest'] - start
1701819044558:#print(paste("Checking if", i, "falls between", start, "and", end))
1701819044573:if(i >= start & i <= end){
1701819044581:i <<- (i + delta)
1701819044590:#print(paste("It does!", "Adding", delta, "and", i-delta, "to get", i))
1701819044600:break # exit the rule level if a condition is met
1701819044611:}
1701819044623:}
1701819044633:}
1701819044647:if(any(sapply(seeds.new, function(range) i >= range[1] && i <= range[2]))){
1701819044660:print(paste("The lowest number is", location, "which comes from location", i ))
1701819044674:answer2 <- location
1701819044692:stop(paste("The lowest number is", location, "which comes from location", i ))
1701819044709:}
1701819044733:}
