{
    "type": [
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "+ ",
        "  arrange(X2, desc = T)",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4\n1  2  1  9  2 12 3 1 0 765    1 0\n2  9  4  4  0  4 1 0 0 684    2 1\n3 12  9  0  0  9 1 0 0 220    4 1\n4 11 11 11  0 13 1 0 0 483    5 1\n5 12 12  5  6  6 1 2 0  28    3 0\n",
        "> ",
        "  df.2 |>",
        "+ ",
        "  arrange(X3, desc = T)",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4\n1 12  9  0  0  9 1 0 0 220    4 1\n2  9  4  4  0  4 1 0 0 684    2 1\n3 12 12  5  6  6 1 2 0  28    3 0\n4  2  1  9  2 12 3 1 0 765    1 0\n5 11 11 11  0 13 1 0 0 483    5 1\n",
        "> ",
        "# Turn jokers into 0s ",
        "> ",
        "as.numeric(df.2$X1)",
        "[1]  2 12  9 12 11\n",
        "> ",
        "# Turn jokers into 0s ",
        "> ",
        "as.numeric(df.2[,c(1:3)])",
        "Error: 'list' object cannot be coerced to type 'double'\n",
        "> ",
        "# Turn jokers into 0s ",
        "> ",
        "numeric(df.2[,c(1:3)])",
        "Error in numeric(df.2[, c(1:3)]) : invalid 'length' argument\n",
        "> ",
        "df.ordered.2",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4\n1  2  1  9  2 12 3 1 0 765    1 0\n2 12 12  5  6  6 1 2 0  28    3 0\n3  9  4  4  0  4 1 0 0 684    2 1\n4 12  9  0  0  9 1 0 0 220    4 1\n5 11 11 11  0 13 1 0 0 483    5 1\n",
        "> ",
        "View(df.2)",
        "> ",
        "  df.2 |>",
        "+ ",
        "  arrange(desc(X3))",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4\n1 11 11 11  0 13 1 0 0 483    5 1\n2  2  1  9  2 12 3 1 0 765    1 0\n3 12 12  5  6  6 1 2 0  28    3 0\n4  9  4  4  0  4 1 0 0 684    2 1\n5 12  9  0  0  9 1 0 0 220    4 1\n",
        "> ",
        "  df.2 |>",
        "+ ",
        "  arrange(desc(X3, X1))",
        "\u001B[1m\u001B[33mError\u001B[39m in `arrange()`:\u001B[22m\n\u001B[38;5;255m\u001B[33m!\u001B[38;5;255m `desc()` must be called with exactly one argument.\u001B[39m\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "  df.2 |>",
        "+ ",
        "  arrange(X3, decreasing = TRUE)",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4\n1 12  9  0  0  9 1 0 0 220    4 1\n2  9  4  4  0  4 1 0 0 684    2 1\n3 12 12  5  6  6 1 2 0  28    3 0\n4  2  1  9  2 12 3 1 0 765    1 0\n5 11 11 11  0 13 1 0 0 483    5 1\n",
        "> ",
        "  df.2 |>",
        "+ ",
        "  arrange(desc(`4`))",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4\n1  9  4  4  0  4 1 0 0 684    2 1\n2 12  9  0  0  9 1 0 0 220    4 1\n3 11 11 11  0 13 1 0 0 483    5 1\n4  2  1  9  2 12 3 1 0 765    1 0\n5 12 12  5  6  6 1 2 0  28    3 0\n",
        "> ",
        "  df.2 |>",
        "+ ",
        "  arrange(desc(`4`), desc(`3`), desc(`2`),",
        "+ ",
        "          desc(`1`), desc(X1),  desc(X2),",
        "+ ",
        "          desc(X3),  desc(X4),  desc(X5))",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4\n1 12  9  0  0  9 1 0 0 220    4 1\n2 11 11 11  0 13 1 0 0 483    5 1\n3  9  4  4  0  4 1 0 0 684    2 1\n4 12 12  5  6  6 1 2 0  28    3 0\n5  2  1  9  2 12 3 1 0 765    1 0\n",
        "> ",
        "df.ordered.2  <- df.2 |>",
        "+ ",
        "  arrange(desc(`4`), desc(`3`), desc(`2`),",
        "+ ",
        "          desc(`1`), desc(X1),  desc(X2),",
        "+ ",
        "          desc(X3),  desc(X4),  desc(X5))",
        "> ",
        "#Set order",
        "> ",
        "df.ordered.2$rank <- seq(1,nrow(df.ordered.2), 1)",
        "> ",
        "answer2 <- df.ordered.2 %>% ",
        "+ ",
        "  mutate(score = as.numeric(bet)*rank) %>% ",
        "+ ",
        "  pull(score) %>% ",
        "+ ",
        "  sum()",
        "> ",
        "answer2",
        "[1] 7175\n",
        "> ",
        "df.ordered.2  <- df.2 |>",
        "+ ",
        "  arrange(desc(`4`), desc(`3`), desc(`2`),",
        "+ ",
        "          desc(`1`), desc(X1),  desc(X2),",
        "+ ",
        "          desc(X3),  desc(X4),  desc(X5))",
        "> ",
        "#Set order",
        "> ",
        "df.ordered.2$rank <- seq(1,nrow(df.ordered.2), 1)",
        "> ",
        "answer2 <- df.ordered.2 %>% ",
        "+ ",
        "  mutate(score = as.numeric(bet)*rank) %>% ",
        "+ ",
        "  pull(score) %>% ",
        "+ ",
        "  sum()",
        "> ",
        "df.ordered.2",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4 rank\n1 12  9  0  0  9 1 0 0 220    4 1    1\n2 11 11 11  0 13 1 0 0 483    5 1    2\n3  9  4  4  0  4 1 0 0 684    2 1    3\n4 12 12  5  6  6 1 2 0  28    3 0    4\n5  2  1  9  2 12 3 1 0 765    1 0    5\n",
        "> ",
        "df.ordered.2  <- df.2 |>",
        "+ ",
        "  arrange(desc(`4`), desc(`3`), desc(`2`),",
        "+ ",
        "          desc(`1`))#, desc(X1),  desc(X2),",
        "> ",
        "df.ordered.2",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4\n1  9  4  4  0  4 1 0 0 684    2 1\n2 12  9  0  0  9 1 0 0 220    4 1\n3 11 11 11  0 13 1 0 0 483    5 1\n4 12 12  5  6  6 1 2 0  28    3 0\n5  2  1  9  2 12 3 1 0 765    1 0\n",
        "> ",
        "df.ordered.2  <- df.2 |>",
        "+ ",
        "  arrange(desc(`4`), desc(`3`), desc(`2`),",
        "+ ",
        "          desc(`1`), desc(X1),  desc(X2),",
        "+ ",
        "          desc(X3),  desc(X4),  desc(X5))",
        "> ",
        "#Set order",
        "> ",
        "df.ordered.2$rank <- seq(1,nrow(df.ordered.2), 1)",
        "> ",
        "df.ordered.2",
        "  X1 X2 X3 X4 X5 1 2 3 bet hand 4 rank\n1 12  9  0  0  9 1 0 0 220    4 1    1\n2 11 11 11  0 13 1 0 0 483    5 1    2\n3  9  4  4  0  4 1 0 0 684    2 1    3\n4 12 12  5  6  6 1 2 0  28    3 0    4\n5  2  1  9  2 12 3 1 0 765    1 0    5\n",
        "> ",
        "#Set order",
        "> ",
        "df.ordered.2$rank <- rev(seq(1,nrow(df.ordered.2), 1))",
        "> ",
        "answer2 <- df.ordered.2 %>% ",
        "+ ",
        "  mutate(score = as.numeric(bet)*rank) %>% ",
        "+ ",
        "  pull(score) %>% ",
        "+ ",
        "  sum()",
        "> ",
        "answer2",
        "[1] 5905\n",
        "> ",
        "data <- readLines(\"data/input_7.txt\")",
        "> ",
        "data <- readLines(\"data/input_7.txt\")",
        "> ",
        "",
        "> ",
        "# Add bets",
        "> ",
        "hand <- lapply(strsplit(data, \" \"), \"[[\", 1)",
        "> ",
        "# Parse data",
        "> ",
        "df <- data.frame(do.call(\"rbind\", strsplit(as.character(hand), \"\",",
        "+ ",
        "                                     fixed = TRUE)))",
        "> ",
        "# Make df to convert cards to value tier",
        "> ",
        "cards <- c('A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2')",
        "> ",
        "value.df <- data.frame(cards = cards, value = rev(seq(1, length(cards), 1)))",
        "> ",
        "",
        "> ",
        "# Replace characters in df, using value.df as a dictionary",
        "> ",
        "df <- apply(df, 2, function(column) {",
        "+ ",
        "  # Use 'match' to find the positions of 'df' elements in 'value.df'",
        "+ ",
        "  matched_positions <- match(column, value.df$cards)",
        "+ ",
        "  # Replace the positions with the corresponding values from 'value.df'",
        "+ ",
        "  value.df$value[matched_positions]",
        "+ ",
        "}) |> as.data.frame()",
        "> ",
        "",
        "> ",
        "# Get duplicates",
        "> ",
        "df <- lapply(apply(df, 1, table),function(x){table(x) %>% as.list()}) %>% ",
        "+ ",
        "  rbindlist(fill = T) %>% ",
        "+ ",
        "  cbind(df, .)",
        "> ",
        "",
        "> ",
        "# Add bets",
        "> ",
        "df$bet <- sapply(strsplit(data, \" \"), \"[[\", 2)",
        "> ",
        "",
        "> ",
        "# Add hand # ",
        "> ",
        "df$hand <- seq(1,nrow(df), 1)",
        "> ",
        "# Part 2",
        "> ",
        "# Make Jokers raise the value of the max in 1:5",
        "> ",
        "df.jokers <- df[apply(df, 1, function(x) any(x == 10)), ]",
        "> ",
        "",
        "> ",
        "# Find most common numbers",
        "> ",
        "# if there are two twos, reference the higher",
        "> ",
        "df.hands <- df.jokers[,c(1:5)] ",
        "> ",
        "# Make temp df with jokers converted to best cards",
        "> ",
        "for(i in 1:nrow(df.hands)){",
        "+ ",
        "target.value <- table(unlist(df.hands[i,])) %>% subset(. == max(.)) %>% subset(names(.) == max(names(.))) %>% names()",
        "+ ",
        "df.hands[i,which(df.hands[i,] == 10)] <- as.numeric(target.value)",
        "+ ",
        "}",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "",
        "> ",
        "# Get duplicates and add back id and bet info",
        "> ",
        "df.2 <- apply(apply(df.hands, 1, table),2,  function(x){table(x) %>% as.list()}) %>% ",
        "+ ",
        "  rbindlist(fill = T) %>% ",
        "+ ",
        "  cbind(df.jokers[,c(1:5)], .) ",
        "Error in apply(apply(df.hands, 1, table), 2, function(x) { : \n  dim(X) must have a positive length\n",
        "> ",
        "# Part 2",
        "> ",
        "# Make Jokers raise the value of the max in 1:5",
        "> ",
        "df.jokers <- df[apply(df, 1, function(x) any(x == 10)), ]",
        "> ",
        "df.jokers",
        "      X1 X2 X3 X4 X5  1  3  4  2  5  bet hand\nNA    NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.1  NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.2  NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.3  NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.4  NA NA NA NA NA NA NA NA NA NA <NA>   NA\n6     10  5 13  2  2  3 NA NA  1 NA  975    6\n7     10  6  4  2 11  5 NA NA NA NA  772    7\nNA.5  NA NA NA NA NA NA NA NA NA NA <NA>   NA\n9     10  3  3  8  3  2  1 NA NA NA  215    9\n10    13  1  4 10 10  3 NA NA  1 NA  101   10\nNA.6  NA",
        " NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.7  NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.8  NA NA NA NA NA NA NA NA NA NA <NA>   NA\n14     7 13  7  7 10  2  1 NA NA NA  928   14\nNA.9  NA NA NA NA NA NA NA NA NA NA <NA>   NA\n16     9 10 10 11  3  3 NA NA  1 NA  719   16\n17     2  2  2 10  9  2  1 NA NA NA  489   17\nNA.10 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.11 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n20     4  4 10  2  2  1 NA NA  2 NA  897   20\nNA.12 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.13 NA NA NA",
        " NA NA NA NA NA NA NA <NA>   NA\nNA.14 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.15 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.16 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n26    10  8 10  8  8 NA  1 NA  1 NA  680   26\nNA.17 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n28    10  2  6  3  8  5 NA NA NA NA  432   28\nNA.18 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.19 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.20 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.21 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.22 NA NA NA NA NA",
        " NA NA NA NA NA <NA>   NA\nNA.23 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.24 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n36     1  1 10 11  1  2  1 NA NA NA  522   36\nNA.25 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.26 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.27 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.28 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.29 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.30 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n43     5 10  6  5 12  3 NA NA  1 NA  581   43\nNA.31 NA NA NA NA NA NA NA",
        " NA NA NA <NA>   NA\nNA.32 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.33 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n47     7 11  8  2 10  5 NA NA NA NA  872   47\nNA.34 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.35 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n50    10  2  2  3  6  3 NA NA  1 NA  755   50\nNA.36 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.37 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n53    12  7  7 11 10  3 NA NA  1 NA  707   53\nNA.38 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.39 NA NA NA NA NA NA NA NA NA",
        " NA <NA>   NA\nNA.40 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.41 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.42 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.43 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.44 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n61    10  8  8  8  5  2  1 NA NA NA  392   61\nNA.45 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.46 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n64     7  4 10  2  4  3 NA NA  1 NA  763   64\nNA.47 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.48 NA NA NA NA NA NA NA NA NA NA <NA>",
        "   NA\nNA.49 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.50 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.51 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.52 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.53 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.54 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.55 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.56 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n75     7 10  7  7 10 NA  1 NA  1 NA  686   75\nNA.57 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n77    10  2  3  3 10  1 NA NA  2 NA  321   77\nNA.58",
        " NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.59 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.60 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n81     9  3  9  6 10  3 NA NA  1 NA  476   81\nNA.61 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.62 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n [ reached 'max' / getOption(\"max.print\") -- omitted 917 rows ]\n",
        "> ",
        "# Part 2",
        "> ",
        "# Make Jokers raise the value of the max in 1:5",
        "> ",
        "df.jokers <- df[apply(df, 1, function(x) any(x == 10)), ]",
        "> ",
        "df.jokers",
        "      X1 X2 X3 X4 X5  1  3  4  2  5  bet hand\nNA    NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.1  NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.2  NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.3  NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.4  NA NA NA NA NA NA NA NA NA NA <NA>   NA\n6     10  5 13  2  2  3 NA NA  1 NA  975    6\n7     10  6  4  2 11  5 NA NA NA NA  772    7\nNA.5  NA NA NA NA NA NA NA NA NA NA <NA>   NA\n9     10  3  3  8  3  2  1 NA NA NA  215    9\n10    13  1  4 10 10  3 NA NA  1 NA  101   10\nNA.6  NA",
        " NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.7  NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.8  NA NA NA NA NA NA NA NA NA NA <NA>   NA\n14     7 13  7  7 10  2  1 NA NA NA  928   14\nNA.9  NA NA NA NA NA NA NA NA NA NA <NA>   NA\n16     9 10 10 11  3  3 NA NA  1 NA  719   16\n17     2  2  2 10  9  2  1 NA NA NA  489   17\nNA.10 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.11 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n20     4  4 10  2  2  1 NA NA  2 NA  897   20\nNA.12 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.13 NA NA NA",
        " NA NA NA NA NA NA NA <NA>   NA\nNA.14 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.15 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.16 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n26    10  8 10  8  8 NA  1 NA  1 NA  680   26\nNA.17 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n28    10  2  6  3  8  5 NA NA NA NA  432   28\nNA.18 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.19 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.20 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.21 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.22 NA NA NA NA NA",
        " NA NA NA NA NA <NA>   NA\nNA.23 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.24 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n36     1  1 10 11  1  2  1 NA NA NA  522   36\nNA.25 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.26 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.27 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.28 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.29 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.30 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n43     5 10  6  5 12  3 NA NA  1 NA  581   43\nNA.31 NA NA NA NA NA NA NA",
        " NA NA NA <NA>   NA\nNA.32 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.33 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n47     7 11  8  2 10  5 NA NA NA NA  872   47\nNA.34 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.35 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n50    10  2  2  3  6  3 NA NA  1 NA  755   50\nNA.36 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.37 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n53    12  7  7 11 10  3 NA NA  1 NA  707   53\nNA.38 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.39 NA NA NA NA NA NA NA NA NA",
        " NA <NA>   NA\nNA.40 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.41 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.42 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.43 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.44 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n61    10  8  8  8  5  2  1 NA NA NA  392   61\nNA.45 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.46 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n64     7  4 10  2  4  3 NA NA  1 NA  763   64\nNA.47 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.48 NA NA NA NA NA NA NA NA NA NA <NA>",
        "   NA\nNA.49 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.50 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.51 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.52 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.53 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.54 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.55 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.56 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n75     7 10  7  7 10 NA  1 NA  1 NA  686   75\nNA.57 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n77    10  2  3  3 10  1 NA NA  2 NA  321   77\nNA.58",
        " NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.59 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.60 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n81     9  3  9  6 10  3 NA NA  1 NA  476   81\nNA.61 NA NA NA NA NA NA NA NA NA NA <NA>   NA\nNA.62 NA NA NA NA NA NA NA NA NA NA <NA>   NA\n [ reached 'max' / getOption(\"max.print\") -- omitted 917 rows ]\n",
        "> ",
        "data <- readLines(\"data/input_7.txt\")",
        "> ",
        "",
        "> ",
        "# Add bets",
        "> ",
        "hand <- lapply(strsplit(data, \" \"), \"[[\", 1)",
        "> ",
        "# Parse data",
        "> ",
        "df <- data.frame(do.call(\"rbind\", strsplit(as.character(hand), \"\",",
        "+ ",
        "                                     fixed = TRUE)))",
        "> ",
        "# Make df to convert cards to value tier",
        "> ",
        "cards <- c('A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2')",
        "> ",
        "value.df <- data.frame(cards = cards, value = rev(seq(1, length(cards), 1)))",
        "> ",
        "",
        "> ",
        "# Replace characters in df, using value.df as a dictionary",
        "> ",
        "df <- apply(df, 2, function(column) {",
        "+ ",
        "  # Use 'match' to find the positions of 'df' elements in 'value.df'",
        "+ ",
        "  matched_positions <- match(column, value.df$cards)",
        "+ ",
        "  # Replace the positions with the corresponding values from 'value.df'",
        "+ ",
        "  value.df$value[matched_positions]",
        "+ ",
        "}) |> as.data.frame()",
        "> ",
        "",
        "> ",
        "# Get duplicates",
        "> ",
        "df <- lapply(apply(df, 1, table),function(x){table(x) %>% as.list()}) %>% ",
        "+ ",
        "  rbindlist(fill = T) %>% ",
        "+ ",
        "  cbind(df, .)",
        "> ",
        "",
        "> ",
        "# Add bets",
        "> ",
        "df$bet <- sapply(strsplit(data, \" \"), \"[[\", 2)",
        "> ",
        "",
        "> ",
        "# Add hand # ",
        "> ",
        "df$hand <- seq(1,nrow(df), 1)",
        "> ",
        "df",
        "   X1 X2 X3 X4 X5  1  3  4  2  5  bet hand\n1   7  3  3  3  9  2  1 NA NA NA  864    1\n2   5  9 12  3 11  5 NA NA NA NA  440    2\n3  13  4  4  4  4  1 NA  1 NA NA  197    3\n4   4  2  2  4  2 NA  1 NA  1 NA  712    4\n5   5 12  5  7 13  3 NA NA  1 NA  216    5\n6  10  5 13  2  2  3 NA NA  1 NA  975    6\n7  10  6  4  2 11  5 NA NA NA NA  772    7\n8   1  1  6  6  5  1 NA NA  2 NA  977    8\n9  10  3  3  8  3  2  1 NA NA NA  215    9\n10 13  1  4 10 10  3 NA NA  1 NA  101   10\n11 13 13 13  2 13  1 NA  1 NA NA  637   11",
        "\n12  9  9  2 12 12  1 NA NA  2 NA 1000   12\n13  9  6  9  5  6  1 NA NA  2 NA  895   13\n14  7 13  7  7 10  2  1 NA NA NA  928   14\n15  9  9 12 12  9 NA  1 NA  1 NA   29   15\n16  9 10 10 11  3  3 NA NA  1 NA  719   16\n17  2  2  2 10  9  2  1 NA NA NA  489   17\n18 11  8 13 11 11  2  1 NA NA NA  492   18\n19  9 12  2  7  3  5 NA NA NA NA  543   19\n20  4  4 10  2  2  1 NA NA  2 NA  897   20\n21 11  1  5 11 11  2  1 NA NA NA  549   21\n22  9  9 12 12  4  1 NA NA  2 NA  254   22\n23  9  8  8  9  8 NA  1 NA  1 NA  530   23",
        "\n24  7  6  7  7  7  1 NA  1 NA NA  851   24\n25  1  6  7  1  7  1 NA NA  2 NA  896   25\n26 10  8 10  8  8 NA  1 NA  1 NA  680   26\n27 12  6 12 13  1  3 NA NA  1 NA  843   27\n28 10  2  6  3  8  5 NA NA NA NA  432   28\n29  6  9 13  3  8  5 NA NA NA NA  839   29\n30  9  3  3  5  5  1 NA NA  2 NA  266   30\n31  6  6 11 11  6 NA  1 NA  1 NA  534   31\n32  3  3 13 13 13 NA  1 NA  1 NA  540   32\n33 11  3 11  3  3 NA  1 NA  1 NA  330   33\n34  6  9 12  7  7  3 NA NA  1 NA  736   34\n35  9  6  3  6  8  3 NA NA  1 NA  705   35",
        "\n36  1  1 10 11  1  2  1 NA NA NA  522   36\n37  6  6  1  1  6 NA  1 NA  1 NA  597   37\n38  4  4  4  4  9  1 NA  1 NA NA  296   38\n39  2  2  2  3  7  2  1 NA NA NA  203   39\n40 13  1  5  1  3  3 NA NA  1 NA  767   40\n41  7  9 12  7  7  2  1 NA NA NA   41   41\n42  3  9 12  6 13  5 NA NA NA NA  869   42\n43  5 10  6  5 12  3 NA NA  1 NA  581   43\n44  6  9  3  6  9  1 NA NA  2 NA  629   44\n45  8 11 13  3  8  3 NA NA  1 NA  302   45\n46 12 12  6 12  6 NA  1 NA  1 NA  588   46\n47  7 11  8  2 10  5 NA NA NA NA  872   47",
        "\n48 13  8  6 11  3  5 NA NA NA NA  235   48\n49 13  3 13  3  4  1 NA NA  2 NA  343   49\n50 10  2  2  3  6  3 NA NA  1 NA  755   50\n51  3  9  3  3  3  1 NA  1 NA NA  909   51\n52  8 13  8  8  8  1 NA  1 NA NA  125   52\n53 12  7  7 11 10  3 NA NA  1 NA  707   53\n54  6  3  3  6  3 NA  1 NA  1 NA  953   54\n55 13  9 11 11  9  1 NA NA  2 NA  155   55\n56  2  1  1  3  1  2  1 NA NA NA  569   56\n57  3  3  7  7  7 NA  1 NA  1 NA  634   57\n58  1  1  3  1  8  2  1 NA NA NA  882   58\n59  1 11 13  7  3  5 NA NA NA NA  602   59",
        "\n60  9 11  9 11  3  1 NA NA  2 NA  974   60\n61 10  8  8  8  5  2  1 NA NA NA  392   61\n62  4  7  4  1 11  3 NA NA  1 NA  601   62\n63 12  4  3  3  3  2  1 NA NA NA  833   63\n64  7  4 10  2  4  3 NA NA  1 NA  763   64\n65  9  7  1  7  1  1 NA NA  2 NA  504   65\n66  3 12 13 12 12  2  1 NA NA NA  539   66\n67  1  1  2  2  9  1 NA NA  2 NA   68   67\n68 13 13  7 13 11  2  1 NA NA NA  223   68\n69  2  1  5 13  2  3 NA NA  1 NA  208   69\n70  9  8  4  4  9  1 NA NA  2 NA  319   70\n71 13  2 11  2 13  1 NA NA  2 NA  776   71",
        "\n72  4  5 11 12 13  5 NA NA NA NA  230   72\n73  9  5  2  9  5  1 NA NA  2 NA  566   73\n74 11 13  2  5 11  3 NA NA  1 NA  923   74\n75  7 10  7  7 10 NA  1 NA  1 NA  686   75\n76  8 12  4  9  6  5 NA NA NA NA   93   76\n77 10  2  3  3 10  1 NA NA  2 NA  321   77\n78 13 13  7 13 13  1 NA  1 NA NA  559   78\n79  7  7  6  6  6 NA  1 NA  1 NA  448   79\n80  6  5  5  6 12  1 NA NA  2 NA  487   80\n81  9  3  9  6 10  3 NA NA  1 NA  476   81\n82  7 11  3 11  4  3 NA NA  1 NA  542   82\n83 12 12  4  4  4 NA  1 NA  1 NA  699   83",
        "\n [ reached 'max' / getOption(\"max.print\") -- omitted 917 rows ]\n",
        "> ",
        "df[is.na(df)] <- 0",
        "> ",
        "df",
        "   X1 X2 X3 X4 X5 1 3 4 2 5  bet hand\n1   7  3  3  3  9 2 1 0 0 0  864    1\n2   5  9 12  3 11 5 0 0 0 0  440    2\n3  13  4  4  4  4 1 0 1 0 0  197    3\n4   4  2  2  4  2 0 1 0 1 0  712    4\n5   5 12  5  7 13 3 0 0 1 0  216    5\n6  10  5 13  2  2 3 0 0 1 0  975    6\n7  10  6  4  2 11 5 0 0 0 0  772    7\n8   1  1  6  6  5 1 0 0 2 0  977    8\n9  10  3  3  8  3 2 1 0 0 0  215    9\n10 13  1  4 10 10 3 0 0 1 0  101   10\n11 13 13 13  2 13 1 0 1 0 0  637   11\n12  9  9  2 12 12 1 0 0 2 0 1000   12\n13  9  6  9  5  6 1",
        " 0 0 2 0  895   13\n14  7 13  7  7 10 2 1 0 0 0  928   14\n15  9  9 12 12  9 0 1 0 1 0   29   15\n16  9 10 10 11  3 3 0 0 1 0  719   16\n17  2  2  2 10  9 2 1 0 0 0  489   17\n18 11  8 13 11 11 2 1 0 0 0  492   18\n19  9 12  2  7  3 5 0 0 0 0  543   19\n20  4  4 10  2  2 1 0 0 2 0  897   20\n21 11  1  5 11 11 2 1 0 0 0  549   21\n22  9  9 12 12  4 1 0 0 2 0  254   22\n23  9  8  8  9  8 0 1 0 1 0  530   23\n24  7  6  7  7  7 1 0 1 0 0  851   24\n25  1  6  7  1  7 1 0 0 2 0  896   25\n26 10  8 10  8  8 0 1 0 1 0  680   26",
        "\n27 12  6 12 13  1 3 0 0 1 0  843   27\n28 10  2  6  3  8 5 0 0 0 0  432   28\n29  6  9 13  3  8 5 0 0 0 0  839   29\n30  9  3  3  5  5 1 0 0 2 0  266   30\n31  6  6 11 11  6 0 1 0 1 0  534   31\n32  3  3 13 13 13 0 1 0 1 0  540   32\n33 11  3 11  3  3 0 1 0 1 0  330   33\n34  6  9 12  7  7 3 0 0 1 0  736   34\n35  9  6  3  6  8 3 0 0 1 0  705   35\n36  1  1 10 11  1 2 1 0 0 0  522   36\n37  6  6  1  1  6 0 1 0 1 0  597   37\n38  4  4  4  4  9 1 0 1 0 0  296   38\n39  2  2  2  3  7 2 1 0 0 0  203   39\n40 13  1  5  1  3",
        " 3 0 0 1 0  767   40\n41  7  9 12  7  7 2 1 0 0 0   41   41\n42  3  9 12  6 13 5 0 0 0 0  869   42\n43  5 10  6  5 12 3 0 0 1 0  581   43\n44  6  9  3  6  9 1 0 0 2 0  629   44\n45  8 11 13  3  8 3 0 0 1 0  302   45\n46 12 12  6 12  6 0 1 0 1 0  588   46\n47  7 11  8  2 10 5 0 0 0 0  872   47\n48 13  8  6 11  3 5 0 0 0 0  235   48\n49 13  3 13  3  4 1 0 0 2 0  343   49\n50 10  2  2  3  6 3 0 0 1 0  755   50\n51  3  9  3  3  3 1 0 1 0 0  909   51\n52  8 13  8  8  8 1 0 1 0 0  125   52\n53 12  7  7 11 10 3 0 0 1 0  707   53",
        "\n54  6  3  3  6  3 0 1 0 1 0  953   54\n55 13  9 11 11  9 1 0 0 2 0  155   55\n56  2  1  1  3  1 2 1 0 0 0  569   56\n57  3  3  7  7  7 0 1 0 1 0  634   57\n58  1  1  3  1  8 2 1 0 0 0  882   58\n59  1 11 13  7  3 5 0 0 0 0  602   59\n60  9 11  9 11  3 1 0 0 2 0  974   60\n61 10  8  8  8  5 2 1 0 0 0  392   61\n62  4  7  4  1 11 3 0 0 1 0  601   62\n63 12  4  3  3  3 2 1 0 0 0  833   63\n64  7  4 10  2  4 3 0 0 1 0  763   64\n65  9  7  1  7  1 1 0 0 2 0  504   65\n66  3 12 13 12 12 2 1 0 0 0  539   66\n67  1  1  2  2  9",
        " 1 0 0 2 0   68   67\n68 13 13  7 13 11 2 1 0 0 0  223   68\n69  2  1  5 13  2 3 0 0 1 0  208   69\n70  9  8  4  4  9 1 0 0 2 0  319   70\n71 13  2 11  2 13 1 0 0 2 0  776   71\n72  4  5 11 12 13 5 0 0 0 0  230   72\n73  9  5  2  9  5 1 0 0 2 0  566   73\n74 11 13  2  5 11 3 0 0 1 0  923   74\n75  7 10  7  7 10 0 1 0 1 0  686   75\n76  8 12  4  9  6 5 0 0 0 0   93   76\n77 10  2  3  3 10 1 0 0 2 0  321   77\n78 13 13  7 13 13 1 0 1 0 0  559   78\n79  7  7  6  6  6 0 1 0 1 0  448   79\n80  6  5  5  6 12 1 0 0 2 0  487   80",
        "\n81  9  3  9  6 10 3 0 0 1 0  476   81\n82  7 11  3 11  4 3 0 0 1 0  542   82\n83 12 12  4  4  4 0 1 0 1 0  699   83\n [ reached 'max' / getOption(\"max.print\") -- omitted 917 rows ]\n",
        "> ",
        "# Part 2",
        "> ",
        "# Make Jokers raise the value of the max in 1:5",
        "> ",
        "df.jokers <- df[apply(df, 1, function(x) any(x == 10)), ]",
        "> ",
        "df.jokers",
        "    X1 X2 X3 X4 X5 1 3 4 2 5 bet hand\n6   10  5 13  2  2 3 0 0 1 0 975    6\n7   10  6  4  2 11 5 0 0 0 0 772    7\n9   10  3  3  8  3 2 1 0 0 0 215    9\n10  13  1  4 10 10 3 0 0 1 0 101   10\n14   7 13  7  7 10 2 1 0 0 0 928   14\n16   9 10 10 11  3 3 0 0 1 0 719   16\n17   2  2  2 10  9 2 1 0 0 0 489   17\n20   4  4 10  2  2 1 0 0 2 0 897   20\n26  10  8 10  8  8 0 1 0 1 0 680   26\n28  10  2  6  3  8 5 0 0 0 0 432   28\n36   1  1 10 11  1 2 1 0 0 0 522   36\n43   5 10  6  5 12 3 0 0 1 0 581   43\n47   7 11  8  2 10",
        " 5 0 0 0 0 872   47\n50  10  2  2  3  6 3 0 0 1 0 755   50\n53  12  7  7 11 10 3 0 0 1 0 707   53\n61  10  8  8  8  5 2 1 0 0 0 392   61\n64   7  4 10  2  4 3 0 0 1 0 763   64\n75   7 10  7  7 10 0 1 0 1 0 686   75\n77  10  2  3  3 10 1 0 0 2 0 321   77\n81   9  3  9  6 10 3 0 0 1 0 476   81\n84   6 10  6  6  6 1 0 1 0 0 888   84\n86  12 11 10 13  8 5 0 0 0 0 764   86\n87   4  5  7  3 10 5 0 0 0 0 956   87\n89   9 13 10  3  8 5 0 0 0 0 697   89\n93   5  7  7 10  8 3 0 0 1 0 344   93\n97   1 10  1  1 10 0 1 0 1 0  39   97",
        "\n98  10  6  1  2  3 5 0 0 0 0 917   98\n99  10 10  1  1  4 1 0 0 2 0 100   99\n107 12 12 12  6 10 2 1 0 0 0 382  107\n108  7  9  7 10  9 1 0 0 2 0 290  108\n110 10  6  6 10  9 1 0 0 2 0 219  110\n119  9 10  2  9  9 2 1 0 0 0 865  119\n122  3  3  3 10  3 1 0 1 0 0 908  122\n124  6  1  1 10  1 2 1 0 0 0 582  124\n128 12  2  7 13 10 5 0 0 0 0 659  128\n132  1  8 10 11  6 5 0 0 0 0 366  132\n133  4  4  7 10  7 1 0 0 2 0 580  133\n135  5 10  9  9  9 2 1 0 0 0 951  135\n136  7 11  3 10  9 5 0 0 0 0  44  136\n137 12 12 11 12 10",
        " 2 1 0 0 0 903  137\n140 13  9  3 10  1 5 0 0 0 0 300  140\n142 10 10  5 11 11 1 0 0 2 0 214  142\n145 12 12 10  7 10 1 0 0 2 0 679  145\n149 12  5  3 10  5 3 0 0 1 0 297  149\n150  2  5 10  8  4 5 0 0 0 0 502  150\n151  7 13 10  9 13 3 0 0 1 0 498  151\n156  1 13 13 10 10 1 0 0 2 0 496  156\n158  1  9  8 10 11 5 0 0 0 0 113  158\n160  4 13  7 10  2 5 0 0 0 0  40  160\n162  5 12 13  1 10 5 0 0 0 0 748  162\n164  1  6 11 13 10 5 0 0 0 0 616  164\n173 10  9  9 10  1 1 0 0 2 0 808  173\n174  5 10  5 10  5 0 1 0 1 0  76  174",
        "\n176 10 11 10  2 11 1 0 0 2 0 610  176\n179  3 10 12 12 12 2 1 0 0 0 714  179\n182  3  2  2  1 10 3 0 0 1 0 514  182\n188  1 13 10  9  1 3 0 0 1 0 355  188\n189  7  3 12  3 10 3 0 0 1 0 890  189\n193  8 10  8  4  8 2 1 0 0 0 984  193\n195 10  7  7 12 12 1 0 0 2 0 906  195\n198 13  3  6 13 10 3 0 0 1 0 880  198\n200 10  1  1  7 10 1 0 0 2 0 817  200\n204 10  5  9  1 12 5 0 0 0 0 841  204\n205 12  3  8  1 10 5 0 0 0 0 408  205\n214  7 10  2 10  4 3 0 0 1 0 829  214\n216 10  4  6  6  4 1 0 0 2 0  78  216\n220  7 10  4  6  1",
        " 5 0 0 0 0 121  220\n223 10  9  7  7 10 1 0 0 2 0 661  223\n225  3 10  3  9  3 2 1 0 0 0 116  225\n227  2  2 10  4  5 3 0 0 1 0 249  227\n239 10  5  8  4  3 5 0 0 0 0   2  239\n240  5 10  9  5  5 2 1 0 0 0 642  240\n241  6 10 10  3  3 1 0 0 2 0 840  241\n243  7  7 11 10 11 1 0 0 2 0 509  243\n244  2  8 12  8 10 3 0 0 1 0 406  244\n247 10  8 11 11 11 2 1 0 0 0 109  247\n250  7  1  5 10  9 5 0 0 0 0 172  250\n253 12  8  2 10 12 3 0 0 1 0 669  253\n254 10  4 13 13  3 3 0 0 1 0 844  254\n259  6 11  6  6 10 2 1 0 0 0 822  259",
        "\n260  3 13  3 13 10 1 0 0 2 0 229  260\n264  9 12 10 11  6 5 0 0 0 0  48  264\n266  9  4 10  9 12 3 0 0 1 0  17  266\n [ reached 'max' / getOption(\"max.print\") -- omitted 261 rows ]\n",
        "> ",
        "# Find most common numbers",
        "> ",
        "# if there are two twos, reference the higher",
        "> ",
        "df.hands <- df.jokers[,c(1:5)] ",
        "> ",
        "# Make temp df with jokers converted to best cards",
        "> ",
        "for(i in 1:nrow(df.hands)){",
        "+ ",
        "target.value <- table(unlist(df.hands[i,])) %>% subset(. == max(.)) %>% subset(names(.) == max(names(.))) %>% names()",
        "+ ",
        "df.hands[i,which(df.hands[i,] == 10)] <- as.numeric(target.value)",
        "+ ",
        "}",
        "> ",
        "df.hands",
        "    X1 X2 X3 X4 X5\n6    2  5 13  2  2\n7    6  6  4  2 11\n9    3  3  3  8  3\n10  13  1  4 10 10\n14   7 13  7  7  7\n16   9 10 10 11  3\n17   2  2  2  2  9\n20   4  4  4  2  2\n26   8  8  8  8  8\n28   8  2  6  3  8\n36   1  1  1 11  1\n43   5  5  6  5 12\n47   7 11  8  2  8\n50   2  2  2  3  6\n53  12  7  7 11  7\n61   8  8  8  8  5\n64   7  4  4  2  4\n75   7  7  7  7  7\n77   3  2  3  3  3\n81   9  3  9  6  9\n84   6  6  6  6  6\n86  12 11  8 13  8\n87   4  5  7  3  7\n89   9 13  9  3  8\n93   5  7  7  7  8\n97   1  1  1  1  1",
        "\n98   6  6  1  2  3\n99  10 10  1  1  4\n107 12 12 12  6 12\n108  7  9  7  9  9\n110  6  6  6  6  9\n119  9  9  2  9  9\n122  3  3  3  3  3\n124  6  1  1  1  1\n128 12  2  7 13  7\n132  1  8  8 11  6\n133  4  4  7  7  7\n135  5  9  9  9  9\n136  7 11  3  9  9\n137 12 12 11 12 12\n140 13  9  3  9  1\n142 11 11  5 11 11\n145 12 12 12  7 12\n149 12  5  3  5  5\n150  2  5  8  8  4\n151  7 13 13  9 13\n156  1 13 13 13 13\n158  1  9  8  9 11\n160  4 13  7  7  2\n162  5 12 13  1  5\n164  1  6 11 13  6\n173  9  9  9  9  1\n174  5  5  5  5  5",
        "\n176 11 11 11  2 11\n179  3 12 12 12 12\n182  3  2  2  1  2\n188  1 13  1  9  1\n189  7  3 12  3  3\n193  8  8  8  4  8\n195  7  7  7 12 12\n198 13  3  6 13 13\n200 10  1  1  7 10\n204  9  5  9  1 12\n205 12  3  8  1  8\n214  7 10  2 10  4\n216  6  4  6  6  4\n220  7  7  4  6  1\n223  7  9  7  7  7\n225  3  3  3  9  3\n227  2  2  2  4  5\n239  8  5  8  4  3\n240  5  5  9  5  5\n241  6  3  3  3  3\n243  7  7 11  7 11\n244  2  8 12  8  8\n247 11  8 11 11 11\n250  7  1  5  9  9\n253 12  8  2 12 12\n254 13  4 13 13  3\n259  6 11  6  6  6",
        "\n260  3 13  3 13  3\n264  9 12  9 11  6\n266  9  4  9  9 12\n267  3  1 11  1  1\n271  3  3  3  7  3\n274 13 13  1  1 13\n275  9  7 13  9  9\n276 12  9 12 12 12\n280 11  4  4  4  9\n288 11 11  6 13 11\n290  7  5  7  7  7\n291 11 11 11 11 13\n297  1  6  6  4  6\n300  5  3  3  3 13\n304 12 12 12 12 12\n306 13 12 13 13 12\n309  6 12  6  6 12\n310  7  7  7  1  7\n312  8 12  3 12 12\n317  3  3 13  3  3\n319  7  7  7  7  7\n320 11 11 11 11  4\n321  3  4  4  5  4\n322 11 11 11 11 11\n323  3  1  1  1  1\n325 13 13 13  6 13\n327 11 13  1  1  1",
        "\n328 13 13 13 13 13\n329  9  9  4  5  1\n331  4  5  5  5  4\n333  1  6  2  4  6\n334  4 11  4  4  4\n345  6  6  6  5  6\n346 10 10 10 10 10\n347  6  4  6  6 13\n348  9 10  6  1 10\n351  8  5  5  4  5\n359  3  3  3  3  6\n361  4  4  1  4  9\n362 12 12 12  1  2\n367  8  8  8 11  8\n368 12  6  6 13  6\n374  2  2  5  2  2\n378  8  8  6  8  8\n380 13  3  8 13 13\n381  3  4  3  3  3\n382 12  1  8  8  4\n384  5  5  5  5  5\n386  2  2  6  6  6\n390  9  6  2  9 13\n391  1 11  8  8  5\n392  9 11 11 11 11\n398 11 11 11 11 11\n401  5  1  5  5  5",
        "\n402 12  4  6  6  3\n403  6  6 11  6  6\n408 13  8  4  4  4\n410 11 11 11 11  7\n411  8 11  9  9  9\n412  1  9  9 12  9\n413 13 13 11  1 13\n419  7  8  5  8  8\n427 13 13 13  2  4\n431  7  9  9  9  6\n432  9  3  3  2  3\n434 10  6 10  6 10\n435  6  6  6  1  6\n436  5  2  5  5  5\n439  4  4  4  5  4\n441  3  3 11 13  1\n443  3  3  1  3  3\n444  2 11  3  7  7\n445  4  4  3  8  4\n451  5 13  5  5 13\n452  5  7  4  5  5\n453 12 12 12  1  4\n458  2  2  2  8  2\n467  5 13 12  8  8\n469  6  3  7  7  7\n474  1  3  3  3  1\n476 10  2  5  6 10",
        "\n480 12  2  2  2 11\n482  2  2  2  4  2\n484 11 11  9 11  2\n485  2 13 13 13 13\n486  4 13 10  2 10\n487  9 11  2 10 10\n489  7  7 12  7  7\n493  7  9 13  3  9\n495  5  6  4  6 11\n496 13 13 13 13  4\n499  1  9  9  9  1\n506  9  7  7  3  7\n508  7  7  6  5 11\n511 13 12  5 13 13\n515 10 10  7 10 10\n517 12 10  5 10  7\n519  3  1  1  1  6\n521 11 11 11  8  9\n527  2  2  2  2  2\n530  4  4  4  1  6\n533 13 13 13 13  5\n534 13 13  9 13 11\n535  1  1  1  2  8\n537 13 13 13 12 13\n545  7  5  4  4  4\n547  5 13 11 11 11\n555  8  8  8  8  8",
        "\n556  5  7  4  7 11\n557  6  6  7  1  6\n558  1 11  2 12  2\n564  3  3  3  3 13\n565 13  6  6  1  4\n570  8  7  7  8  8\n573 12 12 12 12 12\n574  5  1  7 11  7\n578  8  8 12  2 11\n579  9  9  9  9  1\n583  1 10 13  5 10\n592  3  3  3  6  1\n [ reached 'max' / getOption(\"max.print\") -- omitted 144 rows ]\n",
        "> ",
        "apply(apply(df.hands, 1, table),2,  function(x){table(x) %>% as.list()})",
        "Error in apply(apply(df.hands, 1, table), 2, function(x) { : \n  dim(X) must have a positive length\n",
        "> ",
        "apply(df.hands, 1, table)",
        "$`6`\n\n 2  5 13 \n 3  1  1 \n\n$`7`\n\n 2  4  6 11 \n 1  1  2  1 \n\n$`9`\n\n3 8 \n4 1 \n\n$`10`\n\n 1  4 10 13 \n 1  1  2  1 \n\n$`14`\n\n 7 13 \n 4  1 \n\n$`16`\n\n 3  9 10 11 \n 1  1  2  1 \n\n$`17`\n\n2 9 \n4 1 \n\n$`20`\n\n2 4 \n2 3 \n\n$`26`\n\n8 \n5 \n\n$`28`\n\n2 3 6 8 \n1 1 1 2 \n\n$`36`\n\n 1 11 \n 4  1 \n\n$`43`\n\n 5  6 12 \n 3  1  1 \n\n$`47`\n\n 2  7  8 11 \n 1  1  2  1 \n\n$`50`\n\n2 3 6 \n3 1 1 \n\n$`53`\n\n 7 11 12 \n 3  1  1 \n\n$`61`\n\n5 8 \n1 4 \n\n$`64`\n\n2 4 7 \n1 3 1 \n\n$`75`\n\n7 \n5 \n\n$`77`\n\n2 3 \n1 4 \n\n$`81`\n\n3 6 9 \n1 1 3 \n\n$`84`\n\n6 \n5 \n\n$`86`\n\n 8 11 12 13 \n 2  1  1 ",
        " 1 \n\n$`87`\n\n3 4 5 7 \n1 1 1 2 \n\n$`89`\n\n 3  8  9 13 \n 1  1  2  1 \n\n$`93`\n\n5 7 8 \n1 3 1 \n\n$`97`\n\n1 \n5 \n\n$`98`\n\n1 2 3 6 \n1 1 1 2 \n\n$`99`\n\n 1  4 10 \n 2  1  2 \n\n$`107`\n\n 6 12 \n 1  4 \n\n$`108`\n\n7 9 \n2 3 \n\n$`110`\n\n6 9 \n4 1 \n\n$`119`\n\n2 9 \n1 4 \n\n$`122`\n\n3 \n5 \n\n$`124`\n\n1 6 \n4 1 \n\n$`128`\n\n 2  7 12 13 \n 1  2  1  1 \n\n$`132`\n\n 1  6  8 11 \n 1  1  2  1 \n\n$`133`\n\n4 7 \n2 3 \n\n$`135`\n\n5 9 \n1 4 \n\n$`136`\n\n 3  7  9 11 \n 1  1  2  1 \n\n$`137`\n\n11 12 \n 1  4 \n\n$`140`\n\n 1  3  9 13 \n 1  1  2  1 \n\n$`142`\n\n 5 11 \n 1  4 \n\n$`145`\n\n 7 12 \n 1  4 ",
        "\n\n$`149`\n\n 3  5 12 \n 1  3  1 \n\n$`150`\n\n2 4 5 8 \n1 1 1 2 \n\n$`151`\n\n 7  9 13 \n 1  1  3 \n\n$`156`\n\n 1 13 \n 1  4 \n\n$`158`\n\n 1  8  9 11 \n 1  1  2  1 \n\n$`160`\n\n 2  4  7 13 \n 1  1  2  1 \n\n$`162`\n\n 1  5 12 13 \n 1  2  1  1 \n\n$`164`\n\n 1  6 11 13 \n 1  2  1  1 \n\n$`173`\n\n1 9 \n1 4 \n\n$`174`\n\n5 \n5 \n\n$`176`\n\n 2 11 \n 1  4 \n\n$`179`\n\n 3 12 \n 1  4 \n\n$`182`\n\n1 2 3 \n1 3 1 \n\n$`188`\n\n 1  9 13 \n 3  1  1 \n\n$`189`\n\n 3  7 12 \n 3  1  1 \n\n$`193`\n\n4 8 \n1 4 \n\n$`195`\n\n 7 12 \n 3  2 \n\n$`198`\n\n 3  6 13 \n 1  1  3 \n\n$`200`\n\n 1  7 10 \n 2  1  2 \n\n$`204`\n",
        "\n 1  5  9 12 \n 1  1  2  1 \n\n$`205`\n\n 1  3  8 12 \n 1  1  2  1 \n\n$`214`\n\n 2  4  7 10 \n 1  1  1  2 \n\n$`216`\n\n4 6 \n2 3 \n\n$`220`\n\n1 4 6 7 \n1 1 1 2 \n\n$`223`\n\n7 9 \n4 1 \n\n$`225`\n\n3 9 \n4 1 \n\n$`227`\n\n2 4 5 \n3 1 1 \n\n$`239`\n\n3 4 5 8 \n1 1 1 2 \n\n$`240`\n\n5 9 \n4 1 \n\n$`241`\n\n3 6 \n4 1 \n\n$`243`\n\n 7 11 \n 3  2 \n\n$`244`\n\n 2  8 12 \n 1  3  1 \n\n$`247`\n\n 8 11 \n 1  4 \n\n$`250`\n\n1 5 7 9 \n1 1 1 2 \n\n$`253`\n\n 2  8 12 \n 1  1  3 \n\n$`254`\n\n 3  4 13 \n 1  1  3 \n\n$`259`\n\n 6 11 \n 4  1 \n\n$`260`\n\n 3 13 \n 3  2 \n\n$`264`\n\n 6  9 11 12 \n 1  2  1  1 \n\n$`266`\n",
        "\n 4  9 12 \n 1  3  1 \n\n$`267`\n\n 1  3 11 \n 3  1  1 \n\n$`271`\n\n3 7 \n4 1 \n\n$`274`\n\n 1 13 \n 2  3 \n\n$`275`\n\n 7  9 13 \n 1  3  1 \n\n$`276`\n\n 9 12 \n 1  4 \n\n$`280`\n\n 4  9 11 \n 3  1  1 \n\n$`288`\n\n 6 11 13 \n 1  3  1 \n\n$`290`\n\n5 7 \n1 4 \n\n$`291`\n\n11 13 \n 4  1 \n\n$`297`\n\n1 4 6 \n1 1 3 \n\n$`300`\n\n 3  5 13 \n 3  1  1 \n\n$`304`\n\n12 \n 5 \n\n$`306`\n\n12 13 \n 2  3 \n\n$`309`\n\n 6 12 \n 3  2 \n\n$`310`\n\n1 7 \n1 4 \n\n$`312`\n\n 3  8 12 \n 1  1  3 \n\n$`317`\n\n 3 13 \n 4  1 \n\n$`319`\n\n7 \n5 \n\n$`320`\n\n 4 11 \n 1  4 \n\n$`321`\n\n3 4 5 \n1 3 1 \n\n$`322`\n\n11 \n 5 \n\n$`323`\n",
        "\n1 3 \n4 1 \n\n$`325`\n\n 6 13 \n 1  4 \n\n$`327`\n\n 1 11 13 \n 3  1  1 \n\n$`328`\n\n13 \n 5 \n\n$`329`\n\n1 4 5 9 \n1 1 1 2 \n\n$`331`\n\n4 5 \n2 3 \n\n$`333`\n\n1 2 4 6 \n1 1 1 2 \n\n$`334`\n\n 4 11 \n 4  1 \n\n$`345`\n\n5 6 \n1 4 \n\n$`346`\n\n10 \n 5 \n\n$`347`\n\n 4  6 13 \n 1  3  1 \n\n$`348`\n\n 1  6  9 10 \n 1  1  1  2 \n\n$`351`\n\n4 5 8 \n1 3 1 \n\n$`359`\n\n3 6 \n4 1 \n\n$`361`\n\n1 4 9 \n1 3 1 \n\n$`362`\n\n 1  2 12 \n 1  1  3 \n\n$`367`\n\n 8 11 \n 4  1 \n\n$`368`\n\n 6 12 13 \n 3  1  1 \n\n$`374`\n\n2 5 \n4 1 \n\n$`378`\n\n6 8 \n1 4 \n\n$`380`\n\n 3  8 13 \n 1  1  3 \n\n$`381`\n\n3 4 \n4 1 \n\n$`382`\n",
        "\n 1  4  8 12 \n 1  1  2  1 \n\n$`384`\n\n5 \n5 \n\n$`386`\n\n2 6 \n2 3 \n\n$`390`\n\n 2  6  9 13 \n 1  1  2  1 \n\n$`391`\n\n 1  5  8 11 \n 1  1  2  1 \n\n$`392`\n\n 9 11 \n 1  4 \n\n$`398`\n\n11 \n 5 \n\n$`401`\n\n1 5 \n1 4 \n\n$`402`\n\n 3  4  6 12 \n 1  1  2  1 \n\n$`403`\n\n 6 11 \n 4  1 \n\n$`408`\n\n 4  8 13 \n 3  1  1 \n\n$`410`\n\n 7 11 \n 1  4 \n\n$`411`\n\n 8  9 11 \n 1  3  1 \n\n$`412`\n\n 1  9 12 \n 1  3  1 \n\n$`413`\n\n 1 11 13 \n 1  1  3 \n\n$`419`\n\n5 7 8 \n1 1 3 \n\n$`427`\n\n 2  4 13 \n 1  1  3 \n\n$`431`\n\n6 7 9 \n1 1 3 \n\n$`432`\n\n2 3 9 \n1 3 1 \n\n$`434`\n\n 6 10 \n 2  3 \n\n$`435`\n",
        "\n1 6 \n1 4 \n\n$`436`\n\n2 5 \n1 4 \n\n$`439`\n\n4 5 \n4 1 \n\n$`441`\n\n 1  3 11 13 \n 1  2  1  1 \n\n$`443`\n\n1 3 \n1 4 \n\n$`444`\n\n 2  3  7 11 \n 1  1  2  1 \n\n$`445`\n\n3 4 8 \n1 3 1 \n\n$`451`\n\n 5 13 \n 3  2 \n\n$`452`\n\n4 5 7 \n1 3 1 \n\n$`453`\n\n 1  4 12 \n 1  1  3 \n\n$`458`\n\n2 8 \n4 1 \n\n$`467`\n\n 5  8 12 13 \n 1  2  1  1 \n\n$`469`\n\n3 6 7 \n1 1 3 \n\n$`474`\n\n1 3 \n2 3 \n\n$`476`\n\n 2  5  6 10 \n 1  1  1  2 \n\n$`480`\n\n 2 11 12 \n 3  1  1 \n\n$`482`\n\n2 4 \n4 1 \n\n$`484`\n\n 2  9 11 \n 1  1  3 \n\n$`485`\n\n 2 13 \n 1  4 \n\n$`486`\n\n 2  4 10 13 \n 1  1  2  1 \n\n$`487`\n\n 2 ",
        " 9 10 11 \n 1  1  2  1 \n\n$`489`\n\n 7 12 \n 4  1 \n\n$`493`\n\n 3  7  9 13 \n 1  1  2  1 \n\n$`495`\n\n 4  5  6 11 \n 1  1  2  1 \n\n$`496`\n\n 4 13 \n 1  4 \n\n$`499`\n\n1 9 \n2 3 \n\n$`506`\n\n3 7 9 \n1 3 1 \n\n$`508`\n\n 5  6  7 11 \n 1  1  2  1 \n\n$`511`\n\n 5 12 13 \n 1  1  3 \n\n$`515`\n\n 7 10 \n 1  4 \n\n$`517`\n\n 5  7 10 12 \n 1  1  2  1 \n\n$`519`\n\n1 3 6 \n3 1 1 \n\n$`521`\n\n 8  9 11 \n 1  1  3 \n\n$`527`\n\n2 \n5 \n\n$`530`\n\n1 4 6 \n1 3 1 \n\n$`533`\n\n 5 13 \n 1  4 \n\n$`534`\n\n 9 11 13 \n 1  1  3 \n\n$`535`\n\n1 2 8 \n3 1 1 \n\n$`537`\n\n12 13 \n 1  4 \n\n$`545`\n\n4 5 7 \n3 1 1 ",
        "\n\n$`547`\n\n 5 11 13 \n 1  3  1 \n\n$`555`\n\n8 \n5 \n\n$`556`\n\n 4  5  7 11 \n 1  1  2  1 \n\n$`557`\n\n1 6 7 \n1 3 1 \n\n$`558`\n\n 1  2 11 12 \n 1  2  1  1 \n\n$`564`\n\n 3 13 \n 4  1 \n\n$`565`\n\n 1  4  6 13 \n 1  1  2  1 \n\n$`570`\n\n7 8 \n2 3 \n\n$`573`\n\n12 \n 5 \n\n$`574`\n\n 1  5  7 11 \n 1  1  2  1 \n\n$`578`\n\n 2  8 11 12 \n 1  2  1  1 \n\n$`579`\n\n1 9 \n1 4 \n\n$`583`\n\n 1  5 10 13 \n 1  1  2  1 \n\n$`592`\n\n1 3 6 \n1 3 1 \n\n$`596`\n\n 9 13 \n 3  2 \n\n$`597`\n\n 3  7 11 12 \n 1  2  1  1 \n\n$`604`\n\n 3 12 \n 4  1 \n\n$`608`\n\n2 8 \n2 3 \n\n$`610`\n\n 6  7 13 \n 3  1  1 \n\n$`613`\n",
        "\n 3  4  5 10 \n 1  1  1  2 \n\n$`614`\n\n 5  8 13 \n 1  3  1 \n\n$`615`\n\n 4  6  7 11 \n 1  1  2  1 \n\n$`619`\n\n 1  9 11 13 \n 1  2  1  1 \n\n$`626`\n\n 6  7 12 \n 1  1  3 \n\n$`627`\n\n5 6 \n4 1 \n\n$`629`\n\n1 5 8 9 \n1 1 1 2 \n\n$`636`\n\n1 4 7 \n1 3 1 \n\n$`640`\n\n3 6 \n2 3 \n\n$`643`\n\n 1  5 11 13 \n 1  2  1  1 \n\n$`648`\n\n2 5 7 8 \n1 1 1 2 \n\n$`653`\n\n1 6 7 8 \n1 1 1 2 \n\n$`655`\n\n 6  7 12 \n 3  1  1 \n\n$`660`\n\n 5  6  8 11 \n 1  1  2  1 \n\n$`661`\n\n 8 10 11 13 \n 1  2  1  1 \n\n$`663`\n\n 3  4  9 12 \n 1  1  2  1 \n\n$`664`\n\n1 2 5 9 \n1 1 1 2 \n\n$`667`\n\n2 3 \n2 3 \n",
        "\n$`670`\n\n1 3 6 8 \n1 1 1 2 \n\n$`672`\n\n 2  4 12 \n 3  1  1 \n\n$`674`\n\n 6  7 13 \n 1  3  1 \n\n$`675`\n\n 4 11 \n 3  2 \n\n$`679`\n\n 2  7  9 10 \n 1  1  1  2 \n\n$`682`\n\n4 5 6 \n1 1 3 \n\n$`685`\n\n 2  9 12 \n 1  1  3 \n\n$`686`\n\n 6 13 \n 4  1 \n\n$`693`\n\n4 7 \n4 1 \n\n$`695`\n\n 2  7 11 \n 3  1  1 \n\n$`697`\n\n 8  9 12 13 \n 1  2  1  1 \n\n$`703`\n\n6 9 \n2 3 \n\n$`707`\n\n2 7 \n1 4 \n\n$`709`\n\n 5  8  9 13 \n 1  1  2  1 \n\n$`710`\n\n 8  9 13 \n 1  3  1 \n\n$`711`\n\n4 \n5 \n\n$`712`\n\n 1  6  8 10 \n 1  1  1  2 \n\n$`713`\n\n1 3 7 9 \n1 1 1 2 \n\n$`715`\n\n4 7 8 \n3 1 1 \n\n$`716`\n\n",
        " 9 13 \n 1  4 \n\n$`717`\n\n2 4 6 9 \n1 1 1 2 \n\n$`722`\n\n2 3 9 \n3 1 1 \n\n$`727`\n\n 4  8 12 13 \n 1  2  1  1 \n\n$`729`\n\n3 5 7 8 \n1 1 1 2 \n\n$`731`\n\n 2  8  9 11 \n 1  1  2  1 \n\n$`733`\n\n 4  6 10 \n 1  1  3 \n\n$`734`\n\n 1  3 11 \n 1  1  3 \n\n$`735`\n\n 4 11 \n 1  4 \n\n$`736`\n\n 2  7 12 \n 1  3  1 \n\n$`737`\n\n11 12 \n 1  4 \n\n$`738`\n\n 5 11 \n 1  4 \n\n$`740`\n\n 6  7  8 12 \n 1  1  2  1 \n\n$`741`\n\n 2  9 13 \n 3  1  1 \n\n$`742`\n\n2 7 \n4 1 \n\n$`743`\n\n2 \n5 \n\n$`746`\n\n4 5 9 \n1 3 1 \n\n$`750`\n\n 7  8 11 \n 1  3  1 \n\n$`757`\n\n1 3 4 6 \n1 1 1 2 \n\n$`758`\n\n 1  5 12 ",
        "\n 1  3  1 \n\n$`761`\n\n 1  3  4 11 \n 1  1  2  1 \n\n$`763`\n\n1 2 9 \n1 1 3 \n\n$`766`\n\n 4  5  6 10 \n 1  1  1  2 \n\n$`776`\n\n2 4 6 7 \n1 1 1 2 \n\n$`777`\n\n1 4 \n1 4 \n\n$`783`\n\n 4  7 12 13 \n 1  2  1  1 \n\n$`787`\n\n 6  7 10 12 \n 1  1  2  1 \n\n$`794`\n\n2 6 \n4 1 \n\n$`795`\n\n2 7 9 \n1 1 3 \n\n$`798`\n\n 3  6  9 13 \n 1  1  2  1 \n\n$`799`\n\n6 7 9 \n3 1 1 \n\n$`801`\n\n2 9 \n4 1 \n\n$`804`\n\n4 9 \n2 3 \n\n$`809`\n\n 6  8 13 \n 1  3  1 \n\n$`816`\n\n4 6 8 \n3 1 1 \n\n$`818`\n\n 3  6  7 11 \n 1  1  2  1 \n\n$`819`\n\n 4  6  7 13 \n 1  1  2  1 \n\n$`821`\n\n 3  5 13 \n 1  3  1 \n\n$`822`\n",
        "\n1 \n5 \n\n$`824`\n\n8 9 \n4 1 \n\n$`826`\n\n 7  8 10 12 \n 1  1  2  1 \n\n$`827`\n\n 7  8  9 13 \n 1  1  2  1 \n\n$`831`\n\n 3 12 \n 3  2 \n\n$`832`\n\n6 9 \n4 1 \n\n$`835`\n\n1 2 7 \n3 1 1 \n\n$`844`\n\n 9 13 \n 4  1 \n\n$`848`\n\n 5 12 \n 3  2 \n\n$`849`\n\n 5 11 \n 4  1 \n\n$`851`\n\n13 \n 5 \n\n$`853`\n\n 9 13 \n 1  4 \n\n$`854`\n\n 1  8 10 \n 2  1  2 \n\n$`856`\n\n2 3 4 9 \n1 1 1 2 \n\n$`860`\n\n 2  6 11 12 \n 1  2  1  1 \n\n$`861`\n\n6 8 \n4 1 \n\n$`865`\n\n 4 12 13 \n 3  1  1 \n\n$`870`\n\n 5  6  9 13 \n 1  1  2  1 \n\n$`872`\n\n 3 11 \n 3  2 \n\n$`873`\n\n4 8 \n2 3 \n\n$`875`\n\n 1  3  9 10 \n 1  1 ",
        " 1  2 \n\n$`880`\n\n1 2 8 9 \n1 1 1 2 \n\n$`881`\n\n 9 12 \n 1  4 \n\n$`882`\n\n 5 12 \n 4  1 \n\n$`883`\n\n 1  6  7 12 \n 1  1  2  1 \n\n$`886`\n\n1 3 8 \n1 1 3 \n\n$`889`\n\n 3  6  9 11 \n 1  1  2  1 \n\n$`894`\n\n2 6 9 \n3 1 1 \n\n$`896`\n\n 1 11 12 \n 3  1  1 \n\n$`898`\n\n 9 12 \n 3  2 \n\n$`900`\n\n 1  6 13 \n 3  1  1 \n\n$`901`\n\n2 5 7 \n1 1 3 \n\n$`902`\n\n9 \n5 \n\n$`903`\n\n1 2 5 \n3 1 1 \n\n$`904`\n\n 1  3 11 \n 1  3  1 \n\n$`905`\n\n 7 11 13 \n 1  3  1 \n\n$`908`\n\n2 6 9 \n1 3 1 \n\n$`909`\n\n 2  3  6 12 \n 1  1  2  1 \n\n$`912`\n\n 5  9 12 \n 3  1  1 \n\n$`915`\n\n 1  2 13 \n 3  1  1 \n",
        "\n$`917`\n\n7 8 9 \n1 3 1 \n\n$`922`\n\n1 8 \n4 1 \n\n$`925`\n\n 5  9 10 13 \n 1  1  2  1 \n\n$`928`\n\n 9 11 \n 4  1 \n\n$`929`\n\n3 4 8 9 \n1 1 1 2 \n\n$`932`\n\n 6 12 \n 4  1 \n\n$`937`\n\n5 8 \n2 3 \n\n$`939`\n\n 8 11 \n 3  2 \n\n$`946`\n\n 5  8 10 13 \n 1  1  2  1 \n\n$`949`\n\n1 8 9 \n1 3 1 \n\n$`952`\n\n 4 10 12 \n 1  3  1 \n\n$`960`\n\n1 7 9 \n1 3 1 \n\n$`961`\n\n6 \n5 \n\n$`963`\n\n 1  5  7 10 \n 1  1  1  2 \n\n$`964`\n\n3 \n5 \n\n$`966`\n\n 5  6  7 13 \n 1  1  2  1 \n\n$`967`\n\n4 7 \n1 4 \n\n$`970`\n\n 5 12 13 \n 3  1  1 \n\n$`978`\n\n 3  4 12 \n 3  1  1 \n\n$`979`\n\n 1  9 13 \n 1  1  3 \n\n$`983`\n",
        "\n12 13 \n 4  1 \n\n$`985`\n\n4 \n5 \n\n$`988`\n\n 2 11 \n 3  2 \n\n$`989`\n\n9 \n5 \n\n",
        "> ",
        "lapply(apply(df.hands, 1, table),function(x){table(x) %>% as.list()}) %>% ",
        "+ ",
        "  rbindlist(fill = T)",
        "      1  3  2  4  5\n  1:  2  1 NA NA NA\n  2:  3 NA  1 NA NA\n  3:  1 NA NA  1 NA\n  4:  3 NA  1 NA NA\n  5:  1 NA NA  1 NA\n ---               \n340:  2  1 NA NA NA\n341:  1 NA NA  1 NA\n342: NA NA NA NA  1\n343: NA  1  1 NA NA\n344: NA NA NA NA  1\n",
        "> ",
        "# Get duplicates and add back id and bet info",
        "> ",
        "df.2 <- lapply(apply(df.hands, 1, table),function(x){table(x) %>% as.list()}) %>% ",
        "+ ",
        "  rbindlist(fill = T) %>% ",
        "+ ",
        "  cbind(df.jokers[,c(1:5)], .) ",
        "> ",
        "df.2",
        "    X1 X2 X3 X4 X5  1  3  2  4  5\n6   10  5 13  2  2  2  1 NA NA NA\n7   10  6  4  2 11  3 NA  1 NA NA\n9   10  3  3  8  3  1 NA NA  1 NA\n10  13  1  4 10 10  3 NA  1 NA NA\n14   7 13  7  7 10  1 NA NA  1 NA\n16   9 10 10 11  3  3 NA  1 NA NA\n17   2  2  2 10  9  1 NA NA  1 NA\n20   4  4 10  2  2 NA  1  1 NA NA\n26  10  8 10  8  8 NA NA NA NA  1\n28  10  2  6  3  8  3 NA  1 NA NA\n36   1  1 10 11  1  1 NA NA  1 NA\n43   5 10  6  5 12  2  1 NA NA NA\n47   7 11  8  2 10  3 NA  1 NA NA\n50  10  2  2  3  6  2  1 NA NA NA\n53 ",
        " 12  7  7 11 10  2  1 NA NA NA\n61  10  8  8  8  5  1 NA NA  1 NA\n64   7  4 10  2  4  2  1 NA NA NA\n75   7 10  7  7 10 NA NA NA NA  1\n77  10  2  3  3 10  1 NA NA  1 NA\n81   9  3  9  6 10  2  1 NA NA NA\n84   6 10  6  6  6 NA NA NA NA  1\n86  12 11 10 13  8  3 NA  1 NA NA\n87   4  5  7  3 10  3 NA  1 NA NA\n89   9 13 10  3  8  3 NA  1 NA NA\n93   5  7  7 10  8  2  1 NA NA NA\n97   1 10  1  1 10 NA NA NA NA  1\n98  10  6  1  2  3  3 NA  1 NA NA\n99  10 10  1  1  4  1 NA  2 NA NA\n107 12 12 12  6 10  1 NA NA  1 NA\n108  7",
        "  9  7 10  9 NA  1  1 NA NA\n110 10  6  6 10  9  1 NA NA  1 NA\n119  9 10  2  9  9  1 NA NA  1 NA\n122  3  3  3 10  3 NA NA NA NA  1\n124  6  1  1 10  1  1 NA NA  1 NA\n128 12  2  7 13 10  3 NA  1 NA NA\n132  1  8 10 11  6  3 NA  1 NA NA\n133  4  4  7 10  7 NA  1  1 NA NA\n135  5 10  9  9  9  1 NA NA  1 NA\n136  7 11  3 10  9  3 NA  1 NA NA\n137 12 12 11 12 10  1 NA NA  1 NA\n140 13  9  3 10  1  3 NA  1 NA NA\n142 10 10  5 11 11  1 NA NA  1 NA\n145 12 12 10  7 10  1 NA NA  1 NA\n149 12  5  3 10  5  2  1 NA NA NA\n150  2  5",
        " 10  8  4  3 NA  1 NA NA\n151  7 13 10  9 13  2  1 NA NA NA\n156  1 13 13 10 10  1 NA NA  1 NA\n158  1  9  8 10 11  3 NA  1 NA NA\n160  4 13  7 10  2  3 NA  1 NA NA\n162  5 12 13  1 10  3 NA  1 NA NA\n164  1  6 11 13 10  3 NA  1 NA NA\n173 10  9  9 10  1  1 NA NA  1 NA\n174  5 10  5 10  5 NA NA NA NA  1\n176 10 11 10  2 11  1 NA NA  1 NA\n179  3 10 12 12 12  1 NA NA  1 NA\n182  3  2  2  1 10  2  1 NA NA NA\n188  1 13 10  9  1  2  1 NA NA NA\n189  7  3 12  3 10  2  1 NA NA NA\n193  8 10  8  4  8  1 NA NA  1 NA\n195 10  7  7",
        " 12 12 NA  1  1 NA NA\n198 13  3  6 13 10  2  1 NA NA NA\n200 10  1  1  7 10  1 NA  2 NA NA\n204 10  5  9  1 12  3 NA  1 NA NA\n205 12  3  8  1 10  3 NA  1 NA NA\n214  7 10  2 10  4  3 NA  1 NA NA\n216 10  4  6  6  4 NA  1  1 NA NA\n220  7 10  4  6  1  3 NA  1 NA NA\n223 10  9  7  7 10  1 NA NA  1 NA\n225  3 10  3  9  3  1 NA NA  1 NA\n227  2  2 10  4  5  2  1 NA NA NA\n239 10  5  8  4  3  3 NA  1 NA NA\n240  5 10  9  5  5  1 NA NA  1 NA\n241  6 10 10  3  3  1 NA NA  1 NA\n243  7  7 11 10 11 NA  1  1 NA NA\n244  2  8 12  8",
        " 10  2  1 NA NA NA\n247 10  8 11 11 11  1 NA NA  1 NA\n250  7  1  5 10  9  3 NA  1 NA NA\n253 12  8  2 10 12  2  1 NA NA NA\n254 10  4 13 13  3  2  1 NA NA NA\n259  6 11  6  6 10  1 NA NA  1 NA\n260  3 13  3 13 10 NA  1  1 NA NA\n264  9 12 10 11  6  3 NA  1 NA NA\n266  9  4 10  9 12  2  1 NA NA NA\n267  3 10 11  1  1  2  1 NA NA NA\n271  3  3 10  7  3  1 NA NA  1 NA\n274 13 10  1  1 13 NA  1  1 NA NA\n275  9  7 13 10  9  2  1 NA NA NA\n276 12  9 12 12 10  1 NA NA  1 NA\n280 11 10  4  4  9  2  1 NA NA NA\n288 11 10  6 13 11",
        "  2  1 NA NA NA\n290  7  5  7  7 10  1 NA NA  1 NA\n291 11 10 11 11 13  1 NA NA  1 NA\n297  1 10  6  4  6  2  1 NA NA NA\n300  5  3 10  3 13  2  1 NA NA NA\n304 12 12 10 12 10 NA NA NA NA  1\n306 10 12 13 13 12 NA  1  1 NA NA\n309  6 12  6 10 12 NA  1  1 NA NA\n310 10  7  7  1  7  1 NA NA  1 NA\n312  8 10  3 12 12  2  1 NA NA NA\n317 10  3 13  3 10  1 NA NA  1 NA\n [ reached 'max' / getOption(\"max.print\") -- omitted 244 rows ]\n",
        "> ",
        "df.2[df.2 == 10] <- 0",
        "> ",
        "df.2[is.na(df.2)] <- 0",
        "> ",
        "df.2 <- df.2 %>% ",
        "+ ",
        "  cbind(df.jokers[,c(\"bet\", \"hand\")]) ",
        "> ",
        "# Merge them back together",
        "> ",
        "df.2 <- full_join(df[which(!df$hand %in% df.2$hand),],df.2, by = c(colnames(df)[which(colnames(df) %in% colnames(df.2))]))",
        "> ",
        "df.2[is.na(df.2)] <- 0",
        "> ",
        "df.ordered.2  <- df.2 |>",
        "+ ",
        "  arrange(desc(`5`), desc(`4`), desc(`3`), desc(`2`),",
        "+ ",
        "          desc(`1`), desc(X1),  desc(X2),",
        "+ ",
        "          desc(X3),  desc(X4),  desc(X5))",
        "> ",
        "#Set order",
        "> ",
        "df.ordered.2$rank <- rev(seq(1,nrow(df.ordered.2), 1))",
        "> ",
        "answer2 <- df.ordered.2 %>% ",
        "+ ",
        "  mutate(score = as.numeric(bet)*rank) %>% ",
        "+ ",
        "  pull(score) %>% ",
        "+ ",
        "  sum()",
        "> ",
        "answer2",
        "[1] 248998110\n",
        "> ",
        "df.ordered.2",
        "   X1 X2 X3 X4 X5 1 3 4 2 5 bet hand rank\n1  13  0 13 13 13 0 0 0 0 1 180  851 1000\n2  12 12 12 12  0 0 0 0 0 1 357  573  999\n3  12 12  0 12  0 0 0 0 0 1  86  304  998\n4  11 11 11  0 11 0 0 0 0 1 781  322  997\n5   9  9  0  0  9 0 0 0 0 1 617  902  996\n6   9  0  9  9  9 0 0 0 0 1  67  989  995\n7   7  7  0  7  7 0 0 0 0 1  84  319  994\n8   7  0  7  7  0 0 0 0 0 1 686   75  993\n9   6  0  6  6  6 0 0 0 0 1 888   84  992\n10  5  5  5  0  5 0 0 0 0 1 447  384  991\n11  5  0  5  0  5 0 0 0 0 1  76  174  990\n12  4  0",
        "  4  0  4 0 0 0 0 1 265  985  989\n13  3  3  3  0  3 0 0 0 0 1 908  122  988\n14  3  0  3  3  0 0 0 0 0 1  85  964  987\n15  2  2  2  2  0 0 0 0 0 1 711  743  986\n16  2  2  0  0  2 0 0 0 0 1  31  527  985\n17  1  0  1  1  0 0 0 0 0 1  39   97  984\n18  0 13  0 13 13 0 0 0 0 1 746  328  983\n19  0 11 11 11  0 0 0 0 0 1 243  398  982\n20  0  8  8  8  8 0 0 0 0 1 397  555  981\n21  0  8  0  8  8 0 0 0 0 1 680   26  980\n22  0  6  6  0  6 0 0 0 0 1 175  961  979\n23  0  4  4  4  4 0 0 0 0 1 126  711  978\n24  0  1  1  1  1",
        " 0 0 0 0 1 993  822  977\n25  0  0  0  0  0 0 0 0 0 1 739  346  976\n26 13 13 13 11 13 1 0 1 0 0 656  586  975\n27 13 13 13  2 13 1 0 1 0 0 637   11  974\n28 13 13 13  0  5 1 0 1 0 0 293  533  973\n29 13 13  7 13 13 1 0 1 0 0 559   78  972\n30 13 13  0  6 13 1 0 1 0 0 276  325  971\n31 13 12 12 12 12 1 0 1 0 0 557  175  970\n32 13  6  6  6  0 1 0 1 0 0 925  686  969\n33 13  5  5  5  5 1 0 1 0 0 639  541  968\n34 13  4 13 13 13 1 0 1 0 0 468  501  967\n35 13  4  4  4  4 1 0 1 0 0 197    3  966\n36 13  3  3  3  3 1 0 1 0",
        " 0 187  544  965\n37 13  0 13 12 13 1 0 1 0 0 532  537  964\n38 12 12 12 12  9 1 0 1 0 0 154  340  963\n39 12 12 12  8 12 1 0 1 0 0 262  283  962\n40 12 12 12  6  0 1 0 1 0 0 382  107  961\n41 12 12 12  2 12 1 0 1 0 0 402  217  960\n42 12 12 11 12  0 1 0 1 0 0 903  137  959\n43 12 12  0  7  0 1 0 1 0 0 679  145  958\n44 12  9 12 12  0 1 0 1 0 0 315  276  957\n45 12  9  0  0 12 1 0 1 0 0 393  881  956\n46 12  3 12 12 12 1 0 1 0 0 318  522  955\n47 12  3  3  3  0 1 0 1 0 0 434  604  954\n48 11 13 11 11 11 1 0 1 0 0 211  538",
        "  953\n49 11 12 12 12 12 1 0 1 0 0 418   94  952\n50 11 12  0 12  0 1 0 1 0 0 743  737  951\n51 11 11 11 11  6 1 0 1 0 0 446  991  950\n52 11 11  4 11  0 1 0 1 0 0 724  735  949\n53 11 11  3 11 11 1 0 1 0 0 263  373  948\n54 11 11  1 11 11 1 0 1 0 0 190  375  947\n55 11  9  9  0  9 1 0 1 0 0 179  928  946\n56 11  8  8  8  8 1 0 1 0 0 176  385  945\n57 11  6  6  6  6 1 0 1 0 0 475  708  944\n58 11  5  5  5  0 1 0 1 0 0 672  849  943\n59 11  0 11 11 13 1 0 1 0 0 305  291  942\n60 11  0 11 11  7 1 0 1 0 0 860  410  941\n61",
        "  9 13 13 13  0 1 0 1 0 0 802  716  940\n62  9 13  9  9  0 1 0 1 0 0 902  844  939\n63  9 11  9  9  9 1 0 1 0 0 716  677  938\n64  9 11  0 11 11 1 0 1 0 0 737  392  937\n65  9  9  9  9 13 1 0 1 0 0 962  113  936\n66  9  9  9  9 12 1 0 1 0 0 162  971  935\n67  9  9  9  9  5 1 0 1 0 0 353  911  934\n68  9  9  8  9  9 1 0 1 0 0 710  617  933\n69  9  9  6  9  9 1 0 1 0 0 217  858  932\n70  9  9  0  9  1 1 0 1 0 0 943  579  931\n71  9  5  5  5  5 1 0 1 0 0  53  588  930\n72  9  2  2  0  0 1 0 1 0 0 275  801  929\n73  9  0  2",
        "  9  9 1 0 1 0 0 865  119  928\n74  8 13 13 13 13 1 0 1 0 0  26  781  927\n75  8 13  8  8  8 1 0 1 0 0 125   52  926\n76  8  8  9  8  8 1 0 1 0 0  10  824  925\n [ reached 'max' / getOption(\"max.print\") -- omitted 924 rows ]\n",
        "> ",
        "answer2 <- df.ordered.2 %>% ",
        "+ ",
        "  mutate(score = as.numeric(bet)*rank) %>% ",
        "+ ",
        "  pull(score) %>% ",
        "+ ",
        "  sum()",
        "> ",
        "answer2",
        "[1] 248998110\n",
        "> ",
        "# Add bets",
        "> ",
        "hand <- lapply(strsplit(data, \" \"), \"[[\", 1)",
        "> ",
        "# Parse data",
        "> ",
        "df <- data.frame(do.call(\"rbind\", strsplit(as.character(hand), \"\",",
        "+ ",
        "                                     fixed = TRUE)))",
        "> ",
        "# Make df to convert cards to value tier",
        "> ",
        "cards <- c('A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2')",
        "> ",
        "value.df <- data.frame(cards = cards, value = rev(seq(1, length(cards), 1)))",
        "> ",
        "",
        "> ",
        "# Replace characters in df, using value.df as a dictionary",
        "> ",
        "df <- apply(df, 2, function(column) {",
        "+ ",
        "  # Use 'match' to find the positions of 'df' elements in 'value.df'",
        "+ ",
        "  matched_positions <- match(column, value.df$cards)",
        "+ ",
        "  # Replace the positions with the corresponding values from 'value.df'",
        "+ ",
        "  value.df$value[matched_positions]",
        "+ ",
        "}) |> as.data.frame()",
        "> ",
        "",
        "> ",
        "# Get duplicates",
        "> ",
        "df <- lapply(apply(df, 1, table),function(x){table(x) %>% as.list()}) %>% ",
        "+ ",
        "  rbindlist(fill = T) %>% ",
        "+ ",
        "  cbind(df, .)",
        "> ",
        "",
        "> ",
        "# Add bets",
        "> ",
        "df$bet <- sapply(strsplit(data, \" \"), \"[[\", 2)",
        "> ",
        "",
        "> ",
        "# Add hand # ",
        "> ",
        "df$hand <- seq(1,nrow(df), 1)",
        "> ",
        "",
        "> ",
        "df[is.na(df)] <- 0",
        "> ",
        "df.ordered <- df |>",
        "+ ",
        "  arrange(`5`, `4`, `3`, `2`, `1`, X1, X2, X3, X4, X5, decreasing = TRUE)",
        "> ",
        "  #arrange(`3`, `2`, `1`, X1, X2, X3, X4, X5, decreasing = TRUE)",
        "> ",
        "#Set order",
        "> ",
        "df.ordered$rank <- seq(1,nrow(df.ordered), 1)",
        "> ",
        "",
        "> ",
        "answer1 <- df.ordered %>% ",
        "+ ",
        "  mutate(score = as.numeric(bet)*rank) %>% ",
        "+ ",
        "  pull(score) %>% ",
        "+ ",
        "  sum()",
        "> ",
        "answer1",
        "[1] 251106089\n",
        "> ",
        "251106089",
        "[1] 251106089\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Part 2",
        "> ",
        "# Make Jokers raise the value of the max in 1:5",
        "> ",
        "df.jokers <- df[apply(df, 1, function(x) any(x == 10)), ]",
        "> ",
        "",
        "> ",
        "# Find most common numbers",
        "> ",
        "# if there are two twos, reference the higher",
        "> ",
        "df.hands <- df.jokers[,c(1:5)] ",
        "> ",
        "# Make temp df with jokers converted to best cards",
        "> ",
        "for(i in 1:nrow(df.hands)){",
        "+ ",
        "target.value <- table(unlist(df.hands[i,])) %>% subset(. == max(.)) %>% subset(names(.) == max(names(.))) %>% names()",
        "+ ",
        "df.hands[i,which(df.hands[i,] == 10)] <- as.numeric(target.value)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Get duplicates and add back id and bet info",
        "> ",
        "df.2 <- lapply(apply(df.hands, 1, table),function(x){table(x) %>% as.list()}) %>% ",
        "+ ",
        "  rbindlist(fill = T) %>% ",
        "+ ",
        "  cbind(df.jokers[,c(1:5)], .) ",
        "> ",
        "df.2[df.2 == 10] <- 0",
        "> ",
        "df.2[is.na(df.2)] <- 0",
        "> ",
        "df.2 <- df.2 %>% ",
        "+ ",
        "  cbind(df.jokers[,c(\"bet\", \"hand\")]) ",
        "> ",
        "",
        "> ",
        "# Merge them back together",
        "> ",
        "df.2 <- full_join(df[which(!df$hand %in% df.2$hand),],df.2, by = c(colnames(df)[which(colnames(df) %in% colnames(df.2))]))",
        "> ",
        "",
        "> ",
        "df.2[is.na(df.2)] <- 0",
        "> ",
        "# Turn jokers into 0s ",
        "> ",
        "",
        "> ",
        "df.ordered.2  <- df.2 |>",
        "+ ",
        "  arrange(desc(`5`), desc(`4`), desc(`3`), desc(`2`),",
        "+ ",
        "          desc(`1`), desc(X1),  desc(X2),",
        "+ ",
        "          desc(X3),  desc(X4),  desc(X5))",
        "> ",
        "  #arrange(`5`, `4`, `3`, `2`, `1`, X1, X2, X3, X4, X5, decreasing = TRUE)",
        "> ",
        "  ",
        "> ",
        "#Set order",
        "> ",
        "df.ordered.2$rank <- rev(seq(1,nrow(df.ordered.2), 1))",
        "> ",
        "",
        "> ",
        "answer2 <- df.ordered.2 %>% ",
        "+ ",
        "  mutate(score = as.numeric(bet)*rank) %>% ",
        "+ ",
        "  pull(score) %>% ",
        "+ ",
        "  sum()",
        "> ",
        "answer2",
        "[1] 248998110\n",
        "> ",
        "df.ordered.2",
        "   X1 X2 X3 X4 X5 1 3 4 2 5 bet hand rank\n1  13  0 13 13 13 0 0 0 0 1 180  851 1000\n2  12 12 12 12  0 0 0 0 0 1 357  573  999\n3  12 12  0 12  0 0 0 0 0 1  86  304  998\n4  11 11 11  0 11 0 0 0 0 1 781  322  997\n5   9  9  0  0  9 0 0 0 0 1 617  902  996\n6   9  0  9  9  9 0 0 0 0 1  67  989  995\n7   7  7  0  7  7 0 0 0 0 1  84  319  994\n8   7  0  7  7  0 0 0 0 0 1 686   75  993\n9   6  0  6  6  6 0 0 0 0 1 888   84  992\n10  5  5  5  0  5 0 0 0 0 1 447  384  991\n11  5  0  5  0  5 0 0 0 0 1  76  174  990\n12  4  0",
        "  4  0  4 0 0 0 0 1 265  985  989\n13  3  3  3  0  3 0 0 0 0 1 908  122  988\n14  3  0  3  3  0 0 0 0 0 1  85  964  987\n15  2  2  2  2  0 0 0 0 0 1 711  743  986\n16  2  2  0  0  2 0 0 0 0 1  31  527  985\n17  1  0  1  1  0 0 0 0 0 1  39   97  984\n18  0 13  0 13 13 0 0 0 0 1 746  328  983\n19  0 11 11 11  0 0 0 0 0 1 243  398  982\n20  0  8  8  8  8 0 0 0 0 1 397  555  981\n21  0  8  0  8  8 0 0 0 0 1 680   26  980\n22  0  6  6  0  6 0 0 0 0 1 175  961  979\n23  0  4  4  4  4 0 0 0 0 1 126  711  978\n24  0  1  1  1  1",
        " 0 0 0 0 1 993  822  977\n25  0  0  0  0  0 0 0 0 0 1 739  346  976\n26 13 13 13 11 13 1 0 1 0 0 656  586  975\n27 13 13 13  2 13 1 0 1 0 0 637   11  974\n28 13 13 13  0  5 1 0 1 0 0 293  533  973\n29 13 13  7 13 13 1 0 1 0 0 559   78  972\n30 13 13  0  6 13 1 0 1 0 0 276  325  971\n31 13 12 12 12 12 1 0 1 0 0 557  175  970\n32 13  6  6  6  0 1 0 1 0 0 925  686  969\n33 13  5  5  5  5 1 0 1 0 0 639  541  968\n34 13  4 13 13 13 1 0 1 0 0 468  501  967\n35 13  4  4  4  4 1 0 1 0 0 197    3  966\n36 13  3  3  3  3 1 0 1 0",
        " 0 187  544  965\n37 13  0 13 12 13 1 0 1 0 0 532  537  964\n38 12 12 12 12  9 1 0 1 0 0 154  340  963\n39 12 12 12  8 12 1 0 1 0 0 262  283  962\n40 12 12 12  6  0 1 0 1 0 0 382  107  961\n41 12 12 12  2 12 1 0 1 0 0 402  217  960\n42 12 12 11 12  0 1 0 1 0 0 903  137  959\n43 12 12  0  7  0 1 0 1 0 0 679  145  958\n44 12  9 12 12  0 1 0 1 0 0 315  276  957\n45 12  9  0  0 12 1 0 1 0 0 393  881  956\n46 12  3 12 12 12 1 0 1 0 0 318  522  955\n47 12  3  3  3  0 1 0 1 0 0 434  604  954\n48 11 13 11 11 11 1 0 1 0 0 211  538",
        "  953\n49 11 12 12 12 12 1 0 1 0 0 418   94  952\n50 11 12  0 12  0 1 0 1 0 0 743  737  951\n51 11 11 11 11  6 1 0 1 0 0 446  991  950\n52 11 11  4 11  0 1 0 1 0 0 724  735  949\n53 11 11  3 11 11 1 0 1 0 0 263  373  948\n54 11 11  1 11 11 1 0 1 0 0 190  375  947\n55 11  9  9  0  9 1 0 1 0 0 179  928  946\n56 11  8  8  8  8 1 0 1 0 0 176  385  945\n57 11  6  6  6  6 1 0 1 0 0 475  708  944\n58 11  5  5  5  0 1 0 1 0 0 672  849  943\n59 11  0 11 11 13 1 0 1 0 0 305  291  942\n60 11  0 11 11  7 1 0 1 0 0 860  410  941\n61",
        "  9 13 13 13  0 1 0 1 0 0 802  716  940\n62  9 13  9  9  0 1 0 1 0 0 902  844  939\n63  9 11  9  9  9 1 0 1 0 0 716  677  938\n64  9 11  0 11 11 1 0 1 0 0 737  392  937\n65  9  9  9  9 13 1 0 1 0 0 962  113  936\n66  9  9  9  9 12 1 0 1 0 0 162  971  935\n67  9  9  9  9  5 1 0 1 0 0 353  911  934\n68  9  9  8  9  9 1 0 1 0 0 710  617  933\n69  9  9  6  9  9 1 0 1 0 0 217  858  932\n70  9  9  0  9  1 1 0 1 0 0 943  579  931\n71  9  5  5  5  5 1 0 1 0 0  53  588  930\n72  9  2  2  0  0 1 0 1 0 0 275  801  929\n73  9  0  2",
        "  9  9 1 0 1 0 0 865  119  928\n74  8 13 13 13 13 1 0 1 0 0  26  781  927\n75  8 13  8  8  8 1 0 1 0 0 125   52  926\n76  8  8  9  8  8 1 0 1 0 0  10  824  925\n [ reached 'max' / getOption(\"max.print\") -- omitted 924 rows ]\n",
        "> ",
        "View(df.ordered.2)",
        "> ",
        "View(df)",
        "> ",
        "data <- readLines(\"data/input_7.txt\")",
        "> ",
        "",
        "> ",
        "# Add bets",
        "> ",
        "hand <- lapply(strsplit(data, \" \"), \"[[\", 1)",
        "> ",
        "# Parse data",
        "> ",
        "df <- data.frame(do.call(\"rbind\", strsplit(as.character(hand), \"\",",
        "+ ",
        "                                     fixed = TRUE)))",
        "> ",
        "# Make df to convert cards to value tier",
        "> ",
        "cards <- c('A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2')",
        "> ",
        "value.df <- data.frame(cards = cards, value = rev(seq(1, length(cards), 1)))",
        "> ",
        "",
        "> ",
        "# Replace characters in df, using value.df as a dictionary",
        "> ",
        "df <- apply(df, 2, function(column) {",
        "+ ",
        "  # Use 'match' to find the positions of 'df' elements in 'value.df'",
        "+ ",
        "  matched_positions <- match(column, value.df$cards)",
        "+ ",
        "  # Replace the positions with the corresponding values from 'value.df'",
        "+ ",
        "  value.df$value[matched_positions]",
        "+ ",
        "}) |> as.data.frame()",
        "> ",
        "# Add bets",
        "> ",
        "df$bet <- sapply(strsplit(data, \" \"), \"[[\", 2)",
        "> ",
        "",
        "> ",
        "# Add hand # ",
        "> ",
        "df$hand <- seq(1,nrow(df), 1)",
        "> ",
        "df",
        "    X1 X2 X3 X4 X5  bet hand\n1    7  3  3  3  9  864    1\n2    5  9 12  3 11  440    2\n3   13  4  4  4  4  197    3\n4    4  2  2  4  2  712    4\n5    5 12  5  7 13  216    5\n6   10  5 13  2  2  975    6\n7   10  6  4  2 11  772    7\n8    1  1  6  6  5  977    8\n9   10  3  3  8  3  215    9\n10  13  1  4 10 10  101   10\n11  13 13 13  2 13  637   11\n12   9  9  2 12 12 1000   12\n13   9  6  9  5  6  895   13\n14   7 13  7  7 10  928   14\n15   9  9 12 12  9   29   15\n16   9 10 10 11  3  719   16\n17   2  2  2 10  9  489",
        "   17\n18  11  8 13 11 11  492   18\n19   9 12  2  7  3  543   19\n20   4  4 10  2  2  897   20\n21  11  1  5 11 11  549   21\n22   9  9 12 12  4  254   22\n23   9  8  8  9  8  530   23\n24   7  6  7  7  7  851   24\n25   1  6  7  1  7  896   25\n26  10  8 10  8  8  680   26\n27  12  6 12 13  1  843   27\n28  10  2  6  3  8  432   28\n29   6  9 13  3  8  839   29\n30   9  3  3  5  5  266   30\n31   6  6 11 11  6  534   31\n32   3  3 13 13 13  540   32\n33  11  3 11  3  3  330   33\n34   6  9 12  7  7  736   34\n35   9  6  3  6",
        "  8  705   35\n36   1  1 10 11  1  522   36\n37   6  6  1  1  6  597   37\n38   4  4  4  4  9  296   38\n39   2  2  2  3  7  203   39\n40  13  1  5  1  3  767   40\n41   7  9 12  7  7   41   41\n42   3  9 12  6 13  869   42\n43   5 10  6  5 12  581   43\n44   6  9  3  6  9  629   44\n45   8 11 13  3  8  302   45\n46  12 12  6 12  6  588   46\n47   7 11  8  2 10  872   47\n48  13  8  6 11  3  235   48\n49  13  3 13  3  4  343   49\n50  10  2  2  3  6  755   50\n51   3  9  3  3  3  909   51\n52   8 13  8  8  8  125   52\n53  12",
        "  7  7 11 10  707   53\n54   6  3  3  6  3  953   54\n55  13  9 11 11  9  155   55\n56   2  1  1  3  1  569   56\n57   3  3  7  7  7  634   57\n58   1  1  3  1  8  882   58\n59   1 11 13  7  3  602   59\n60   9 11  9 11  3  974   60\n61  10  8  8  8  5  392   61\n62   4  7  4  1 11  601   62\n63  12  4  3  3  3  833   63\n64   7  4 10  2  4  763   64\n65   9  7  1  7  1  504   65\n66   3 12 13 12 12  539   66\n67   1  1  2  2  9   68   67\n68  13 13  7 13 11  223   68\n69   2  1  5 13  2  208   69\n70   9  8  4  4  9  319   70",
        "\n71  13  2 11  2 13  776   71\n72   4  5 11 12 13  230   72\n73   9  5  2  9  5  566   73\n74  11 13  2  5 11  923   74\n75   7 10  7  7 10  686   75\n76   8 12  4  9  6   93   76\n77  10  2  3  3 10  321   77\n78  13 13  7 13 13  559   78\n79   7  7  6  6  6  448   79\n80   6  5  5  6 12  487   80\n81   9  3  9  6 10  476   81\n82   7 11  3 11  4  542   82\n83  12 12  4  4  4  699   83\n84   6 10  6  6  6  888   84\n85   2  2  4 13  2  284   85\n86  12 11 10 13  8  764   86\n87   4  5  7  3 10  956   87\n88   1  7  7 12  7",
        "  866   88\n89   9 13 10  3  8  697   89\n90   9  4  6  9  6  727   90\n91   3  6  3  6  6  980   91\n92   6  7  9  2  2  682   92\n93   5  7  7 10  8  344   93\n94  11 12 12 12 12  418   94\n95   8  2 12 13  2   55   95\n96   8  9  4  7 11  493   96\n97   1 10  1  1 10   39   97\n98  10  6  1  2  3  917   98\n99  10 10  1  1  4  100   99\n100  3  9  9  9 12  854  100\n101  8  2  8  5  4  676  101\n102 13  8  6 12  2  891  102\n103  5  5  9 12  5  423  103\n104  3  1 12  9  9  457  104\n105  6  8  8  4  6  983  105\n106  2 11",
        "  2 12  2  904  106\n107 12 12 12  6 10  382  107\n108  7  9  7 10  9  290  108\n109  1  8  1  8  1  596  109\n110 10  6  6 10  9  219  110\n111  1  6  1  8  1   25  111\n112  2  9  9  2  5  533  112\n113  9  9  9  9 13  962  113\n114  2 11 11 11  3   38  114\n115  9  8  5  1 12  210  115\n116  4  9 12  1  7  571  116\n117  4  4  4 12  4  303  117\n118  7 11 12 12 11  426  118\n119  9 10  2  9  9  865  119\n120  4  4  6  8 13  373  120\n121  2  4 13 13  4  954  121\n122  3  3  3 10  3  908  122\n123  2  8  8  2  8  437  123",
        "\n124  6  1  1 10  1  582  124\n125  3  3  3  1 11  969  125\n126  7  8  7  7  7  470  126\n127 12 12  9  9 12   70  127\n128 12  2  7 13 10  659  128\n129  3  6 13 13  8  314  129\n130 13  2 13  2 13  307  130\n131  9  9  9  6  1  605  131\n132  1  8 10 11  6  366  132\n133  4  4  7 10  7  580  133\n134  5  7  3  9  5  523  134\n135  5 10  9  9  9  951  135\n136  7 11  3 10  9   44  136\n137 12 12 11 12 10  903  137\n138 12  8  5 11 11  374  138\n139  3  9  9  4  9  165  139\n140 13  9  3 10  1  300  140\n141  8  2 13  4  3",
        "  621  141\n142 10 10  5 11 11  214  142\n [ reached 'max' / getOption(\"max.print\") -- omitted 858 rows ]\n",
        "> ",
        "# Make Jokers raise the value of the max in 1:5",
        "> ",
        "df.jokers <- df[apply(df, 1, function(x) any(x == 10)), ]",
        "> ",
        "",
        "> ",
        "# Find most common numbers",
        "> ",
        "# if there are two twos, reference the higher",
        "> ",
        "df.hands <- df.jokers[,c(1:5)] ",
        "> ",
        "# Make temp df with jokers converted to best cards",
        "> ",
        "for(i in 1:nrow(df.hands)){",
        "+ ",
        "target.value <- table(unlist(df.hands[i,])) %>% subset(. == max(.)) %>% subset(names(.) == max(names(.))) %>% names()",
        "+ ",
        "df.hands[i,which(df.hands[i,] == 10)] <- as.numeric(target.value)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Get duplicates and add back id and bet info",
        "> ",
        "df.2 <- lapply(apply(df.hands, 1, table),function(x){table(x) %>% as.list()}) %>% ",
        "+ ",
        "  rbindlist(fill = T) %>% ",
        "+ ",
        "  cbind(df.jokers[,c(1:5)], .) ",
        "> ",
        "df.2[df.2 == 10] <- 0",
        "> ",
        "df.2[is.na(df.2)] <- 0",
        "> ",
        "df.2 <- df.2 %>% ",
        "+ ",
        "  cbind(df.jokers[,c(\"bet\", \"hand\")]) ",
        "> ",
        "",
        "> ",
        "# Merge them back together",
        "> ",
        "df.2 <- full_join(df[which(!df$hand %in% df.2$hand),],df.2, by = c(colnames(df)[which(colnames(df) %in% colnames(df.2))]))",
        "> ",
        "",
        "> ",
        "df.2[is.na(df.2)] <- 0",
        "> ",
        "# Turn jokers into 0s ",
        "> ",
        "",
        "> ",
        "df.ordered.2  <- df.2 |>",
        "+ ",
        "  arrange(desc(`5`), desc(`4`), desc(`3`), desc(`2`),",
        "+ ",
        "          desc(`1`), desc(X1),  desc(X2),",
        "+ ",
        "          desc(X3),  desc(X4),  desc(X5))",
        "> ",
        "  #arrange(`5`, `4`, `3`, `2`, `1`, X1, X2, X3, X4, X5, decreasing = TRUE)",
        "> ",
        "  ",
        "> ",
        "#Set order",
        "> ",
        "df.ordered.2$rank <- rev(seq(1,nrow(df.ordered.2), 1))",
        "> ",
        "",
        "> ",
        "answer2 <- df.ordered.2 %>% ",
        "+ ",
        "  mutate(score = as.numeric(bet)*rank) %>% ",
        "+ ",
        "  pull(score) %>% ",
        "+ ",
        "  sum()",
        "> ",
        "answer2",
        "[1] 247317234\n",
        "> ",
        "data <- c('RL',",
        "+ ",
        "'AAA = (BBB, CCC)',",
        "+ ",
        "'BBB = (DDD, EEE)',",
        "+ ",
        "'CCC = (ZZZ, GGG)',",
        "+ ",
        "'DDD = (DDD, DDD)',",
        "+ ",
        "'EEE = (EEE, EEE)',",
        "+ ",
        "'GGG = (GGG, GGG)',",
        "+ ",
        "'ZZZ = (ZZZ, ZZZ)')",
        "> ",
        "pattern <- data[[1]]",
        "> ",
        "nodes <- data[-1]",
        "> ",
        "str_split(nodes, \"(\")",
        "Error in stri_split_regex(string, pattern, n = n, simplify = simplify,  : \n  Incorrectly nested parentheses in regex pattern. (U_REGEX_MISMATCHED_PAREN, context=`(`)\n",
        "> ",
        "nodes",
        "[1] \"AAA = (BBB, CCC)\" \"BBB = (DDD, EEE)\" \"CCC = (ZZZ, GGG)\" \"DDD = (DDD, DDD)\"\n[5] \"EEE = (EEE, EEE)\" \"GGG = (GGG, GGG)\" \"ZZZ = (ZZZ, ZZZ)\"\n",
        "> ",
        "# Applying the regex to extract the parts",
        "> ",
        "extracted_parts <- str_extract_all(nodes, \"(\\\\w+) = \\\\((\\\\w+), (\\\\w+)\\\\)\")",
        "> ",
        "View(extracted_parts)",
        "> ",
        "# Applying the regex to extract the parts",
        "> ",
        "extracted_parts <- str_extract_all(nodes, \"(\\\\w+))\")",
        "Error in stri_extract_all_regex(string, pattern, simplify = simplify,  : \n  Incorrectly nested parentheses in regex pattern. (U_REGEX_MISMATCHED_PAREN, context=`(\\w+))`)\n",
        "> ",
        "# Applying the regex to extract the parts",
        "> ",
        "extracted_parts <- str_extract_all(nodes, \"\\\\w+\")",
        "> ",
        "View(extracted_parts)",
        "> ",
        "str_replace_all(pattern, c(\"R\" = 3, \"L\" = 2))",
        "\u001B[1m\u001B[33mError\u001B[39m in `str_replace_all()`:\u001B[22m\n\u001B[33m!\u001B[39m `replacement` must be a character vector, not a double vector.\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "str_replace_all(pattern, c(\"R\" = \"3\", \"L\" = \"2\"))",
        "[1] \"32\"\n",
        "> ",
        "# Use regex to detect word character sequences",
        "> ",
        "nodes.extracted <- str_extract_all(nodes, \"\\\\w+\")",
        "> ",
        "pattern.number <- str_replace_all(pattern, c(\"R\" = \"3\", \"L\" = \"2\"))",
        "> ",
        "  print(i)",
        "Error: object 'i' not found\n",
        "> ",
        "for(i in nodes.extracted){",
        "+ ",
        "  print(i)",
        "+ ",
        "}",
        "[1] \"AAA\" \"BBB\" \"CCC\"\n[1] \"BBB\" \"DDD\" \"EEE\"\n[1] \"CCC\" \"ZZZ\" \"GGG\"\n[1] \"DDD\" \"DDD\" \"DDD\"\n[1] \"EEE\" \"EEE\" \"EEE\"\n[1] \"GGG\" \"GGG\" \"GGG\"\n[1] \"ZZZ\" \"ZZZ\" \"ZZZ\"\n",
        "> ",
        "steps <- 0",
        "> ",
        "pattern.iteration <- 1",
        "> ",
        "for(i in nodes.extracted){",
        "+ ",
        " i[[pattern.number[[pattern.iteration]]]]",
        "+ ",
        "}",
        "Error in i[[pattern.number[[pattern.iteration]]]] : \n  subscript out of bounds\n",
        "> ",
        "nodes.extracted <- str_extract_all(nodes, \"\\\\w+\")",
        "> ",
        "# Turn left/right into usable indexes ",
        "> ",
        "pattern.number <- str_replace_all(pattern, c(\"R\" = \"3\", \"L\" = \"2\"))",
        "> ",
        "",
        "> ",
        "steps <- 0",
        "> ",
        "pattern.iteration <- 1",
        "> ",
        "for(i in nodes.extracted){",
        "+ ",
        " i[[as.numeric(pattern.number[[pattern.iteration]])]]",
        "+ ",
        "}",
        "Error in i[[as.numeric(pattern.number[[pattern.iteration]])]] : \n  subscript out of bounds\n",
        "> ",
        "nodes.extracted[[pattern.number]]",
        "NULL\n",
        "> ",
        "nodes.extracted[[pattern.number[[pattern.iteration]]]]",
        "NULL\n",
        "> ",
        "pattern.number[[pattern.iteration]]",
        "[1] \"32\"\n",
        "> ",
        "# Turn left/right into usable indexes ",
        "> ",
        "pattern.number <- str_replace_all(pattern, c(\"R\" = \"3\", \"L\" = \"2\")) %>% ",
        "+ ",
        "  str_split(.,\"\")",
        "> ",
        "pattern.number",
        "[[1]]\n[1] \"3\" \"2\"\n\n",
        "> ",
        "pattern.number <- pattern.number[[1]]",
        "> ",
        "pattern.number",
        "[1] \"3\" \"2\"\n",
        "> ",
        "steps <- 0",
        "> ",
        "pattern.iteration <- 1",
        "> ",
        "for(i in nodes.extracted){",
        "+ ",
        " i[[as.numeric(pattern.number[[pattern.iteration]])]]",
        "+ ",
        "}",
        "> ",
        "nodes.extracted[[pattern.number[[pattern.iteration]]]]",
        "NULL\n",
        "> ",
        "pattern.number",
        "[1] \"3\" \"2\"\n",
        "> ",
        "pattern.iteration",
        "[1] 1\n",
        "> ",
        "pattern.number[[pattern.iteration]]",
        "[1] \"3\"\n",
        "> ",
        "# Turn left/right into usable indexes ",
        "> ",
        "pattern.number <- str_replace_all(pattern, c(\"R\" = \"3\", \"L\" = \"2\")) %>% ",
        "+ ",
        "  str_split(.,\"\") %>% ",
        "+ ",
        "  as.numeric()",
        "Error in str_replace_all(pattern, c(R = \"3\", L = \"2\")) %>% str_split(.,  : \n  'list' object cannot be coerced to type 'double'\n",
        "> ",
        "pattern.number <- pattern.number[[1]]",
        "> ",
        "# Turn left/right into usable indexes ",
        "> ",
        "pattern.number <- str_replace_all(pattern, c(\"R\" = \"3\", \"L\" = \"2\")) %>% ",
        "+ ",
        "  str_split(.,\"\") ",
        "> ",
        "pattern.number <- pattern.number[[1]] %>% as.numeric()",
        "> ",
        "pattern.number",
        "[1] 3 2\n",
        "> ",
        "steps <- 0",
        "> ",
        "pattern.iteration <- 1",
        "> ",
        "for(i in nodes.extracted){",
        "+ ",
        " i[[as.numeric(pattern.number[[pattern.iteration]])]]",
        "+ ",
        "}",
        "> ",
        "nodes.extracted[[pattern.number[[pattern.iteration]]]]",
        "[1] \"CCC\" \"ZZZ\" \"GGG\"\n",
        "> ",
        "pattern.number[[pattern.iteration]]",
        "[1] 3\n",
        "> ",
        "nodes.extracted",
        "[[1]]\n[1] \"AAA\" \"BBB\" \"CCC\"\n\n[[2]]\n[1] \"BBB\" \"DDD\" \"EEE\"\n\n[[3]]\n[1] \"CCC\" \"ZZZ\" \"GGG\"\n\n[[4]]\n[1] \"DDD\" \"DDD\" \"DDD\"\n\n[[5]]\n[1] \"EEE\" \"EEE\" \"EEE\"\n\n[[6]]\n[1] \"GGG\" \"GGG\" \"GGG\"\n\n[[7]]\n[1] \"ZZZ\" \"ZZZ\" \"ZZZ\"\n\n"
    ]
}