}
nodes.extracted[[pattern.number[[pattern.iteration]]]]
pattern.number
pattern.iteration
pattern.number[[pattern.iteration]]
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"") %>%
as.numeric()
pattern.number <- pattern.number[[1]]
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
pattern.number
steps <- 0
pattern.iteration <- 1
for(i in nodes.extracted){
i[[as.numeric(pattern.number[[pattern.iteration]])]]
}
nodes.extracted[[pattern.number[[pattern.iteration]]]]
pattern.number[[pattern.iteration]]
nodes.extracted
pattern <- data[[1]]
nodes <- data[-1]
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
steps <- 0
pattern.iteration <- 1
for(i in nodes.extracted){
i[[as.numeric(pattern.number[[pattern.iteration]])]]
}
nodes.extracted[[pattern.number[[pattern.iteration]]]]
pattern
nodes
nodes.extracted
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")[2:3]
nodes.extracted
str_extract_all
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number
pattern.number <- pattern.number[[1]] %>% as.numeric()
steps <- 0
pattern.iteration <- 1
for(i in nodes.extracted){
i[[as.numeric(pattern.number[[pattern.iteration]])]]
}
nodes.extracted[[pattern.number[[pattern.iteration]]]]
pattern.number
pattern.iteration
nodes.extracted
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
nodes.extracted
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
nodes.extracted
nodes.extracted
print(i)
pattern.iteration <- 1
for(i in nodes.extracted){
print(i)
i[[as.numeric(pattern.number[[pattern.iteration]])]]
}
pattern.number
nodes.extracted[[1]]
current_node
names(nodes.extracted)
current_node
current_node <- nodes.extracted[[1]]
current_node
steps + 1 / length(steps)
length(steps)
length(pattern.number)
steps + 1 / length(pattern.number)
# Track which step we're on
steps <- steps + 1 / length(pattern.number) %% 1
steps
length(pattern.number) %% 1
length(pattern.number)
length(pattern.number) %% 2
# Track which step we're on
steps <- steps + 1 / length(pattern.number) %% 1
for(i in 1:10){
print(pattern.number[[i]])
}
for(i in 1:10){
index <- (i - 1) %% length(pattern.number) + 1
# Access the element
current_element <- pattern.number[index]
print(current_element)
}
current_node <- nodes.extracted[[1]]
current_node
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
steps <- 0
pattern.iteration <- 1
current_node <- nodes.extracted[[1]]
while(next_node != "ZZZ"){
# Track which step we're on
index <- (i - 1) %% length(pattern.number) + 1
# Access the element
current_element <- pattern.number[index]
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
current_node <- nodes.extracted[[next_node]]
steps <- steps + 1
}
current_node[["ZZZ"]]
current_node <- nodes.extracted[[1]]
current_node
current_node[["CCC"]]
current_node["CCC"]
current_node["CCC"]
current_node[[2]]
current_node[[3]]
steps <- 0
pattern.iteration <- 1
current_node <- nodes.extracted[[1]]
while(next_node != "ZZZ"){
steps <- steps + 1
# Track which step we're on
index <- (steps - 1) %% length(pattern.number) + 1
# Access the element
current_element <- pattern.number[index]
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
current_node <- nodes.extracted[[next_node]]
}
steps <- 0
pattern.iteration <- 1
current_node <- nodes.extracted[[1]]
while(next_node != "ZZZ"){
steps <- steps + 1
print(steps)
# Track which step we're on
index <- (steps - 1) %% length(pattern.number) + 1
print(index)
# Access the element
current_element <- pattern.number[index]
print(current_element)
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
current_node <- nodes.extracted[[next_node]]
}
next_node = NA
while(next_node != "ZZZ"){
steps <- steps + 1
print(steps)
# Track which step we're on
index <- (steps - 1) %% length(pattern.number) + 1
print(index)
# Access the element
current_element <- pattern.number[index]
print(current_element)
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
current_node <- nodes.extracted[[next_node]]
}
next_node = 111
while(next_node != "ZZZ"){
steps <- steps + 1
print(steps)
# Track which step we're on
index <- (steps - 1) %% length(pattern.number) + 1
print(index)
# Access the element
current_element <- pattern.number[index]
print(current_element)
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
current_node <- nodes.extracted[[next_node]]
}
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
steps <- 0
pattern.iteration <- 1
current_node <- nodes.extracted[[1]]
next_node = 111
while(next_node != "ZZZ"){
steps <- steps + 1
print(steps)
# Track which step we're on
index <- (steps - 1) %% length(pattern.number) + 1
print(index)
# Access the element
current_element <- pattern.number[index]
print(current_element)
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
print(next_node)
current_node <- nodes.extracted[[next_node]]
}
data <- c('LLR',
'AAA = (BBB, BBB)',
'BBB = (AAA, ZZZ)',
'ZZZ = (ZZZ, ZZZ)')
pattern <- data[[1]]
nodes <- data[-1]
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
steps <- 0
pattern.iteration <- 1
current_node <- nodes.extracted[[1]]
next_node = 111
while(next_node != "ZZZ"){
steps <- steps + 1
print(steps)
# Track which step we're on
index <- (steps - 1) %% length(pattern.number) + 1
print(index)
# Access the element
current_element <- pattern.number[index]
print(current_element)
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
print(next_node)
current_node <- nodes.extracted[[next_node]]
}
data <- readLines("data/input_8.txt")
pattern <- data[[1]]
nodes <- data[-1]
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
# Make nodes names the first value
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
pattern
data
data <- data[which(data != "")]
data
pattern <- data[[1]]
nodes <- data[-1]
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
steps <- 0
pattern.iteration <- 1
current_node <- nodes.extracted[[1]]
next_node = 111
while(next_node != "ZZZ"){
steps <- steps + 1
print(steps)
# Track which step we're on
index <- (steps - 1) %% length(pattern.number) + 1
print(index)
# Access the element
current_element <- pattern.number[index]
print(current_element)
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
print(next_node)
current_node <- nodes.extracted[[next_node]]
}
nodes.extracted[["AAA"]]
current_node <- nodes.extracted[["AAA"]]
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
steps <- 0
pattern.iteration <- 1
current_node <- nodes.extracted[["AAA"]]
next_node = 111
while(next_node != "ZZZ"){
steps <- steps + 1
print(steps)
# Track which step we're on
index <- (steps - 1) %% length(pattern.number) + 1
print(index)
# Access the element
current_element <- pattern.number[index]
print(current_element)
# apply steps to current itteration -> find next
next_node <- current_node[[current_element]]
print(next_node)
current_node <- nodes.extracted[[next_node]]
}
data <- c('LR',
'11A = (11B, XXX)',
'11B = (XXX, 11Z)',
'11Z = (11B, XXX)',
'22A = (22B, XXX)',
'22B = (22C, 22C)',
'22C = (22Z, 22Z)',
'22Z = (22B, 22B)',
'XXX = (XXX, XXX)')
# Function to encapsulate the while loop logic
process_node <- function(start_node) {
steps <- 0
pattern_iteration <- 1
current_node <- nodes.extracted[[start_node]]
next_node <- "111" # Initial value
while(next_node != "ZZZ" && !is.null(current_node)) {
steps <- steps + 1
index <- (steps - 1) %% length(pattern.number) + 1
current_element <- pattern.number[index]
next_node <- current_node[[current_element]] %>% unlist %>% .[1]
current_node <- nodes.extracted[[next_node]]
}
return(steps)
}
# Create a list of nodes ending with 'A'
nodes_ending_with_A <- names(nodes.extracted)[grepl("A$", names(nodes.extracted))]
# Apply the function to each node in the list
steps_record <- lapply(nodes_ending_with_A, process_node)
data <- c('LR',
'11A = (11B, XXX)',
'11B = (XXX, 11Z)',
'11Z = (11B, XXX)',
'22A = (22B, XXX)',
'22B = (22C, 22C)',
'22C = (22Z, 22Z)',
'22Z = (22B, 22B)',
'XXX = (XXX, XXX)')
data <- data[which(data != "")]
pattern <- data[[1]]
nodes <- data[-1]
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
# Make nodes names the first value
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
View(nodes.extracted)
View(extracted_parts)
# Make nodes names the first value
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
# Function to encapsulate the while loop logic
process_node <- function(start_node) {
steps <- 0
pattern_iteration <- 1
current_node <- nodes.extracted[[start_node]]
next_node <- "111" # Initial value
while(next_node != "ZZZ" && !is.null(current_node)) {
steps <- steps + 1
index <- (steps - 1) %% length(pattern.number) + 1
current_element <- pattern.number[index]
next_node <- current_node[[current_element]] %>% unlist %>% .[1]
current_node <- nodes.extracted[[next_node]]
}
return(steps)
}
# Create a list of nodes ending with 'A'
nodes_ending_with_A <- names(nodes.extracted)[grepl("A$", names(nodes.extracted))]
# Apply the function to each node in the list
steps_record <- lapply(nodes_ending_with_A, process_node)
nodes_ending_with_A
data <- c('LR',
'11A = (11B, XXX)',
'11B = (XXX, 11Z)',
'11Z = (11B, XXX)',
'22A = (22B, XXX)',
'22B = (22C, 22C)',
'22C = (22Z, 22Z)',
'22Z = (22B, 22B)',
'XXX = (XXX, XXX)')
data <- data[which(data != "")]
pattern <- data[[1]]
nodes <- data[-1]
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
# Make nodes names the first value
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
# Function to encapsulate the while loop logic
process_node <- function(start_node) {
steps <- 0
pattern_iteration <- 1
current_node <- nodes.extracted[[start_node]]
next_node <- "111" # Initial value
while(!(next_node %in% nodes_ending_with_Z) && !is.null(current_node)) {
steps <- steps + 1
index <- (steps - 1) %% length(pattern.number) + 1
current_element <- pattern.number[index]
next_node <- current_node[[current_element]] %>% unlist %>% .[1]
current_node <- nodes.extracted[[next_node]]
}
return(steps)
}
# Create a list of nodes ending with 'A'
nodes_ending_with_A <- names(nodes.extracted)[grepl("A$", names(nodes.extracted))]
nodes_ending_with_Z <- names(nodes.extracted)[grepl("Z$", names(nodes.extracted))]
# Apply the function to each node in the list
steps_record <- lapply(nodes_ending_with_A, process_node)
# Convert the list to a named vector
steps_record <- setNames(unlist(steps_record), nodes_ending_with_A)
# Output the results
steps_record
steps_record
# Apply the function to each node in the list
steps_record <- lapply(nodes_ending_with_A, process_node)
steps_record
# Convert the list to a named vector
steps_record <- unlist(steps_record)
steps_record
lcm_vector(steps_record)
lcm_vector <- function(x) Reduce(lcm, x)
lcm_vector(steps_record)
# Convert the list to a named vector
steps_record <- unlist(steps_record)
steps_record
lcm_vector <- function(x) Reduce(lcm, x)
lcm_vector(steps_record)
lcm
lcm_of_steps <- if (length(steps_values) > 1) {
Reduce(gtools::lcm, steps_values)
} else {
steps_values[1]
}
# Convert the list to a named vector
steps_record <- unlist(steps_record)
lcm_of_steps <- if (length(steps_record) > 1) {
Reduce(gtools::lcm, steps_record)
} else {
steps_record[1]
}
library(gtools)
install.packages("gtools")
library(gtools)
Reduce(lcm, steps_record)
steps_record
find_lcm <- function(numbers) {
# Reduce the list using the lcm function from gtools
Reduce(lcm, numbers)
}
# Example usage
numbers <- c(12, 18, 24)  # Example list of numbers
lcm_result <- find_lcm(numbers)
steps_record[3] <- 4
find_lcm <- function(numbers) {
# Reduce the list using the lcm function from gtools
Reduce(lcm, numbers)
}
# Example usage
numbers <- c(12, 18, 24)  # Example list of numbers
lcm_result <- find_lcm(numbers)
# Apply the function to each node in the list
steps_record <- lapply(nodes_ending_with_A, process_node)
# Convert the list to a named vector
steps_record <- unlist(steps_record)
steps_record
install.packages("numbers")
library(numbers)
numbers::mLCM(c(20,50,75))
numbers::mLCM(steps_record)
data <- c('LLR',
'AAA = (BBB, BBB)',
'BBB = (AAA, ZZZ)',
'ZZZ = (ZZZ, ZZZ)')
data <- readLines("data/input_8.txt")
data <- data[which(data != "")]
pattern <- data[[1]]
nodes <- data[-1]
# Use regex to detect word character sequences
nodes.extracted <- str_extract_all(nodes, "\\w+")
# Turn left/right into usable indexes
pattern.number <- str_replace_all(pattern, c("R" = "3", "L" = "2")) %>%
str_split(.,"")
pattern.number <- pattern.number[[1]] %>% as.numeric()
# Make nodes names the first value
names(nodes.extracted) <- lapply(str_extract_all(nodes, "\\w+"), "[[", 1)
# Function to encapsulate the while loop logic
process_node <- function(start_node) {
steps <- 0
pattern_iteration <- 1
current_node <- nodes.extracted[[start_node]]
next_node <- "111" # Initial value
while(!(next_node %in% nodes_ending_with_Z) && !is.null(current_node)) {
steps <- steps + 1
index <- (steps - 1) %% length(pattern.number) + 1
current_element <- pattern.number[index]
next_node <- current_node[[current_element]] %>% unlist %>% .[1]
current_node <- nodes.extracted[[next_node]]
}
return(steps)
}
# Create a list of nodes ending with 'A'
nodes_ending_with_A <- names(nodes.extracted)[grepl("A$", names(nodes.extracted))]
nodes_ending_with_Z <- names(nodes.extracted)[grepl("Z$", names(nodes.extracted))]
# Apply the function to each node in the list
steps_record <- lapply(nodes_ending_with_A, process_node)
# Convert the list to a named vector
steps_record <- unlist(steps_record)
numbers::mLCM(steps_record)
answer2 <- numbers::mLCM(steps_record)
answer2
13740108158591 == answer2
